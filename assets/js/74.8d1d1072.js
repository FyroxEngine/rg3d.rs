(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{430:function(e,t,s){"use strict";s.r(t);var a=s(26),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Fyrox is an "),t("a",{attrs:{href:"https://github.com/FyroxEngine/Fyrox",target:"_blank",rel:"noopener noreferrer"}},[e._v("open-source"),t("OutboundLink")],1),e._v(" Rust game engine with lots of out-of-box\ngame-ready features and a full-featured editor. Last two weeks were mostly dedicated to audio improvements\nand adding blend shapes support.")]),e._v(" "),t("h2",{attrs:{id:"blend-shapes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blend-shapes"}},[e._v("#")]),e._v(" Blend Shapes")]),e._v(" "),t("YtVideo",{attrs:{url:"https://www.youtube.com/embed/2VtYk2vDoTY"}}),e._v(" "),t("p",[e._v("Blend shapes allows you to dynamically change 3D meshes; they are widely used in games to create facial\nanimation, to dynamically add details to character body parts, etc. It is quite simple, yet very powerful\nmechanism, that opens a wide range of possible uses: you can create cut-scenes directly on the engine where\nyour characters will speak using pre-defined set of shapes associated with "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Viseme",target:"_blank",rel:"noopener noreferrer"}},[e._v("visemes"),t("OutboundLink")],1),e._v(".\nYou can also use this to create characters creator for your game - all you need to do is to specify a set\nof offsets for desired parts of face and then allow a player to mix these parts with any proportions they\nlike. In other words, actual use of this functionality is limited by your imagination.")]),e._v(" "),t("h2",{attrs:{id:"audio-improvements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#audio-improvements"}},[e._v("#")]),e._v(" Audio Improvements")]),e._v(" "),t("p",[e._v("Fyrox now uses "),t("a",{attrs:{href:"https://crates.io/crates/tinyaudio",target:"_blank",rel:"noopener noreferrer"}},[e._v("TinyAudio"),t("OutboundLink")],1),e._v(" crate as a sound output backend. This is a new,\ntiny crate that serves a single purpose - make audio output as simple as possible. Also, compared to "),t("code",[e._v("cpal")]),e._v(",\nthis crate it does not have weird sound artifacts on WebAssembly and builds fine on Android platform.")]),e._v(" "),t("h2",{attrs:{id:"ui-improvements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ui-improvements"}},[e._v("#")]),e._v(" UI Improvements")]),e._v(" "),t("p",[t("code",[e._v("fyrox-ui")]),e._v(" now have generic version of "),t("code",[e._v("SVector<T, N>")]),e._v(" editor. Also, this new editor supports limits (min, max),\nand step that can be supplied to it using reflection ("),t("code",[e._v("min")]),e._v(", "),t("code",[e._v("max")]),e._v(", "),t("code",[e._v("step")]),e._v(" attributes respectively). This can\nbe useful in your scripts: now your vector parameters can use these attributes.")]),e._v(" "),t("h2",{attrs:{id:"performance-fixes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#performance-fixes"}},[e._v("#")]),e._v(" Performance Fixes")]),e._v(" "),t("p",[e._v('There was a nasty performance degradation bug, that caused the editor to work more slowly over time, especially\nwhen switching between multiple entities too frequently. The cause of bug was context menu system of the UI\nframework. Context menus are "standalone" entities, they\'re not attached directly to a widget, instead widgets\njust use their handles. Also, the same context menu can be shared across unlimited amount of other widgets.\nUsually, when you deleting UI node, '),t("code",[e._v("fyrox-ui")]),e._v(' deletes all children nodes, but since context menu is not a child\nnode, they weren\'t deleted, thus leading to tons of context menus left "alive". Now this bug is fixed, by using\na special "shared handle", which is essentially just a '),t("code",[e._v("Rc<Handle<UiNode>>")]),e._v(". It has a custom destructor that\nsends a "),t("code",[e._v("WidgetMessage::Remove")]),e._v(" message to the context menu when there's no more strong references to it.")]),e._v(" "),t("h2",{attrs:{id:"full-list-of-changes-in-random-order"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-list-of-changes-in-random-order"}},[e._v("#")]),e._v(" Full List of Changes in Random Order")]),e._v(" "),t("ul",[t("li",[e._v("Added blend shapes support.")]),e._v(" "),t("li",[e._v("Ability to collect UI nodes statistics and compare snapshots.")]),e._v(" "),t("li",[e._v("Fixed performance degradation in the editor.")]),e._v(" "),t("li",[e._v("Migrated to "),t("a",{attrs:{href:"https://crates.io/crates/tinyaudio",target:"_blank",rel:"noopener noreferrer"}},[e._v("tinyaudio"),t("OutboundLink")],1),e._v(" as a sound output backend.")]),e._v(" "),t("li",[e._v("Ability to create/destroy audio output device on demand.")]),e._v(" "),t("li",[e._v("Generic "),t("code",[e._v("SVector<T,N>")]),e._v(" property editor.")]),e._v(" "),t("li",[e._v("Ability to set limits (min, max) and step for vector property editors.")]),e._v(" "),t("li",[e._v("Fixed import errors of ASCII FBX files with empty texture paths.")])])],1)}),[],!1,null,null,null);t.default=o.exports}}]);