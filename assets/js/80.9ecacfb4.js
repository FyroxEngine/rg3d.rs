(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{436:function(e,t,i){"use strict";i.r(t);var o=i(26),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("I'm happy to announce that Fyrox 0.34 has been released! Fyrox is a modern game engine written in Rust, it helps\nyou to create 2D and 3D games with low effort using native editor; it is like Unity, but in Rust. This release includes\ncode hot reloading, project exporter, assets preview generation, UI prefabs, GLTF support, static and dynamic batching, keyboard\nnavigation, animation support for UI, editor style and usability improvements and many more.")]),e._v(" "),t("h2",{attrs:{id:"how-to-upgrade"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-upgrade"}},[e._v("#")]),e._v(" How to Upgrade")]),e._v(" "),t("p",[e._v("At first, install the latest "),t("code",[e._v("fyrox-template")]),e._v(" by executing the following command: "),t("code",[e._v("cargo install fyrox-template --force")]),e._v(".\nThen execute this: "),t("code",[e._v("fyrox-template upgrade --version=latest")]),e._v(". The amount of breaking changes in the code is quite low and\nyou can use "),t("a",{attrs:{href:"https://github.com/fyrox-book/fyrox-book.github.io/commit/2b82494e96155f769f53a1f3ae947f6a46e2384c",target:"_blank",rel:"noopener noreferrer"}},[e._v("this commit"),t("OutboundLink")],1),e._v("\nas a guide to fix an existing project.")]),e._v(" "),t("h2",{attrs:{id:"code-hot-reloading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#code-hot-reloading"}},[e._v("#")]),e._v(" Code Hot Reloading")]),e._v(" "),t("p",[e._v('Code hot reloading is a new feature of the engine, that allows you to recompile the game while it is running and the new\nversion is then automatically loaded in the running game. This feature is super useful for rapid prototyping, because it\nturns Rust in some sort of a "scripting" language with close-to-zero iterations overhead. Since only the game code is\nreloaded, all heavy assets remains loaded in the memory and there\'s no need do the typical chain of actions: "close game\n-> write code -> compile -> run -> initialize -> load assets -> setup required conditions -> test", all you need to do\nis to "write code -> compile -> test". In action it looks like this:')]),e._v(" "),t("YtVideo",{attrs:{url:"https://www.youtube.com/embed/vq6P3Npydmw"}}),e._v(" "),t("p",[e._v("This feature makes game development in Rust much more fun, because you can focus on the actual game development and not\nrepeat all these redundant actions like a robot.")]),e._v(" "),t("p",[e._v("Huge respect to "),t("a",{attrs:{href:"https://github.com/zakarumych",target:"_blank",rel:"noopener noreferrer"}},[e._v("@zakarumych"),t("OutboundLink")],1),e._v(", who did awesome research job and also implemented hot reloading\nin his "),t("a",{attrs:{href:"https://github.com/zakarumych/nothing",target:"_blank",rel:"noopener noreferrer"}},[e._v("game engine"),t("OutboundLink")],1),e._v(" prototype (?).")]),e._v(" "),t("h3",{attrs:{id:"how-to-use"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use"}},[e._v("#")]),e._v(" How To Use")]),e._v(" "),t("p",[e._v("At first, install the latest "),t("code",[e._v("fyrox-template")]),e._v(" by executing the following command: "),t("code",[e._v("cargo install fyrox-template --force")]),e._v(".\nGenerate a project "),t("a",{attrs:{href:"https://fyrox-book.github.io/beginning/scripting.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("as usual"),t("OutboundLink")],1),e._v(" and do the following instructions.")]),e._v(" "),t("blockquote",[t("p",[e._v("⚠️ If you have an existing project from one of the previous versions of the engine, the best way to add support for\nCHR is to re-generate the entire project and copy all the assets and game code in the new project. CHR requires very\nspecific project structure and a small mistake in it could lead to incorrect behavior.")])]),e._v(" "),t("p",[e._v("CHR is quite simple to use - a project generated by "),t("code",[e._v("fyrox-template")]),e._v(" already has all that is needed for hot reloading.\nYet, it requires some bootstrapping to start using it. At first, you need to compile your game plugin using the following\ncommand:")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("RUSTFLAGS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-C prefer-dynamic=yes"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cargo")]),e._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--package")]),e._v(" game_dylib --no-default-features "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--features")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"dylib-engine"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--profile")]),e._v(" dev-hot-reload\n")])])]),t("p",[e._v("This command will compile the engine DLL ("),t("code",[e._v("fyrox_dylib.dll/so")]),e._v(") and the plugin DLL ("),t("code",[e._v("game_dylib.dll/so")]),e._v("). Please note the\nmandatory environment variable "),t("code",[e._v('RUSTFLAGS="-C prefer-dynamic=yes"')]),e._v(". It forces the compiler to link standard library\ndynamically. It is very important, because if not set, the standard library will be duplicated in game plugin and engine,\nwhich will lead to subtle bugs.")]),e._v(" "),t("blockquote",[t("p",[e._v("⚠️ Environment variables can be set in a different ways, depending on your OS. On Linux it simply prepends the actual\ncommand, on Windows it requires a "),t("a",{attrs:{href:"https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/set_1#examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("separate command"),t("OutboundLink")],1),e._v(".\nOther OSes can have their own ways of setting environment variables.")])]),e._v(" "),t("p",[e._v("The next step is to compile the editor in CHR mode. To do that, run the following command:")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("RUSTFLAGS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-C prefer-dynamic=yes"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cargo")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--package")]),e._v(" editor --no-default-features "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--features")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"dylib"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--profile")]),e._v(" dev-hot-reload\n")])])]),t("p",[e._v("This command will compile the editor in CHR mode and run it. After this, all you need to do is to select build profile\nin the editor to be "),t("code",[e._v("Debug (HR)")]),e._v(":")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/build_profile.png",alt:"build profiles"}})]),e._v(" "),t("p",[e._v("Once that's done you can run your game by clicking on the green "),t("code",[e._v("Play")]),e._v(" button. You can switch between CHR and normal mode\n(static linking) at any time. Keep in mind, that if you run the editor in CHR mode, it will also reload all changed plugins.")]),e._v(" "),t("h3",{attrs:{id:"build-profiles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build-profiles"}},[e._v("#")]),e._v(" Build Profiles")]),e._v(" "),t("p",[e._v("CHR uses separate build profiles: "),t("code",[e._v("dev-hot-reload")]),e._v(" (no optimizations) and "),t("code",[e._v("release-hot-reload")]),e._v(" (with optimizations).\nSeparate build profiles allows you to quickly switch between statically linked plugins and code hot reloading. This could\nbe useful if you're experiencing some issues with hot reloading (see next section for more info).")]),e._v(" "),t("h3",{attrs:{id:"stability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stability"}},[e._v("#")]),e._v(" Stability")]),e._v(" "),t("p",[e._v("CHR is very new and experimental feature of the engine, it is based on wildly unsafe functionality which could result\nin memory corruption, subtle bugs, etc. If you experience weird behaviour of your game after hot reloading, run the\ngame in normal (static linking) mode instead. Please report any bugs in the "),t("a",{attrs:{href:"https://github.com/FyroxEngine/Fyrox/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue tracker"),t("OutboundLink")],1),e._v("\nof the engine. CHR was tested on two relatively large games - "),t("a",{attrs:{href:"https://github.com/mrDIMAS/FishFolly",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fish Folly"),t("OutboundLink")],1),e._v(" and\n"),t("a",{attrs:{href:"https://github.com/mrDIMAS/StationIapetus",target:"_blank",rel:"noopener noreferrer"}},[e._v("Station Iapetus"),t("OutboundLink")],1),e._v(". You can download these projects and try CHR yourself.")]),e._v(" "),t("h3",{attrs:{id:"technical-details-and-limitations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#technical-details-and-limitations"}},[e._v("#")]),e._v(" Technical Details and Limitations")]),e._v(" "),t("p",[e._v("CHR is using standard operating system (OS) mechanism of shared libraries (DLL for short). Pretty much any OS can load\nnative code into a running process dynamically from a DLL. Any dynamically loaded library can then be unloaded from the\nprocess memory. This gives a perfect opportunity to reload game code in runtime. It may sound quite easy, but on practice\nthere are a lot of issues.")]),e._v(" "),t("h4",{attrs:{id:"plugin-entities-and-reloading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin-entities-and-reloading"}},[e._v("#")]),e._v(" Plugin Entities and Reloading")]),e._v(" "),t("p",[e._v("Plugins can supply the engine with a predefined set of entities (such as scripts, etc.). These entities are serialized into\na memory blob before the plugin itself is unloaded. When all plugins are reloaded, this memory blob is used to restore\nthe state of plugin entities. That being said, pretty much all plugin entities must be serializable (implement "),t("code",[e._v("Visit")]),e._v(" trait).")]),e._v(" "),t("h4",{attrs:{id:"trait-objects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trait-objects"}},[e._v("#")]),e._v(" Trait Objects")]),e._v(" "),t("p",[e._v("Trait object are very problematic with hot reloading, because internally trait objects contains vtable with function\npointers. These pointers can be easily invalidated if the plugin is unloaded. This applies even to engine trait objects,\nif they're created directly from the plugin side. The only way to bypass this issue is to use special methods from the\nengine to create its trait objects. It is possible to add a lint to clippy to check for such cases (see the respective\n"),t("a",{attrs:{href:"https://github.com/rust-lang/rust-clippy/issues/12819",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("h4",{attrs:{id:"dangling-objects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dangling-objects"}},[e._v("#")]),e._v(" Dangling Objects")]),e._v(" "),t("p",[e._v("Current plugin system tries its best to remove all plugin's entities from the engine internals before reloading plugins.\nHowever, some objects could be overlooked by this system, which could result in crash or memory corruption. Current\napproach of preventing to having dangling objects is based on built-in reflection system - the plugin system iterates\nacross all fields of every object and checks its assembly name. If the assembly name match the plugin's assembly name,\nthen this object must be deleted before the plugin is unloaded.")]),e._v(" "),t("h4",{attrs:{id:"non-serializable-entities"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#non-serializable-entities"}},[e._v("#")]),e._v(" Non-serializable Entities")]),e._v(" "),t("p",[e._v("Not every object can be serialized, and in this case the current plugin system calls a special method to restore such\nnon-serializable entities after hot reloading. Such entities could include server connections, job queues, etc.")]),e._v(" "),t("h2",{attrs:{id:"editor-style-and-usability-improvements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#editor-style-and-usability-improvements"}},[e._v("#")]),e._v(" Editor Style and Usability Improvements")]),e._v(" "),t("p",[e._v("The editor has got a new look, that makes it more attracting and pleasant to work with:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/editor.png",alt:"editor"}})]),e._v(" "),t("h2",{attrs:{id:"multi-script-support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multi-script-support"}},[e._v("#")]),e._v(" Multi-Script Support")]),e._v(" "),t("p",[e._v('Scene nodes can now have more than one script assigned. This greatly increases flexibility of scripting by allowing you\nto mix multiple scripts on the same node. Scenes made with previous "one node-one script" approach can still be loaded\nwithout any issues (backward compatibility is preserved).')]),e._v(" "),t("p",[e._v("You can assign scripts from both the editor and code. In the editor is multiple scripts looks like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/multiscript.png",alt:"multiscript"}})]),e._v(" "),t("p",[e._v("To add a new script, click on the "),t("code",[e._v("+")]),e._v(" button and the select the script type from the dropdown list. Execution order of\nthe script methods is the same as their location in the list.")]),e._v(" "),t("h2",{attrs:{id:"project-exporter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#project-exporter"}},[e._v("#")]),e._v(" Project Exporter")]),e._v(" "),t("p",[e._v("The editor now offers a new tool, that builds your project for various platforms (PC, WebAssembly, Android) and creates\npackages that are ready for deployment. This automated build system even allows you to build, upload and run your game\ndirectly on your smartphone in a few clicks.")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/project_export.png",alt:"project export"}})]),e._v(" "),t("p",[e._v("At first, this tool installs required build tools, then it scans for used assets in the specified folders and clones them\nin the output folder. Then it compiles your game in release mode and clones executable file into the output folder. It can\nalso run the final build if needed. The latter option is very useful for Android builds and basically allows you to test\nyour games on a smartphone rapidly.")]),e._v(" "),t("p",[e._v("Project exporter is still a new, highly experimental tool, yet it could save heaps of time by removing a lot of manual work.\nFor now it may lack some targets for specific environments, but thankfully it could be fixed very easily.")]),e._v(" "),t("h2",{attrs:{id:"assets-preview-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assets-preview-generation"}},[e._v("#")]),e._v(" Assets Preview Generation")]),e._v(" "),t("p",[e._v("The editor now generates previews for assets, which helps finding desired one quickly. Previously you'd need to click\non each asset to see its preview in the asset previewer. Asset preview works with pretty much any asset that has sensible\ngraphical representation. This is how it looks for prefabs:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/asset_preview.png",alt:"asset preview"}})]),e._v(" "),t("p",[e._v("Sound sources shows the waveform, it is not very informative as prefabs preview, but still can give some info about nature\nof the source:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/sound_source_preview.png",alt:"sound source preview"}})]),e._v(" "),t("p",[e._v("The same applies for fonts, user interfaces, etc. Asset previews could take some time render and on some machines it could\ngo out of control by taking too much time for rendering. If this will happen, you can always disable this feature in the\neditor settings.")]),e._v(" "),t("h2",{attrs:{id:"gltf-support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gltf-support"}},[e._v("#")]),e._v(" GLTF Support")]),e._v(" "),t("p",[e._v("GLTF support was one of the requested features and it is finally implemented (kudos to "),t("a",{attrs:{href:"https://github.com/b-guild",target:"_blank",rel:"noopener noreferrer"}},[e._v("b-guild"),t("OutboundLink")],1),e._v(").\nUse "),t("code",[e._v("gltf")]),e._v(" feature to enable the GLTF loader.")]),e._v(" "),t("h2",{attrs:{id:"static-and-dynamic-batching"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#static-and-dynamic-batching"}},[e._v("#")]),e._v(" Static and Dynamic Batching")]),e._v(" "),t("p",[e._v("Static baching is a technique that merges multiple meshes with the same material into a larger one, thus significantly\nreducing amount of draw calls on GPU, which in its turn increases rendering performance. This happens because each draw\ncall has a small overhead, and when there are thousands of draw calls, it could significantly affect performance.")]),e._v(" "),t("p",[e._v("Dynamic batching is similar to static batching, but it works at each frame, merging specified meshes into a large one.\nThis feature could be useful in limited cases only, since it is effective only at meshes with low polygon count (tens to\nhundreds of polygons).")]),e._v(" "),t("p",[e._v("To use static/dynamic batching all you need to do is to create a root Mesh scene node and specify its batching node to be\nStatic or Dynamic. Next, you need to attach all the objects to it, which you want to be batched. The engine will do the\nrest of the work for you.")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/batching.png",alt:"batching"}})]),e._v(" "),t("p",[e._v("It will automatically create a batch per each material in all descendants of the root mesh node and merge all the geometry\nin an appropriate batch.")]),e._v(" "),t("h2",{attrs:{id:"multiple-ui-instances"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multiple-ui-instances"}},[e._v("#")]),e._v(" Multiple UI Instances")]),e._v(" "),t("p",[e._v("Fyrox now supports multiple user interface instances. It was also possible before, but you'd have to manually create UI instances\nand manage them appropriately, which is quite bug-prone. However, this is not the main reason why there are multiple UI support.\nThe main reason is code hot reloading, when the engine manages UI itself it can reload only a small portion of UI that comes from\na game plugin. In vast majority of cases there's no custom widgets and nothing will be reloaded at all, increasing code hot\nreloading performance and reducing iteration times.")]),e._v(" "),t("h2",{attrs:{id:"keyboard-navigation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keyboard-navigation"}},[e._v("#")]),e._v(" Keyboard Navigation")]),e._v(" "),t("p",[e._v("For a long time "),t("code",[e._v("fyrox-ui")]),e._v(" framework didn't support keyboard navigation, which was quite annoying, since keyboard navigation\ncould save heaps of time when doing repetitive actions (such as filling in a series of input fields). Now "),t("code",[e._v("fyrox-ui")]),e._v(" supports\nvarious keyboard navigation techniques. For example, this is how Tab/Shift+Tab navigation looks in the Inspector:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/keyboard_navigation.gif",alt:"keyboard navigation"}})]),e._v(" "),t("p",[e._v("Trees can now be traversed using arrow keys as well:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/tree_keyboard_navigation.gif",alt:"tree keyboard navigation"}})]),e._v(" "),t("h2",{attrs:{id:"animations-in-ui"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#animations-in-ui"}},[e._v("#")]),e._v(" Animations in UI")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/animation.gif",alt:"animation"}})]),e._v(" "),t("p",[e._v("UI now supports animations, which is useful to be able create interactive user interfaces. UI animations uses the same animation\nsystem that game scenes do with little to no differences. It is also possible to create state machines:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/absm.gif",alt:"absm"}})]),e._v(" "),t("p",[e._v("State machines allows you to mix multiple animations into one.")]),e._v(" "),t("h2",{attrs:{id:"grid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grid"}},[e._v("#")]),e._v(" Grid")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/grid.PNG",alt:"grid"}})]),e._v(" "),t("p",[e._v("Game scenes now have a oXZ-oriented grid, each square cell of it has 1m in size. It could be useful for grid snapping and estimating\nobjects sizes by eye. The grid can be turned on/off in the editor settings.")]),e._v(" "),t("h2",{attrs:{id:"animation-editor-improvements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#animation-editor-improvements"}},[e._v("#")]),e._v(" Animation Editor Improvements")]),e._v(" "),t("p",[e._v("It is now possible to select multiple curves at once in the animation editor, this makes editing much faster since you don't need to\nswitch between curves. You can also select a track and all its curves will be selected at once as well. Curves are also colored now:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/colored_curves.png",alt:"colored curves"}})]),e._v(" "),t("p",[e._v("Background curve is also a new thing in the animation editor, it shows every other curve in the selected animation. It shown in pale\ngray color.")]),e._v(" "),t("h2",{attrs:{id:"ui-prefabs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ui-prefabs"}},[e._v("#")]),e._v(" UI Prefabs")]),e._v(" "),t("p",[e._v("UI system now supports prefabs, which allows you to put common UI widgets into a separate UI scene and use it in some other.\nThis mechanism works the same as the one for game scenes. On practice it look like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/ui_prefab.png",alt:"ui prefab"}})]),e._v(" "),t("p",[e._v("Each button here is a prefab (shown in purple-ish color in the world viewer) and the prefab itself looks like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/button_prefab.png",alt:"button prefab"}})]),e._v(" "),t("p",[e._v('When you change such prefabs, its instances on other scenes will take the changes you\'ve made automatically. This allows you\nto build complex user interfaces from simple "blocks".')]),e._v(" "),t("h2",{attrs:{id:"adaptive-scroll-bar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adaptive-scroll-bar"}},[e._v("#")]),e._v(" Adaptive Scroll Bar")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/scroll_bar.gif",alt:"adaptive scroll bar"}})]),e._v(" "),t("p",[e._v("Scroll bar's thumb size is now changes its size accordingly to the content size. Previously it had fixed size, which wasn't\ninformative and in some cases it was quite annoying to use in \"tight\" spaces.")]),e._v(" "),t("h2",{attrs:{id:"world-viewer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#world-viewer"}},[e._v("#")]),e._v(" World Viewer")]),e._v(" "),t("p",[e._v("World Viewer now is able to reorder its items by simple drag'n'drop. This is especially useful in user interfaces, where the\norder of widgets defines draw order. In action it looks like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/reorder.gif",alt:"reorder"}})]),e._v(" "),t("h2",{attrs:{id:"shape-casting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shape-casting"}},[e._v("#")]),e._v(" Shape Casting")]),e._v(" "),t("p",[e._v("Fyrox 0.34 allows to perform shape casting to check whether an arbitrary shape intersects with physical objects or not.\nIt is similar to ray casting, however it could be used to check if there's an obstacle along a given line segment, which could\nbe useful in AI.")]),e._v(" "),t("h2",{attrs:{id:"grid-snapping-quick-access-panel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grid-snapping-quick-access-panel"}},[e._v("#")]),e._v(" Grid Snapping Quick Access Panel")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/grid_snapping.png",alt:"grid snapping"}})]),e._v(" "),t("p",[e._v("Grid snapping exists in the engine for more than 3 years already, but it was hidden in editor settings and overall usability was\nquite bad, simply because to enable it or change settings you'd need to open editor settings, find grid snapping section,\ntweak settings, close the editor settings, try the new settings. Rinse and repeat if you need other settings. In the new version\nall you need to do is to click onto magnet icon on the toolbar, set the required settings and that's pretty much all.")]),e._v(" "),t("h2",{attrs:{id:"rendering-statistics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rendering-statistics"}},[e._v("#")]),e._v(" Rendering Statistics")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/rendering_statistics.png",alt:"rendering statistics"}})]),e._v(" "),t("p",[e._v("The editor now can show rendering statistics in a separate dockable panel, this information could be useful for optimization\nneeds.")]),e._v(" "),t("h2",{attrs:{id:"scene-preview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scene-preview"}},[e._v("#")]),e._v(" Scene Preview")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/wireframe.gif",alt:"wireframe"}})]),e._v(" "),t("p",[e._v("You can switch between shaded and wire frame rendering modes directly from the scene previewer. Wire frame rendering mode could\nbe useful if you want to find something hidden behind walls or large objects.")]),e._v(" "),t("h2",{attrs:{id:"asset-browser-performance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asset-browser-performance"}},[e._v("#")]),e._v(" Asset Browser Performance")]),e._v(" "),t("p",[e._v("For a long time searching in the asset browser was quite slow, turned out that it was "),t("code",[e._v("./target")]),e._v(" folder with build artifacts.\nUsually, it is located in your project's directory and it could contain tens of gigabytes and tens of thousands files. Asset\nbrowser included this folder in searching and that's why it was horribly slow.")]),e._v(" "),t("h2",{attrs:{id:"mesh-control-panel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mesh-control-panel"}},[e._v("#")]),e._v(" Mesh Control Panel")]),e._v(" "),t("p",[e._v("Mesh control panel helps you to perform various actions with meshes. For example you can create trimesh static colliders,\nconvex colliders, add rigid bodies, etc. The panel opens automatically when a mesh node is selected and it looks like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.34/mesh_control_panel.png",alt:"mesh control panel"}})]),e._v(" "),t("h2",{attrs:{id:"reflection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reflection"}},[e._v("#")]),e._v(" Reflection")]),e._v(" "),t("p",[e._v("Reflection system has gotten a small, yet very important feature (mostly for code hot reloading) - an ability to fetch assembly\nname of anything that implements "),t("code",[e._v("Reflect")]),e._v(" trait. This feature is used to scan scene content for plugin entities and unload\nthem.")]),e._v(" "),t("h2",{attrs:{id:"full-list-of-changes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-list-of-changes"}},[e._v("#")]),e._v(" Full List of Changes")]),e._v(" "),t("p",[e._v("The list is split into four sections for ease of reading and finding particular information.")]),e._v(" "),t("h3",{attrs:{id:"added"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#added"}},[e._v("#")]),e._v(" Added")]),e._v(" "),t("ul",[t("li",[e._v("Code hot reloading for plugins.")]),e._v(" "),t("li",[e._v("Ability to have multiple scripts on one scene node.")]),e._v(" "),t("li",[e._v("Static and dynamic batching for meshes.")]),e._v(" "),t("li",[e._v("Project exporter for automated deployment.")]),e._v(" "),t("li",[e._v("Configurable build profiles for the editor.")]),e._v(" "),t("li",[e._v("Ability to have multiple user interface instances.")]),e._v(" "),t("li",[e._v("GLTF support (available via "),t("code",[e._v("gltf")]),e._v(" feature).")]),e._v(" "),t("li",[e._v("Keyboard navigation support in the UI.")]),e._v(" "),t("li",[e._v("Preview generation for assets in the asset browser.")]),e._v(" "),t("li",[e._v("Grid for the scene preview.")]),e._v(" "),t("li",[t("code",[e._v("fyrox-template")]),e._v(" improvements to generate projects, that supports code hot reloading.")]),e._v(" "),t("li",[t("code",[e._v("AnimationPlayer")]),e._v(" + "),t("code",[e._v("AnimationBlendingStateMachine")]),e._v(" widgets.")]),e._v(" "),t("li",[e._v("UI prefabs with ability to instantiate them.")]),e._v(" "),t("li",[t("code",[e._v("Pool::try_get_component_of_type")]),e._v(" + the same for "),t("code",[e._v("MultiBorrowContext")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("NodeTrait::on_unlink")]),e._v(" method.")]),e._v(" "),t("li",[e._v("Implemented "),t("code",[e._v("ComponentProvider")]),e._v(" trait for "),t("code",[e._v("Node")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("MultiBorrowContext::get/get_mut")]),e._v(" methods.")]),e._v(" "),t("li",[e._v("Ability to remove objects from multiborrow context.")]),e._v(" "),t("li",[t("code",[e._v("newtype_reflect")]),e._v(" delegating macro.")]),e._v(" "),t("li",[t("code",[e._v("SceneGraph::change_hierarchy_root")]),e._v(" method.")]),e._v(" "),t("li",[e._v("Ability to change UI scene root.")]),e._v(" "),t("li",[e._v("Property inheritance for UI widgets.")]),e._v(" "),t("li",[e._v("Ability to instantiate UI prefabs by dropping prefab into world viewer/scene previewer.")]),e._v(" "),t("li",[e._v("Ability to open scripts from the editor's inspector.")]),e._v(" "),t("li",[t("code",[e._v("Control::post_draw")]),e._v(" method.")]),e._v(" "),t("li",[e._v("Ability to reorder children of a scene node.")]),e._v(" "),t("li",[t("code",[e._v("SceneGraph::relative_position")]),e._v(" + "),t("code",[e._v("SceneGraphNode::child_position")]),e._v(" methods.")]),e._v(" "),t("li",[e._v("Ability to reorder nodes/widgets in the world viewer.")]),e._v(" "),t("li",[e._v("Added more icons for widgets.")]),e._v(" "),t("li",[e._v("Added support for UI animations in the animation editor.")]),e._v(" "),t("li",[e._v("Configurable UI update switches.")]),e._v(" "),t("li",[e._v("Ability to edit ui absm nodes in the absm editor.")]),e._v(" "),t("li",[t("code",[e._v("AbsmEventProvider")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Ability to enable msaa when initializing graphics context.")]),e._v(" "),t("li",[e._v("Ability to change corner radius in "),t("code",[e._v("Border")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Ability to draw rectangles with rounded corners in UI drawing context.")]),e._v(" "),t("li",[e._v("Added layout rounding for "),t("code",[e._v("fyrox-ui")]),e._v(" which significantly reduced blurring.")]),e._v(" "),t("li",[e._v("Added support for embedded textures in FBX.")]),e._v(" "),t("li",[t("code",[e._v("Selector")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Added project dir and scenes to open as cli args to editor.")]),e._v(" "),t("li",[t("code",[e._v("utils::make_cross_primitive")]),e._v(" helper method.")]),e._v(" "),t("li",[e._v("Ability to draw wire circle in the UI drawing context.")]),e._v(" "),t("li",[e._v("Ability to draw WireCircle primitives in VectorImage widget.")]),e._v(" "),t("li",[e._v("More tests.")]),e._v(" "),t("li",[e._v("Vertex buffer API improvements.")]),e._v(" "),t("li",[e._v("Rendering statistics window for the editor.")]),e._v(" "),t("li",[e._v("Added shape casting in physics.")]),e._v(" "),t("li",[e._v("Ability to unassign textures in material editor.")]),e._v(" "),t("li",[e._v("Allow to set negative playback speed for animations in animation editor.")]),e._v(" "),t("li",[t("code",[e._v("Scene::clone_one_to_one")]),e._v(" shortcut for easier scene cloning.")]),e._v(" "),t("li",[t("code",[e._v("fyrox-dylib")]),e._v(" crate to be able to link the engine dynamically.")]),e._v(" "),t("li",[e._v("Ability to link the engine dynamically to the editor.")]),e._v(" "),t("li",[e._v("Added property editor for untyped textures.")]),e._v(" "),t("li",[e._v("Added "),t("code",[e._v("Plugin::on_loaded")]),e._v(" method.")]),e._v(" "),t("li",[t("code",[e._v("NetListener::local_address")]),e._v(" method.")]),e._v(" "),t("li",[t("code",[e._v("Model::new")]),e._v(" method.")]),e._v(" "),t("li",[e._v("Ability to disable space optimization of "),t("code",[e._v("InheritableVariable")]),e._v(" on serialization.")]),e._v(" "),t("li",[e._v("Added CI for project template for all supported platforms.")]),e._v(" "),t("li",[e._v("Added diagnostics for degenerated triangles when calculating tangents.")]),e._v(" "),t("li",[t("code",[e._v("Pool::first_ref/first_mut")]),e._v(" methods.")]),e._v(" "),t("li",[e._v("Added release keystore for android project templates.")]),e._v(" "),t("li",[e._v("Collect rendering statistics on per-scene basis.")]),e._v(" "),t("li",[t("code",[e._v("transmute_slice")]),e._v(" helper function.")]),e._v(" "),t("li",[e._v("Ability to read GPU texture data.")]),e._v(" "),t("li",[e._v("Experimental histogram-based auto-exposure for HDR (disabled by default).")]),e._v(" "),t("li",[e._v("Short-path angle interpolation mode for "),t("code",[e._v("Curve")]),e._v(" - "),t("code",[e._v("Curve::angle_at")]),e._v(".")]),e._v(" "),t("li",[e._v("Property editor for "),t("code",[e._v("RcUiNodeHandle")]),e._v(" type.")]),e._v(" "),t("li",[e._v("Adaptive scroll bar thumb.")]),e._v(" "),t("li",[e._v("Ability to fetch current task pool from resource manager.")]),e._v(" "),t("li",[e._v("Async icon generation for assets in the asset browser.")]),e._v(" "),t("li",[e._v("Case-insensitive string comparison helper method "),t("code",[e._v("fyrox::core::cmp_strings_case_insensitive")]),e._v(".")]),e._v(" "),t("li",[e._v("Major performance improvement for searching in the asset browser.")]),e._v(" "),t("li",[e._v("Configurable interpolation mode for animations.")]),e._v(" "),t("li",[e._v("Ability to close popups using "),t("code",[e._v("Esc")]),e._v(" key.")]),e._v(" "),t("li",[e._v("Added diagnostics for docking manager layout, that warns if a window has empty name.")]),e._v(" "),t("li",[e._v("Keyboard navigation for tree widget.")]),e._v(" "),t("li",[e._v("Ability to close windows by "),t("code",[e._v("Esc")]),e._v(" key.")]),e._v(" "),t("li",[e._v("Focus opened window automatically.")]),e._v(" "),t("li",[e._v("Keyboard navigation for "),t("code",[e._v("Menu")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Added "),t("code",[e._v("ImmutableString")]),e._v(" editor.")]),e._v(" "),t("li",[e._v("Docs for inspector module.")]),e._v(" "),t("li",[e._v("Ability to deactivate menus using "),t("code",[e._v("Esc")]),e._v(" key.")]),e._v(" "),t("li",[t("code",[e._v("PopupMessage::RelayedMessage")]),e._v(" to re-cast messages from a popup to a widget.")]),e._v(" "),t("li",[t("code",[e._v("NavigationLayer")]),e._v(" widget that handles "),t("code",[e._v("Tab")]),e._v("/"),t("code",[e._v("Shift+Tab")]),e._v(" navigation.")]),e._v(" "),t("li",[e._v("Ability to switch check box state using space key.")]),e._v(" "),t("li",[e._v("Ability to click button widget using "),t("code",[e._v("Space")]),e._v("/"),t("code",[e._v("Enter")]),e._v(" keys.")]),e._v(" "),t("li",[t("code",[e._v("accepts_input")]),e._v(" for widgets that can be used for keyboard interaction.")]),e._v(" "),t("li",[e._v("Added keyboard navigation for input fields in the inspector.")]),e._v(" "),t("li",[e._v("Highlight a widget with keyboard focus.")]),e._v(" "),t("li",[t("code",[e._v("Visitor")]),e._v(" docs.")]),e._v(" "),t("li",[e._v("Ability to open/close drop down list using arrow keys.")]),e._v(" "),t("li",[e._v("Re-cast "),t("code",[e._v("Variant")]),e._v(" message on enum property editor.")]),e._v(" "),t("li",[e._v("Focus popup content (if any) on opening.")]),e._v(" "),t("li",[e._v("Keyboard navigation for list view widget.")]),e._v(" "),t("li",[e._v("Focus window content (if any) on opening.")]),e._v(" "),t("li",[e._v("Optional ability to bring focused item into view in navigation layer.")]),e._v(" "),t("li",[e._v("Hotkey to run the game from the editor (default is "),t("code",[e._v("F5")]),e._v(").")]),e._v(" "),t("li",[e._v("Ability to increase/decrease "),t("code",[e._v("NumericUpDown")]),e._v(" widget value by arrow keys.")]),e._v(" "),t("li",[e._v("Configurable command stack max capacity (prevents the command stack to grow uncontrollably, which could eat a lot of memory if the editor is running for a long time).")]),e._v(" "),t("li",[e._v("Auto-select text on focusing "),t("code",[e._v("TextBox")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Ability to render scene manually.")]),e._v(" "),t("li",[e._v("Ability to set precision for "),t("code",[e._v("VecEditor")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Ability to switch between shaded and wireframe mode in the scene preview.")]),e._v(" "),t("li",[e._v("Multi-curve support for the curve editor widget.")]),e._v(" "),t("li",[t("code",[e._v("Color::COLORS")]),e._v(" array with pre-defined colors.")]),e._v(" "),t("li",[e._v("Ability to set different brushes for every curve in the curve editor.")]),e._v(" "),t("li",[e._v("Apply different colors to curves in the animation editor.")]),e._v(" "),t("li",[e._v("Show multiple curves at once when selecting tracks in the animation editor.")]),e._v(" "),t("li",[e._v("Dropdown menu widget.")]),e._v(" "),t("li",[e._v("Quick-access menu for grid snapping.")]),e._v(" "),t("li",[t("code",[e._v("Create Parent")]),e._v(" context menu option for scene nodes.")]),e._v(" "),t("li",[e._v("Add background curves concept to the curve editor widget.")]),e._v(" "),t("li",[e._v("Smart placement for newly created objects.")]),e._v(" "),t("li",[e._v("Added mesh control panel - allows to create physics entities (colliders, rigid bodies, etc) in a few clicks.")]),e._v(" "),t("li",[t("code",[e._v("Reflect::assembly_name")]),e._v(" to retrieve assembly name of a type.")])]),e._v(" "),t("h3",{attrs:{id:"changed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changed"}},[e._v("#")]),e._v(" Changed")]),e._v(" "),t("ul",[t("li",[e._v("Major style improvements for the editor UI.")]),e._v(" "),t("li",[e._v("Migrated to Rapier 0.18.")]),e._v(" "),t("li",[e._v("Refactored multiborrow context - removed static size constraint and made borrowing tracking dynamic and more efficient.")]),e._v(" "),t("li",[e._v("Use "),t("code",[e._v("Result")]),e._v(" instead of "),t("code",[e._v("Option")]),e._v(" for multiborrowing for better UX.")]),e._v(" "),t("li",[e._v("Added panic on "),t("code",[e._v("Ticket::drop")]),e._v(" to prevent dangling pool records.")]),e._v(" "),t("li",[e._v("Moved generic graph handling code into "),t("code",[e._v("fyrox-graph")]),e._v(" crate.")]),e._v(" "),t("li",[e._v("Do not call "),t("code",[e._v("Control::update")]),e._v(" for every widget:\n"),t("ul",[t("li",[e._v("in the editor on complex scenes it improves average performance by 13-20%.")]),e._v(" "),t("li",[e._v("you have to set "),t("code",[e._v("need_update")]),e._v(" flag when building the widget if you need "),t("code",[e._v("Control::update")]),e._v(" to be called.")])])]),e._v(" "),t("li",[e._v("Mutable access to UI in "),t("code",[e._v("Control::update")]),e._v(".")]),e._v(" "),t("li",[e._v("Refactored "),t("code",[e._v("Selection")]),e._v(" to use dynamic dispatch.")]),e._v(" "),t("li",[e._v("Refactored the entire editor command system to use dynamic dispatch.")]),e._v(" "),t("li",[e._v("Split "),t("code",[e._v("SceneGraph")]),e._v(" trait into object-safe and object-non-safe parts.")]),e._v(" "),t("li",[e._v("Run most of "),t("code",[e._v("Engine::pre_update")]),e._v(" logic even if there's no graphics context.")]),e._v(" "),t("li",[e._v("Moved color space transformation to vertex shader of particle system to increase performance.")]),e._v(" "),t("li",[e._v("Recalculate world space bounding box of a mesh on "),t("code",[e._v("sync_transform")]),e._v(" instead of "),t("code",[e._v("update")]),e._v(".")]),e._v(" "),t("li",[e._v("Refactored rectpacker to use plain "),t("code",[e._v("Vec")]),e._v(" instead of "),t("code",[e._v("Pool")]),e._v(".")]),e._v(" "),t("li",[e._v("Moved rectangle-related code to "),t("code",[e._v("rectutils")]),e._v(" crate.")]),e._v(" "),t("li",[e._v("Automatically unregister faulty resources if registering ok one.")]),e._v(" "),t("li",[e._v("Prevent uvgen to modifying the actual surface data.")]),e._v(" "),t("li",[e._v("Extracted uvgen module to "),t("code",[e._v("uvgen")]),e._v(" crate.")]),e._v(" "),t("li",[e._v("Use simple vec instead of pool in octree.")]),e._v(" "),t("li",[e._v("Moved "),t("code",[e._v("math")]),e._v(" + "),t("code",[e._v("curve")]),e._v(" + "),t("code",[e._v("octree")]),e._v(" mods to "),t("code",[e._v("fyrox-math")]),e._v(" crate.")]),e._v(" "),t("li",[e._v("Moved lightmapper into a "),t("code",[e._v("lightmap")]),e._v(" crate.")]),e._v(" "),t("li",[e._v("Support for backwards movement (negative speed) for navmesh agent.")]),e._v(" "),t("li",[e._v("Moved the engine implementation into "),t("code",[e._v("fyrox-impl")]),e._v(" crate, "),t("code",[e._v("fyrox")]),e._v(" crate now is a proxy to it.")]),e._v(" "),t("li",[e._v("Moved interaction modes panel to the toolbar.")]),e._v(" "),t("li",[e._v("Made shader methods public to be able to create them manually.")]),e._v(" "),t("li",[e._v("Show unassigned handles in orange color to attract attention.")]),e._v(" "),t("li",[e._v("Major refactoring of "),t("code",[e._v("TextBox")]),e._v(" widget that makes it much more pleasant to work with.")]),e._v(" "),t("li",[e._v("Major usability improvements for "),t("code",[e._v("DockingManager")]),e._v(" tiles.")]),e._v(" "),t("li",[t("code",[e._v("Window")]),e._v(" widget content is now linked to "),t("code",[e._v("NavigationLayer")]),e._v(" widget instance.")]),e._v(" "),t("li",[e._v("Prevented "),t("code",[e._v("TextBox")]),e._v(" and "),t("code",[e._v("NumericUpDown")]),e._v(" widgets from sending change messages when they have not changed.")]),e._v(" "),t("li",[e._v("Reduced width and precision for worldspace position of current selection.")]),e._v(" "),t("li",[e._v("Use "),t("code",[e._v("ImmutableString")]),e._v(" for scene nodes and widgets to reduce memory consumption on duplicated strings.")]),e._v(" "),t("li",[e._v("Do not flush the renderer when changing scenes, to prevent various graphical issues.")]),e._v(" "),t("li",[e._v("More informative names for curves in the animation editor.")]),e._v(" "),t("li",[e._v("Change cursor icon when picking/dragging keys in curve editor.")]),e._v(" "),t("li",[e._v("Major refactoring of coordinate system in the curve editor.")]),e._v(" "),t("li",[e._v("Keep the animation player selected in the animation editor.")]),e._v(" "),t("li",[e._v("Changed AABB validity to include zero-size dimensions to allow camera fitting to work with flat objects.")]),e._v(" "),t("li",[e._v("Prefer prefab roots when selecting nodes in scene.")]),e._v(" "),t("li",[t("code",[e._v("Reflect")]),e._v(" trait bound for "),t("code",[e._v("Plugin")]),e._v(" trait.")])]),e._v(" "),t("h3",{attrs:{id:"fixed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fixed"}},[e._v("#")]),e._v(" Fixed")]),e._v(" "),t("ul",[t("li",[e._v("Fixed cascade shadow maps (CSM) rendering.")]),e._v(" "),t("li",[e._v("Fixed crash when setting particle spawn rate too high.")]),e._v(" "),t("li",[e._v("Fixed UB when using MultiBorrowContext.")]),e._v(" "),t("li",[e._v("Fixed visibility of cloned widget.")]),e._v(" "),t("li",[e._v("Set unique id for widget copies.")]),e._v(" "),t("li",[e._v("Fixed crash when closing scenes.")]),e._v(" "),t("li",[e._v("Fixed "),t("code",[e._v("Default")]),e._v(" impl for "),t("code",[e._v("Pool")]),e._v(".")]),e._v(" "),t("li",[e._v("Fixed rare crash in "),t("code",[e._v("TextBox")]),e._v(" widget when typing in something")]),e._v(" "),t("li",[e._v("Fixing double pixel loop (it was looping over y twice) in terrain internals.")]),e._v(" "),t("li",[e._v("Fixed creating a MenuItem in editor.")]),e._v(" "),t("li",[e._v("Force ui widget to recalculate layout if it was animated")]),e._v(" "),t("li",[e._v("Registered property editors for all UI properties.")]),e._v(" "),t("li",[e._v("Fixed incorrect FBX cluster loading (fixes incorrect rendering of FBX models)")]),e._v(" "),t("li",[e._v("Fixed crash when selection range is incorrect in the "),t("code",[e._v("TextBox")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Fixed crash in the animation editor when trying to rebind a track referencing deleted scene node.")]),e._v(" "),t("li",[e._v("Properly expand tree items when building path in file browser widget.")]),e._v(" "),t("li",[e._v("Fixed doubling of items under disks in file browser widget.")]),e._v(" "),t("li",[e._v("Fixed track deletion in the animation editor.")]),e._v(" "),t("li",[e._v("Fixed file browser behaviour on empty file path")]),e._v(" "),t("li",[e._v("Select current dir in the asset browser.")]),e._v(" "),t("li",[e._v("Automatically remove disconnected listeners from the log.")]),e._v(" "),t("li",[e._v("Fixed support of custom layout panel of "),t("code",[e._v("ListView")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Fixed async tasks at WebAssembly target.")]),e._v(" "),t("li",[e._v("Fixed property inheritance for types with interior mutability.")]),e._v(" "),t("li",[e._v("Keep selected brush when hovering mouse over a "),t("code",[e._v("Decorator")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Fixed "),t("code",[e._v("TabControl")]),e._v(" widget headers style.")]),e._v(" "),t("li",[e._v("Improved SearchBar widget style.")]),e._v(" "),t("li",[e._v("Fixed incorrect script task handling (it was passing task result to all scripts, instead the one that launched the task).")]),e._v(" "),t("li",[e._v("Prevent particle systems from over-spawn particles when spawn rates are high.")]),e._v(" "),t("li",[e._v("Fixed incorrect vertex buffer data layout.")]),e._v(" "),t("li",[e._v("Fixed crash if a selected node was deleted during asset hot reloading.")]),e._v(" "),t("li",[e._v("Prevent moving a folder into its own subfolder in the asset browser.")]),e._v(" "),t("li",[e._v("Fixed lightmap saving when corresponding lightmap textures were deleted.")]),e._v(" "),t("li",[e._v("Sort rectangles back-to-front when rendering to prevent blending issues.")]),e._v(" "),t("li",[e._v("Back-to-front sorting when rendering nodes with transparency.")]),e._v(" "),t("li",[e._v("Fixed seams on skybox cubemap.")]),e._v(" "),t("li",[e._v("Hide "),t("code",[e._v("should_be_deleted")]),e._v(" field.")]),e._v(" "),t("li",[e._v("Do not update scripts on disabled nodes.")]),e._v(" "),t("li",[e._v("Fixed sound context serialization (this bug caused all sound buses to disappear on load)")]),e._v(" "),t("li",[e._v("Fixed potential crash in audio bus editor.")]),e._v(" "),t("li",[e._v("Fixed crash when closing the editor.")]),e._v(" "),t("li",[e._v("Fixed crash "),t("code",[e._v("attempt to subtract with overflow")]),e._v(" in particle systems.")]),e._v(" "),t("li",[e._v("Fixed incorrect "),t("code",[e._v("Selection::is_empty")]),e._v(" implementation.")]),e._v(" "),t("li",[e._v("Fixed canvas background color leaking to the rendered image on WebAssembly.")]),e._v(" "),t("li",[e._v("Ignore "),t("code",[e._v("target")]),e._v(" dir when doing search in the asset browser.")]),e._v(" "),t("li",[e._v("Fixed accidental enabling/disabling tracks when expanding them in the animation editor.")]),e._v(" "),t("li",[e._v("Fixed editor layout saving and loading.")]),e._v(" "),t("li",[e._v("Prevent "),t("code",[e._v("Inspector")]),e._v(" properties from disappearing when expander is closed.")]),e._v(" "),t("li",[e._v("Use context menus instead of plain popups in color gradient editor.")]),e._v(" "),t("li",[e._v("Fixed incorrect extension proposal for in the resource creator.")]),e._v(" "),t("li",[e._v("Fixed incorrect resource creation in resource creator.")]),e._v(" "),t("li",[e._v("Fixed sluggish tiles resizing in the docking manager.")]),e._v(" "),t("li",[e._v("Keep the order of interaction modes the same.")]),e._v(" "),t("li",[e._v("Fixed bring-into-view for "),t("code",[e._v("ScrollPanel")]),e._v(" widget - not it does not jump unpredictable.")]),e._v(" "),t("li",[e._v("Do not pass keyboard input to invisible widgets.")]),e._v(" "),t("li",[e._v("Handle edge cases properly when calculating curve bounds.")]),e._v(" "),t("li",[e._v('Fixed "zoom to fit" functionality in the curve editor widget.')]),e._v(" "),t("li",[e._v("Fixed sliding of the view in the curve editor widget on resizing.")]),e._v(" "),t("li",[e._v("Fixed frustum culling flag usage.")]),e._v(" "),t("li",[e._v("Fixed inspector syncing/context changing.")]),e._v(" "),t("li",[e._v("Fixed crash when trying to get selected entity from empty selection.")]),e._v(" "),t("li",[e._v("Fixed crash when closing scenes using "),t("code",[e._v("X")]),e._v(" button on the tabs.")])]),e._v(" "),t("h3",{attrs:{id:"removed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#removed"}},[e._v("#")]),e._v(" Removed")]),e._v(" "),t("ul",[t("li",[e._v("Removed "),t("code",[e._v("define_command_stack")]),e._v(" macro")]),e._v(" "),t("li",[e._v("Removed redundant "),t("code",[e._v("old_selection")]),e._v(" arg from change selection command")])]),e._v(" "),t("h2",{attrs:{id:"support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#support"}},[e._v("#")]),e._v(" Support")]),e._v(" "),t("p",[e._v("If you want to support the development of the project, click "),t("a",{attrs:{href:"https://fyrox.rs/sponsor.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("this link"),t("OutboundLink")],1),e._v(". Also, you can help by\nfixing one of the "),t("a",{attrs:{href:"https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22",target:"_blank",rel:"noopener noreferrer"}},[e._v('"good first issues" '),t("OutboundLink")],1),e._v(",\nadding a desired feature to the engine, or making a contribution to the "),t("a",{attrs:{href:"https://github.com/fyrox-book",target:"_blank",rel:"noopener noreferrer"}},[e._v("book"),t("OutboundLink")],1)])],1)}),[],!1,null,null,null);t.default=a.exports}}]);