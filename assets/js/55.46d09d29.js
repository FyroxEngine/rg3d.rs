(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{411:function(e,t,i){"use strict";i.r(t);var o=i(26),s=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("I'm happy to announce that Fyrox 0.28 has been released! Fyrox is a modern game engine written in Rust, it helps\nyou to create 2D and 3D games with low effort using native editor. This release continues a series of improvements\nand fixes to make game development more convenient.")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.28/editor.png",alt:"Editor"}})]),e._v(" "),t("h2",{attrs:{id:"improved-scripts-pipeline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#improved-scripts-pipeline"}},[e._v("#")]),e._v(" Improved Scripts Pipeline")]),e._v(" "),t("p",[e._v("Scripts is the major part of the engine, it is keeps getting improvements and fixes. Fyrox 0.28 has lots of\nsignificant changes starting from scripts API and ending by support for saved games.")]),e._v(" "),t("h3",{attrs:{id:"api-changes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api-changes"}},[e._v("#")]),e._v(" API Changes")]),e._v(" "),t("p",[e._v("Some methods of the "),t("code",[e._v("ScriptTrait")]),e._v(" were removed and some added. "),t("code",[e._v("on_remap_handles")]),e._v(" was removed because node handle\nmapping is fully automatic (see "),t("a",{attrs:{href:"#automatic-handle-mapping"}},[e._v("Automatic Handle Mapping")]),e._v(" section for more info).\n"),t("code",[e._v("on_start")]),e._v(" method was added to execute some logic after every script instance is already initialized.")]),e._v(" "),t("p",[e._v("Every script method is now accepts "),t("code",[e._v("ScriptContext")]),e._v(" parameter by mutable reference due to performance reasons.\nPreviously, it was passed by value and it was more or less ok, but it grew in size and it became inefficient.")]),e._v(" "),t("p",[t("code",[e._v("ScriptContext")]),e._v(" now also have "),t("code",[e._v("elapsed_time")]),e._v(" field which contains the time that passed since start of your game\nin seconds. This field could be useful for some procedural animations.")]),e._v(" "),t("h3",{attrs:{id:"strict-order-of-execution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strict-order-of-execution"}},[e._v("#")]),e._v(" Strict Order of Execution")]),e._v(" "),t("p",[e._v("Script processing was rewritten entirely to guarantee execution order of script methods. Now execution order is\nthe following:")]),e._v(" "),t("ol",[t("li",[e._v("Call "),t("code",[e._v("on_init")]),e._v(" for every script.")]),e._v(" "),t("li",[e._v("If there is any new script added go to 1.")]),e._v(" "),t("li",[e._v("Call "),t("code",[e._v("on_start")]),e._v(" for every script.")]),e._v(" "),t("li",[e._v("If there is any new script added go to 1.")]),e._v(" "),t("li",[e._v("Call "),t("code",[e._v("on_update")]),e._v(" for every script.")]),e._v(" "),t("li",[e._v("If there is any new script added go to 1.")]),e._v(" "),t("li",[e._v("Destroy all script instances marked for deletion ("),t("code",[e._v("on_deinit")]),e._v(").")])]),e._v(" "),t("p",[e._v("It looks quite convoluted, let's try to understand why. At first, every script method is able to spawn other objects\nto a scene (instantiate a prefab or create objects procedurally), this complicates update loop significantly.\nIf a new object was added in any of "),t("code",[e._v("on_init")]),e._v(", we must do another iteration of initialization, because we can't\ncall "),t("code",[e._v("on_start")]),e._v(" - it must be called only when every script is initialized. "),t("code",[e._v("on_start")]),e._v(" in its turn can also spawn\nsomething and we can't simply go to "),t("code",[e._v("on_update")]),e._v(", because new instances are not initialized yet! Once everything is\ninitialized and started, we can do "),t("code",[e._v("on_update")]),e._v(" - and again it can spawn something... That's why we need multi-pass\ninit/start/update loops. This is the only way to ensure that everything will be updated on current frame and there\nwon't be 1-frame lag. Every inner loop is \"fused\" - it is protected from infinite loops, that might be caused by incorrect\nscripts. A script could spawn an object, that in its turn spawn another object, and so on.")]),e._v(" "),t("p",[e._v("The last step is destruction of script instances. It is deferred to the end of the frame mostly due to inability to\nprovide wide context at the point of destruction request. What does that mean? When you delete a node or its script,\n"),t("code",[e._v("ScriptTrait::on_deinit")]),e._v(" should be called, by its definition it requires access to plugins attached to the engine, current scene,\netc. It is very problematic to provide such info at every call site, so it just deleted at the end of the frame.")]),e._v(" "),t("h3",{attrs:{id:"support-for-saved-games"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#support-for-saved-games"}},[e._v("#")]),e._v(" Support for Saved Games")]),e._v(" "),t("p",[e._v("Scripts now fully support standard approach for saved games. Standard approach is to just save current scene to file\nand load it when there's a need to load saved game. Previously it was quite problematic, because scripts didn't track\ntheir start (whether they initialized or not) and call "),t("code",[e._v("on_init")]),e._v(" method after a saved game was loaded. Now it is fixed,\nand "),t("code",[e._v("on_init")]),e._v(" is ignored for initialized script instances. "),t("code",[e._v("on_start")]),e._v(" method is still called leaving an opportunity to\ndo some actions after a saved game was loaded.")]),e._v(" "),t("h3",{attrs:{id:"scene-nodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scene-nodes"}},[e._v("#")]),e._v(" Scene Nodes")]),e._v(" "),t("p",[e._v("Scene nodes now have new helper methods - "),t("code",[e._v("Base::has_script")]),e._v(", "),t("code",[e._v("Base::try_get_script")]),e._v(", "),t("code",[e._v("Base::try_get_script_mut")]),e._v(" that\nmakes fetching scripts on a scene node less tedious.")]),e._v(" "),t("h2",{attrs:{id:"user-interface"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user-interface"}},[e._v("#")]),e._v(" User Interface")]),e._v(" "),t("p",[e._v("Fyrox uses its own UI system, that provides strong foundation for the editor and every game made with the engine. This\nrelease contains lots of small improvements that makes life easier.")]),e._v(" "),t("h3",{attrs:{id:"textbox-widget-improvements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#textbox-widget-improvements"}},[e._v("#")]),e._v(" TextBox Widget Improvements")]),e._v(" "),t("p",[e._v("TextBox widget is improved in many ways. Now it supports text scrolling, it is possible to select text word-by-word\nusing "),t("code",[e._v("Ctrl+Shift+Arrow")]),e._v(" shortcut, it is possible to skip words by "),t("code",[e._v("Ctrl+Arrow")]),e._v(" shortcut. Double click on a word (or\nwhitespace span) selects it. In other words, text box widget now is closer to standard implementations of such widget.")]),e._v(" "),t("p",[e._v("There's also support for optional visual effect - shadows. It can be used to make text readable in any conditions.\nFor example, white text with black shadow will still be readable even in bright scenes. It is very useful to create\nsubtitles.")]),e._v(" "),t("h2",{attrs:{id:"misc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#misc"}},[e._v("#")]),e._v(" Misc")]),e._v(" "),t("p",[e._v("It is now possible to expand or collapse trees by double-click. Previously you had to click on small arrow and this\nwas quite annoying when you have to traverse large trees.")]),e._v(" "),t("p",[e._v("Node handles property editor now shows node names as well as their handles. Invalid node handles are now highlighted\nin the Inspector:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.28/node_handle_editor.png",alt:"Node Handle Editor"}})]),e._v(" "),t("h2",{attrs:{id:"asset-preview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asset-preview"}},[e._v("#")]),e._v(" Asset Preview")]),e._v(" "),t("p",[e._v("Previous versions of the engine allowed you to instantiate a prefab by drag'n'drop it from Asset Browser to a scene,\nbut every instance was placed at "),t("code",[e._v("(0, 0, 0)")]),e._v(" and there was no preview for an instance being created. Now it is fixed and\nit significantly improves workflow in the editor - you can see where your object will be created. Here's a small gif\nthat shows how it works:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.28/preview.gif",alt:"Prefab Preview"}})]),e._v(" "),t("h2",{attrs:{id:"property-inheritance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#property-inheritance"}},[e._v("#")]),e._v(" Property Inheritance")]),e._v(" "),t("p",[e._v("At first let's understand what is property inheritance. Property inheritance is used to propagate changes of unmodified\nproperties from a prefab to its instances. For example, you can change scale of a node in a prefab and its instances will\nhave the same scale too, unless the scale is set explicitly in an instance. Such feature allows you to tweak instances,\nadd some unique details to them, but take generic properties from parent prefabs.")]),e._v(" "),t("p",[e._v("Property inheritance works for prefab hierarchies of any depth, this means that you can create something like this: a room\nprefab can have multiple instances of various furniture prefabs in it, while the furniture prefabs can also be constructed\nfrom other prefabs and so on. In this case if you modify a property in one of the prefabs in the chain, all instance will\nimmediately sync their unmodified properties.")]),e._v(" "),t("p",[e._v("This mechanism was available in previous versions, but it was based on manual handling of "),t("code",[e._v("InheritableVariable<T>")]),e._v(" fields.\nFyrox 0.28 changes this - now it is fully automatic, all you need to do is to wrap a field of your script in\n"),t("code",[e._v("InheritableVariable<T>")]),e._v(" wrapper and the engine do inheritance automatically based on the state of.")]),e._v(" "),t("h2",{attrs:{id:"automatic-handle-mapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#automatic-handle-mapping"}},[e._v("#")]),e._v(" Automatic Handle Mapping")]),e._v(" "),t("p",[e._v("The next thing that was improved is node handle mapping. What is this anyway? When you save a handle to some node in your\nscript it must be mapped to respective copy when you cloning the node with the script. If you don't do this, the handle\nwill point to initial object, from what the copy was made. In most cases this is undesired effect and mapping should be\ndone.")]),e._v(" "),t("p",[e._v("As an example why node mapping is important let's imagine that you have a door script that is applied to some sci-fi door.\nThe script controls door movement as well as behavior of lights on the door. To control lights, the script must know their\nhandles. Now what will happen with handles if you clone a door with the script? If there wouldn't be handle mapping, handles\nof light sources would be copied as is and multiple door instances would control few light sources of initial door. But we\nneed each door to control its own set of lights, that's when node handle mapping comes into play. When your copy an object,\nthe engine maps handles stored in cloned objects to their respective copies.")]),e._v(" "),t("p",[e._v("As with property inheritance, this mechanism was available in previous versions of the engine. You might remember\n"),t("code",[e._v("ScriptTrait::remap_handles")]),e._v(" method, it forced you to do tedious manual work for every handle. Such manual work was a constant\nsource of bugs, and it is now replaced with fully automatic solution based on reflection.")]),e._v(" "),t("h2",{attrs:{id:"sprite-sheet-animation-for-2d"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sprite-sheet-animation-for-2d"}},[e._v("#")]),e._v(" Sprite Sheet Animation for 2D")]),e._v(" "),t("p",[e._v("Sprite sheet animation is a simple technique that allows you to keep frames of an animation in a single source (file in most\ncases). Instead of having a texture per each frame, you have a single texture and to perform actual animation you\njust change texture coordinates on a sprite. This is much more effective approach in terms of performance. Typical sprite sheet\ncould look like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.28/sprite-sheet.png",alt:"Sprite Sheet"}})]),e._v(" "),t("p",[e._v("This functionality was requested dozens of times already and now it is available. However, there is no dedicated sprite sheet\neditor, so it is a bit tedious to fill frames for sprite sheet animations in the editor. For now you need to calculate\noffsets manually for each frame. This will be improved in next version of the engine.")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.28/edit-sprite-sheet.png",alt:"Editing Sprite Sheet"}})]),e._v(" "),t("p",[e._v('It is also possible to attach signals to specific frames in an animation. This functionality could be useful if you want to\n"attach" some action(s) to specific key frame. For example, you may have a '),t("code",[e._v("walk")]),e._v(" animation and want to emit sound on every\nkey frame where feet touch ground. In this case you just need to add a signal to these frames and then process events from\nthe animation to emit sounds.")]),e._v(" "),t("h2",{attrs:{id:"multi-borrow-context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multi-borrow-context"}},[e._v("#")]),e._v(" Multi-Borrow Context")]),e._v(" "),t("p",[e._v("From the very beginning, the engine didn't let you to borrow multiple objects from a pool simultaneously. Now it is fixed by\nadding a special fixed-sized multi-borrow context. It is a fixed sized storage for borrowed handles, that enforces borrowing\nrules at runtime. It is now possible to borrow multiple mutable references to unique objects at the same time. The same is\napplied to "),t("code",[e._v("Graph")]),e._v(", it now has "),t("code",[e._v("Graph::begin_multi_borrow")]),e._v(" method.")]),e._v(" "),t("h2",{attrs:{id:"editor-improvements-and-fixes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#editor-improvements-and-fixes"}},[e._v("#")]),e._v(" Editor Improvements and Fixes")]),e._v(" "),t("p",[e._v("The editor is a major part of the tool set and it has quite a lot of improvements itself.")]),e._v(" "),t("h3",{attrs:{id:"update-loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#update-loop"}},[e._v("#")]),e._v(" Update Loop")]),e._v(" "),t("p",[e._v('The editor is a "game" that is built using the engine, so it has its own update loop for inner events. Previously, the update\nloop implementation suffered from 1-frame delay that resulted in annoying "flashing" of the UI. The new update loop implementation\nfixes these issues, by introducing multi-pass update loop to ensure that everything will be updated correctly on a current frame.')]),e._v(" "),t("h3",{attrs:{id:"world-viewer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#world-viewer"}},[e._v("#")]),e._v(" World Viewer")]),e._v(" "),t("p",[e._v("Search functionality in the World Viewer is now case-insensitive, which makes filtering much more user-friendly.")]),e._v(" "),t("p",[e._v("It is now possible to change type of existing scene node. This functionality is very useful if you want to change type of\nthe root node of your scene. By default, its type is "),t("code",[e._v("Pivot")]),e._v(", but in some cases you may want to make it "),t("code",[e._v("Rigid Body")]),e._v(". This\ncould be useful if you're making some character prefab and want the root node to be root node of the instance. To use\nthis functionality, just right-click on a node in the World Viewer and select "),t("code",[e._v("Replace With")]),e._v(":")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/0.28/replace.png",alt:"Replace Node"}})]),e._v(" "),t("h3",{attrs:{id:"recent-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recent-files"}},[e._v("#")]),e._v(" Recent Files")]),e._v(" "),t("p",[e._v("Fyrox 0.28 adds a list of recent scenes to "),t("code",[e._v("File")]),e._v(" menu in the editor. It makes switching between scenes much easier. Future\nversions of the engine will also add support for editing of multiple scenes at once without a need to switch between them.")]),e._v(" "),t("h3",{attrs:{id:"settings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#settings"}},[e._v("#")]),e._v(" Settings")]),e._v(" "),t("p",[e._v("The editor now saves position and orientation of preview camera in settings - this is very handy when you switching between\nscenes and the camera restores its position when a new scene is loaded.")]),e._v(" "),t("p",[t("code",[e._v("Track Selection")]),e._v(" option is now saved in the settings file too, this option is used to keep selected node in view in the World\nviewer.")]),e._v(" "),t("h3",{attrs:{id:"misc-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#misc-2"}},[e._v("#")]),e._v(" Misc")]),e._v(" "),t("p",[e._v("Interaction modes (the left tool bar in the Scene Preview window) are now correctly highlighted. Previously it was quite hard\nto tell which mode is currently active. Navmesh and terrain edit modes now have their own hotkeys ("),t("code",[e._v("[5]")]),e._v(" and "),t("code",[e._v("[6]")]),e._v(" respectively).")]),e._v(" "),t("p",[e._v("In 0.27.1 there was an issue with inability to assign scripts for nodes in some cases, this is now fixed. A script that have\nany resource field ("),t("code",[e._v("Model")]),e._v(", "),t("code",[e._v("Texture")]),e._v(", etc.) could crash the editor in previous version, this is now fixed too.")]),e._v(" "),t("h2",{attrs:{id:"book"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#book"}},[e._v("#")]),e._v(" Book")]),e._v(" "),t("p",[e._v("The "),t("a",{attrs:{href:"https://fyrox-book.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("book"),t("OutboundLink")],1),e._v(" has some improvements too - it was restructured, added info about property inheritance\nterrains, particle systems, etc. Tutorials were updated to use latest engine version.")]),e._v(" "),t("h2",{attrs:{id:"side-projects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#side-projects"}},[e._v("#")]),e._v(" Side Projects")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/mrDIMAS/StationIapetus",target:"_blank",rel:"noopener noreferrer"}},[e._v("Station Iapetus"),t("OutboundLink")],1),e._v(" is sci-fi shooter that is built using the engine. Recently it was\nfully migrated to scripting system. While it is still in very early development stage, it could be a good example of how to use\nthe engine in a large project.")]),e._v(" "),t("h2",{attrs:{id:"full-list-of-changes-in-random-order"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-list-of-changes-in-random-order"}},[e._v("#")]),e._v(" Full List of Changes in Random Order")]),e._v(" "),t("ul",[t("li",[e._v("Preview for prefab instantiation.")]),e._v(" "),t("li",[e._v("Drag preview nodes are now input-transparent.")]),e._v(" "),t("li",[e._v("Expand/collapse trees by double click.")]),e._v(" "),t("li",[e._v("Fixed move/rotate/scale gizmo behaviour for mouse events.")]),e._v(" "),t("li",[e._v("Fixed fallback to defaults when editor's config is corrupted.")]),e._v(" "),t("li",[e._v("Save "),t("code",[e._v("Track Selection")]),e._v(" option in the editor's config.")]),e._v(" "),t("li",[e._v("Clear breadcrumbs when changing scene in the editor.")]),e._v(" "),t("li",[e._v("Fixed 1-frame delay issues in the editor.")]),e._v(" "),t("li",[e._v("Emit MouseUp message before Drop message.")]),e._v(" "),t("li",[e._v('Fixed UI "flashing" in the editor in some cases.')]),e._v(" "),t("li",[e._v("Do not silently discard UI messages from nodes that were already be deleted.")]),e._v(" "),t("li",[e._v("Show node handle in breadcrumbs in the editor.")]),e._v(" "),t("li",[e._v("Provide direct read-only access to current dragging context in UI.")]),e._v(" "),t("li",[e._v("Fixed crash when trying to select a node by invalid handle in the editor.")]),e._v(" "),t("li",[e._v("Highlight invalid handles in the Inspector.")]),e._v(" "),t("li",[e._v('Discard "leftover" debug geometry when undoing actions in the editor.')]),e._v(" "),t("li",[e._v("Some menus in the editor now more intuitive now.")]),e._v(" "),t("li",[e._v("Fixed critical bug with incorrect unpack alignment for RGB textures - this causes hard crash in some\ncases.")]),e._v(" "),t("li",[e._v("Do not try to reload a resource if it is already loading.")]),e._v(" "),t("li",[e._v("Ability to set desired frame rate for "),t("code",[e._v("Executor")]),e._v(" (default is 60 FPS).")]),e._v(" "),t("li",[e._v("Ability to paste editor's clipboard content to selected node (paste-as-child functionality).")]),e._v(" "),t("li",[e._v("Ability to render into transparent window while keeping the transparency of untouched pixels (see\n"),t("code",[e._v("transparent")]),e._v(" example).")]),e._v(" "),t("li",[e._v("Ability to specify custom window builder in "),t("code",[e._v("Executor")]),e._v(" + a way to disable vsync in "),t("code",[e._v("Executor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("MultiBorrowContext")]),e._v(" for "),t("code",[e._v("Pool")]),e._v(" and "),t("code",[e._v("Graph::begin_multi_borrow")]),e._v(", helps you to borrow multiple mutable\nreferences to different items.")]),e._v(" "),t("li",[e._v("Speed up code generation in proc-macros.")]),e._v(" "),t("li",[e._v("Correctly map handles in instances after property inheritance (fixed weird bugs when handles to nodes\nin your scripts mapped to incorrect ones)")]),e._v(" "),t("li",[e._v("Refactored script processing:\n"),t("ul",[t("li",[e._v("Added "),t("code",[e._v("ScriptTrait::on_start")]),e._v(" - it is guaranteed to be called after all scripts in scene are initialized, useful\nwhen a script depends on some other script")]),e._v(" "),t("li",[e._v("Script processing is now centralized, not scattered as before.")]),e._v(" "),t("li",[e._v("More deterministic update path ("),t("code",[e._v("on_init")]),e._v(" -> "),t("code",[e._v("on_start")]),e._v(" -> "),t("code",[e._v("on_update")]),e._v(" -> "),t("code",[e._v("on_destroy")]),e._v(")")])])]),e._v(" "),t("li",[e._v("Fixed crash when modifying text in a text box via message and then trying to type something.")]),e._v(" "),t("li",[t("code",[e._v("ButtonBuilder::with_text_and_font")])]),e._v(" "),t("li",[e._v("Show node names in for fields of "),t("code",[e._v("Handle<Node>")]),e._v(" fields of structs in the editor.")]),e._v(" "),t("li",[e._v("Fixed crash in the editor when a script has resource field.")]),e._v(" "),t("li",[e._v("Ability to clone behaviour trees.")]),e._v(" "),t("li",[e._v("Automatic node handle mapping via reflection.")]),e._v(" "),t("li",[e._v("Removed "),t("code",[e._v("ScriptTrait::remap_handles")]),e._v(" method.")]),e._v(" "),t("li",[e._v("Pass elapsed time to scripts.")]),e._v(" "),t("li",[e._v("Do not call "),t("code",[e._v("ScriptTrait::on_os_event")]),e._v(" if scene is disabled.")]),e._v(" "),t("li",[e._v("Make world viewer filtering case-insensitive.")]),e._v(" "),t("li",[e._v("Correctly set self handle and sender for graph's root node.")]),e._v(" "),t("li",[t("code",[e._v("#[inline]")]),e._v(' attributes for "hot" methods.')]),e._v(" "),t("li",[e._v("Fixed panic when rigid body is a root node of a scene.")]),e._v(" "),t("li",[t("code",[e._v("Base::has_script")]),e._v(" + "),t("code",[e._v("Base::try_get_script")]),e._v(" + "),t("code",[e._v("Base::try_get_script_mut")]),e._v(" helper methods, it is now easier\nto fetch scripts on scene nodes.")]),e._v(" "),t("li",[e._v("Ability to change selected node type in the editor (useful to change scene root type).")]),e._v(" "),t("li",[e._v("Optimized script trait parameter passing, script context now passed by reference instead of value.")]),e._v(" "),t("li",[e._v("Script context now have access to all plugins, which makes possible create cross plugin interaction.")]),e._v(" "),t("li",[e._v("Removed requirement of scripts api to provide parent plugin's uuid.")]),e._v(" "),t("li",[e._v("There is no more need to define uuid for plugins.")]),e._v(" "),t("li",[e._v("Do not update scene scripts if it is disabled.")]),e._v(" "),t("li",[t("code",[e._v("Graph::find_first_by_script")]),e._v(" - helps you find a node by its script type.")]),e._v(" "),t("li",[e._v("Added missing property editors for "),t("code",[e._v("Inspector")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Save editor's scene camera settings (position, orientation, zoom, etc.) per scene.")]),e._v(" "),t("li",[e._v("Skip-chars list to be able to treat some chars like white space.")]),e._v(" "),t("li",[e._v("Optional text shadow effect.")]),e._v(" "),t("li",[e._v("Ctrl+Shift+Arrow to select text word-by-word in text box widget.")]),e._v(" "),t("li",[e._v("Added navmesh settings to editor's settings panel.")]),e._v(" "),t("li",[e._v("Make text box widget to accept text messages + special messages for text box widget.")]),e._v(" "),t("li",[e._v("Set 500 ms double click interval (previously it was 750 ms).")]),e._v(" "),t("li",[e._v("Fixed text selection in case of custom ui scaling.")]),e._v(" "),t("li",[e._v("Fixed "),t("code",[e._v("TextBox::screen_pos_to_text_pos")]),e._v(" - incorrect usage of "),t("code",[e._v("char_code")]),e._v(" as index was leading to incorrect screen\nposition to text position mapping.")]),e._v(" "),t("li",[e._v("Ability to scroll text in the text box widget.")]),e._v(" "),t("li",[t("code",[e._v("Rect::with_position")]),e._v(" + "),t("code",[e._v("Rect::with_size")]),e._v(" methods.")]),e._v(" "),t("li",[e._v("Fixed caret position when removing text from text box in specific cases.")]),e._v(" "),t("li",[e._v("Fixed crash when typing spaces at the end of text box with word wrap.")]),e._v(" "),t("li",[e._v("Fixed caret position when adding text to the multiline text box widget.")]),e._v(" "),t("li",[e._v("Fixed new line addition in the text box widget.")]),e._v(" "),t("li",[e._v("Ability to select words (or whitespace spans) in the text box by double click.")]),e._v(" "),t("li",[e._v("Emit double click after mouse down event (not before).")]),e._v(" "),t("li",[e._v("Fixed caret blinking in the text box widget for various scenarios.")]),e._v(" "),t("li",[e._v("Ctrl+LeftArrow and Ctrl+RightArrow to skip words in the text box widget.")]),e._v(" "),t("li",[e._v("Allow setting caret position in the text box widget by clicking outside of line bounds.")]),e._v(" "),t("li",[t("code",[e._v("raycast2d")]),e._v(" example.")]),e._v(" "),t("li",[e._v("Fixed text deletion in text box by "),t("code",[e._v("Delete")]),e._v(" key + selection fixes.")]),e._v(" "),t("li",[e._v("Fixed selection by Ctrl+Home, Ctrl+End in the text box widget.")]),e._v(" "),t("li",[e._v("Fixed selected text highlighting in the text box widget.")]),e._v(" "),t("li",[e._v("Fixed panic when Ctrl+C in a text box when selection is right-to-left.")]),e._v(" "),t("li",[e._v("Ability to focus/unfocus a widget by sending a message.")]),e._v(" "),t("li",[e._v("Added "),t("code",[e._v("TextBox")]),e._v(" example.")]),e._v(" "),t("li",[e._v("Removed "),t("code",[e._v("is_modified")]),e._v(" flag from "),t("code",[e._v("PropertyInfo")]),e._v(".")]),e._v(" "),t("li",[e._v("Ability to revert inherited property to parent's prefab value.")]),e._v(" "),t("li",[e._v("Replaced manual property inheritance with reflection.")]),e._v(" "),t("li",[e._v("Added "),t("code",[e._v("fields")]),e._v(" and "),t("code",[e._v("fields_mut")]),e._v(" for "),t("code",[e._v("Reflect")]),e._v(" trait.")]),e._v(" "),t("li",[e._v("Property inheritance for scripts.")]),e._v(" "),t("li",[e._v("Ability to extract selection as a prefab.")]),e._v(" "),t("li",[e._v("Fixed tooltips for complex properties in "),t("code",[e._v("Inspector")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Allow selecting build profile when running a game from the editor.")]),e._v(" "),t("li",[t("code",[e._v("NodeHandle")]),e._v(" wrapper to bypass some limitations of "),t("code",[e._v("Inspector")]),e._v(" widget.")]),e._v(" "),t("li",[e._v("Return result instead of unwrap and panic in "),t("code",[e._v("make_relative_path")]),e._v(" - fixed some issues with symlinks in the\neditor.")]),e._v(" "),t("li",[e._v("Added missing "),t("code",[e._v("Reflect")]),e._v(" implementation for scripts made in "),t("code",[e._v("fyrox-template")]),e._v(".")]),e._v(" "),t("li",[e._v("Added dependencies optimization for projects generated in "),t("code",[e._v("fyrox-template")]),e._v(".")]),e._v(" "),t("li",[e._v("Provided access to some sound engine methods to plugins ("),t("code",[e._v("set_sound_gain")]),e._v(" and "),t("code",[e._v("sound_gain")]),e._v(")")]),e._v(" "),t("li",[e._v("Fixed style for ArrayPropertyEditor widget.")]),e._v(" "),t("li",[e._v("Do not emit events for disabled animation signals.")]),e._v(" "),t("li",[e._v("Sprite sheet animations with signals.")]),e._v(" "),t("li",[e._v("Fixed terrain rendering - there's no more seams between layers with skybox content.")]),e._v(" "),t("li",[e._v("Ability to set blending equation in draw parameters in the renderer.")]),e._v(" "),t("li",[e._v("Ability to set blend function separately for RGB and Alpha in the renderer.")]),e._v(" "),t("li",[e._v("Ignore invisible menus when closing menu chain by out-of-bounds click.")]),e._v(" "),t("li",[e._v("Make some buttons in the editor smaller and less bright, add more tooltips.")]),e._v(" "),t("li",[e._v("Use images for "),t("code",[e._v("Expand all")]),e._v(", "),t("code",[e._v("Collapse all")]),e._v(", "),t("code",[e._v("Locate Selection")]),e._v(" buttons in world viewer.")]),e._v(" "),t("li",[e._v("Fixed potential infinite loops when performing some math operations.")]),e._v(" "),t("li",[e._v("Smoothing for cascaded shadow maps.")]),e._v(" "),t("li",[e._v("Fixed script property editor - no more weird bugs in the editor when setting/editing/removing scripts from\na node.")]),e._v(" "),t("li",[e._v("Fixed cascaded shadow maps for directional lights.")]),e._v(" "),t("li",[e._v("Added "),t("code",[e._v("Frustum::center")]),e._v(" method.")]),e._v(" "),t("li",[e._v("Fixed list of panels in "),t("code",[e._v("View")]),e._v(" menu in the editor.")]),e._v(" "),t("li",[e._v("Create tool tips for interaction modes hidden by default.")]),e._v(" "),t("li",[e._v("Reload settings when reconfiguring the editor.")]),e._v(" "),t("li",[e._v("Added list of recent scenes to "),t("code",[e._v("File")]),e._v(" menu in the editor - makes easier to switch between most used scenes.")]),e._v(" "),t("li",[e._v("Ability to add, remove, set items for "),t("code",[e._v("MenuItem")]),e._v(" widget")]),e._v(" "),t("li",[e._v("Correctly highlight selected interaction mode button")]),e._v(" "),t("li",[e._v("More hotkeys for the editor\n"),t("ul",[t("li",[t("code",[e._v("[5]")]),e._v(" - activate navmesh edit mode")]),e._v(" "),t("li",[t("code",[e._v("[6]")]),e._v(" - activate terrain edit mode")])])]),e._v(" "),t("li",[e._v("Ability to set "),t("code",[e._v("Selected")]),e._v(" flag to "),t("code",[e._v("Decorator")]),e._v(" widget on build stage")]),e._v(" "),t("li",[e._v("Added "),t("code",[e._v("Invert drag")]),e._v(" option for camera settings in the editor.")]),e._v(" "),t("li",[e._v("Fixed incorrect rendering of "),t("code",[e._v("Luminance")]),e._v(" and "),t("code",[e._v("LuminanceAlpha")]),e._v(" textures.")]),e._v(" "),t("li",[e._v("Fixed closing menus by clicking outside them.")]),e._v(" "),t("li",[e._v("Direct access to all fields in all widgets.")]),e._v(" "),t("li",[e._v("Force "),t("code",[e._v("TextBox")]),e._v(" widget to consume all input messages, this fixes hot keys triggering in the editor while\ntyping something in text fields.")])]),e._v(" "),t("h2",{attrs:{id:"support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#support"}},[e._v("#")]),e._v(" Support")]),e._v(" "),t("p",[e._v("If you want to support the development of the project, click one of the links below. Preferable way is to use\n"),t("a",{attrs:{href:"https://boosty.to/fyrox",target:"_blank",rel:"noopener noreferrer"}},[e._v("Boosty"),t("OutboundLink")],1),e._v(" - this way the money will be available for the development immediately.\nAlternatively you can can use "),t("a",{attrs:{href:"https://www.patreon.com/mrdimas",target:"_blank",rel:"noopener noreferrer"}},[e._v("Patreon"),t("OutboundLink")],1),e._v(", but in this case the money will\nbe on-hold for unknown period of time ("),t("a",{attrs:{href:"https://github.com/FyroxEngine/Fyrox/issues/363",target:"_blank",rel:"noopener noreferrer"}},[e._v("details are here"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("p",[e._v("Also, you can help by fixing one of the "),t("a",{attrs:{href:"https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22",target:"_blank",rel:"noopener noreferrer"}},[e._v('"good first issues" '),t("OutboundLink")],1),e._v(",\nadding a desired feature to the engine, or making a contribution to the "),t("a",{attrs:{href:"https://github.com/fyrox-book",target:"_blank",rel:"noopener noreferrer"}},[e._v("book"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"what-s-next"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-s-next"}},[e._v("#")]),e._v(" What's Next?")]),e._v(" "),t("p",[e._v("There are few new features planned for the next version of the engine: sprite sheet animation editor, ability to\nedit multiple scenes at once, generic animation editor. As usual, the engine will be improved in terms of\nusability and quality.")])])}),[],!1,null,null,null);t.default=s.exports}}]);