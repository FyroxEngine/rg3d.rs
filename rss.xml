<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Fyrox - A feature-rich game engine built in Rust]]></title>
        <description><![CDATA[Fyrox is a feature-rich, production-ready, open-source game engine written in Rust.]]></description>
        <link>https://fyrox.rs</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 16 Oct 2025 16:56:14 GMT</lastBuildDate>
        <atom:link href="https://fyrox.rs/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[Mr. DIMAS 2025]]></copyright>
        <language><![CDATA[zh-CN]]></language>
        <item>
            <title><![CDATA[Fyrox Game Engine 0.36]]></title>
            <description><![CDATA[Fyrox 0.36 includes feature-rich tile maps, project manager, UI styling, animation improvements and many more.]]></description>
            <link>https://fyrox.rs/blog/post/fyrox-game-engine-0-36/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/fyrox-game-engine-0-36/</guid>
            <pubDate>Tue, 04 Feb 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">Fyrox Game Engine 0.36</h1> <div class="content__default"><p>I'm happy to announce that Fyrox 0.36 has been released! Fyrox is a modern game engine written in Rust, it helps
you to create 2D and 3D games with low effort using native editor; it is like Unity, but in Rust. This release is the
largest in history of the engine so far. It includes major rendering improvements, feature-rich tile maps,
UI styling support, project manager, nine patch improvements, collider shape editing, terrain improvements, animation improvements, particle system improvements, huge amount of bugfixes and a lot more.</p> <h2 id="version-unification"> Version Unification</h2> <p>Fyrox is a project with multiple crates and all these crates had different versions, which made it hard to understand which
version of a crate belongs to which version of the engine. Now this is fixed and all crates in the project has the same version: 0.36.
Why not 0.35, though? Turns out that <code>fyrox-sound</code> was already at version <code>0.35</code> when Fyrox 0.34 was released, so
this situation forced the team to switch to version 0.36 instead.</p> <h2 id="project-manager"> Project Manager</h2> <p><img src="https://fyrox.rs/assets/0.36/project_manager.png" alt="project manager"></p> <p>Project manager is a new part of the engine that allows you to manage multiple projects made with the engine at once. It allows you to create a new
project or import an existing one, run the project or edit it in the editor, upgrade the project to selected version of the engine and many
more. Project manager also does all the heavy lifting for newcomers - it hides the complexity of using multiple console commands to run the
engine in different modes and basically allows you to run the engine in a few clicks.</p> <p>The project manager is now the official, yet experimental, launcher for the engine. Its pre-built versions will be available
on the website using "Download" button. It can also be compiled locally using <code>cargo install fyrox-project-manager</code>, these are
for those devs who don't trust running pre-built binaries.</p> <p>Keep in mind, that the project manager is fully optional and is not required for the engine to run, it is just a
convenient tool for project management.</p> <h2 id="how-to-upgrade"> How to Upgrade</h2> <p>Download the project manager, import your project using "Import" button, select it in the list and click "Upgrade" button,
select "Latest" and click "Upgrade".</p> <p>Alternatively, this can be done using console commands. At first, install the latest <code>fyrox-template</code> by executing the following
command: <code>cargo install fyrox-template --force</code>. Then execute this: <code>fyrox-template upgrade --version=latest</code>. The amount of
breaking changes in the code is quite low and it should be quite easy to migrate an existing project to the latest engine version.</p> <h2 id="tile-maps"> Tile Maps</h2> <p><img src="https://fyrox-book.github.io/scene/tile_map.png" alt="tile maps"></p> <p>Fyrox now supports tile maps for rendering 2D environments. Tile map is an object that allows drawing on a grid with pre-defined
"pixels" called tiles, which are essentially just a texture. Tiles are stored in a special resource, that allows sharing it across
multiple tile maps. The resource is called the tile set, and FyroxEd now has a tile set editor which allows any material to be turned
into a tile atlas of tile rendering data.</p> <p>Each tile set can contain multiple pages of tiles, and thereby allow the user to keep their tile data organized in as many or as few
pages as they like. Each tile handle in the tile map stores the position of a page and the position within the page where it should find
its tile data. Pages also come in several varieties for storing different types of data.</p> <ul><li><p>Atlas pages allow a single material to be automatically split into multiple tiles based on their position within the material.</p></li> <li><p>Freeform pages allow the user total freedom to create any tile at any position on the page, with each tile individually specifying
its material and UV coordinates.</p></li> <li><p>Transform pages store rotation and flip relationships between tile handles, which allows Fyrox to take a tile handle and automatically
convert it into the handle of a flipped or rotated version of the same tile.</p></li> <li><p>Animation pages store sequences of handles which represent animations to play within a tile map. Each cell on the page represents a frame
of animation, and consecutive horizontal runs of cells are animated at the frame rate specified for the page.</p></li></ul> <p><img src="https://fyrox-book.github.io/scene/tile_map_animation.png" alt="tile maps animations"></p> <p>In addition to storing rendering information, a tile set may optionally contain collision shapes for each tile, and collision shapes may
be organized into multiple kinds to allow collision shapes to be distinguished based on what sort of collision is expected.
For example, tiles with ice physics may be distinguished from tiles that allow the player to pass through and tiles with bouncy physics,
and so on.</p> <p><img src="https://fyrox-book.github.io/scene/tile_map_properties.png" alt="tile maps properties"></p> <p>Tiles may also contain additional data to be used in whatever way some application might need. A tile may have any number of property fields
that can be identified by name or by UUID, and each field can allow each tile to store an integer, a float, a string, or a 3x3 grid of bytes
that could be used for Wang tiling or other effects.</p> <p>FyroxEd now contains a tile map editor that provides various drawing tools to an artist wishing to populate a tile map with tile handles.
Tiles can be selected, move, copied, rotated, flipped, or deleted. Rectangles can be filled with repeating patterns of tiles, and a flood
fill tool allows any arbitrary shape to be filled by any selected pattern of tiles.</p> <p>A new resource called a <em>tile map brush</em> provides a space for artists to organize the available tiles into any arrangements that make tile map
editing fastest and easiest. Tiles that are often used together may be stored nearby to each other for easy access, even if those tiles
come from different tile atlas materials. This is possible because the brush resource does not store tile data; it only stores handles for the
tile data in some tile set.</p> <p>Comprehensive documentation for tile maps <a href="https://fyrox-book.github.io/scene/tilemap.html" target="_blank" rel="noopener noreferrer">can be found here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <h2 id="ui-styling"> UI Styling</h2> <p><img src="https://fyrox.rs/assets/0.36/light_style.png" alt="light style"></p> <p><code>fyrox-ui</code> now supports styling. This is a crucial feature needed for flexible user interface designs. Styling works quite simple:
a property that needs to support styling should be wrapped into <code>StyledProperty&lt;T&gt;</code> and that's pretty much it. Styled variable
stores the value of <code>T</code> and also a name of the respective property it may be bound to. This mixed approach allows to override styled
properties with custom values and still have an ability apply styles later on.</p> <p>To apply a style all that is needed is to send <code>WidgetMessage::Style</code> to it with an appropriate <code>StyleResource</code> instance. The widget
is then will try to find a property by the name specified in each <code>StyledProperty</code> and override its value with the one from the style.</p> <p>It is also possible to apply a style to all widgets at once - just call <code>ui.set_style(..)</code> and it will automagically apply the style to
all widgets.</p> <p>Every <code>UserInterface</code> instance stores its own style, which is then supplied to <code>BuildContext</code>, which in its turn is used at the building
stage by every widget. This way all new widgets created after the call to <code>set_style</code> will still have the right style.</p> <p>For example, a <code>Decorator</code> widget that is used in <code>Button</code> widget could be created like this:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token class-name">DecoratorBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
    <span class="token class-name">BorderBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
        <span class="token class-name">WidgetBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">with_foreground</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token constant">BRUSH_DARKER</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">with_child</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">with_pad_by_corner_radius</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">with_corner_radius</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">::</span><span class="token constant">CORNER_RADIUS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">with_stroke_thickness</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">::</span><span class="token constant">BORDER_THICKNESS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">with_normal_brush</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token constant">BRUSH_LIGHT</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">with_hover_brush</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token constant">BRUSH_LIGHTER</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">with_pressed_brush</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token constant">BRUSH_LIGHTEST</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre></div><p>As you can see, most of its properties are actually style-bound properties. If the user then decides to call <code>ui.set_style</code> then all these
properties will fetch the right values from the given style.</p> <h2 id="fonts"> Fonts</h2> <p><img src="https://fyrox.rs/assets/0.36/editor.png" alt="editor"></p> <p>Fyrox 0.36 has finally fixed blurry fonts and it works good on Hi-DPI screens as well. Fonts are now also supports kerning, which makes fonts
to look as it meant to look like.</p> <h2 id="shape-editing-for-colliders"> Shape Editing for Colliders</h2> <p><img src="https://fyrox.rs/assets/0.36/collider_shape_edit.png" alt="collider shape editing"></p> <p>Is is now possible to edit collider shapes directly in the scene using the new collider shape editing plugin. This plugin can be activated using either the interaction mode with "triangle" button or by simply clicking the "edit"
button in the Collider Control Panel. This plugin supports pretty much every convex shape and also works in 2D mode.</p> <h2 id="graphics-server-abstraction"> Graphics Server Abstraction</h2> <p>For a long time Fyrox was tied to OpenGL and it finally changed - all low level graphics code is now isolated in a graphics
server abstraction. It has more or less modern interface, and could be used to use any other graphics API, such as Vulkan,
DirectX, etc.</p> <p>Changing the renderer in a project with ~250k lines of code is a huge task and this release of the engine still uses an
OpenGL-based graphics server. It will be changed closer to release of Fyrox 1.0, which should happen this year.</p> <h2 id="renderer-refactoring"> Renderer Refactoring</h2> <p>Renderer was significantly refactored to use the same approach used in modern graphics APIs. This change is very important for further replacement
of OpenGL with its modern alternatives, such as Vulkan.</p> <h3 id="gpu-resources"> GPU Resources</h3> <p>Modern approach in GAPIs relies on the use of buffers of different kinds, such as vertex buffers, uniform buffers, textures, etc. The renderer
architecture was changed to be as close as possible to the modern approach, but still remain relatively high level. Fyrox's shaders structure was
changed as well to reflect this:</p> <div class="language-glsl extra-class"><pre class="language-glsl"><code><span class="token punctuation">(</span>
    name<span class="token operator">:</span> <span class="token string">"StandardShader"</span><span class="token punctuation">,</span>

    resources<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span>
            name<span class="token operator">:</span> <span class="token string">"diffuseTexture"</span><span class="token punctuation">,</span>
            kind<span class="token operator">:</span> <span class="token function">Texture</span><span class="token punctuation">(</span>kind<span class="token operator">:</span> Sampler2D<span class="token punctuation">,</span> fallback<span class="token operator">:</span> White<span class="token punctuation">)</span><span class="token punctuation">,</span>
            binding<span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">(</span>
            name<span class="token operator">:</span> <span class="token string">"properties"</span><span class="token punctuation">,</span>
            kind<span class="token operator">:</span> <span class="token function">PropertyGroup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              
                <span class="token punctuation">(</span>
                    name<span class="token operator">:</span> <span class="token string">"diffuseColor"</span><span class="token punctuation">,</span>
                    kind<span class="token operator">:</span> <span class="token function">Color</span><span class="token punctuation">(</span>r<span class="token operator">:</span> <span class="token number">255</span><span class="token punctuation">,</span> g<span class="token operator">:</span> <span class="token number">255</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">255</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            binding<span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// Built-in property group.</span>
        <span class="token punctuation">(</span>
            name<span class="token operator">:</span> <span class="token string">"fyrox_instanceData"</span><span class="token punctuation">,</span>
            kind<span class="token operator">:</span> <span class="token function">PropertyGroup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
                <span class="token comment">// Autogenerated</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            binding<span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// Next goes render pass definitions with respective shaders.</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><p>Note the new <code>resources</code> section in the shader definition. It is used exactly to describe the resources the shader requires for it to work
correctly. There are two resource kinds that can be used in a shader - texture and property group. The most interesting is the latter - it
basically defines a uniform buffer, that contains all the required parameters. It could be either a user-defined property group ("properties")
and built-in ("fyrox_instanceData"). Data for built-in property groups is automatically supplied by the renderer, while user-defined property
groups must be manually set by the user.</p> <p>The actual uniform buffers will be automatically injected in the shader source code; the code for it will be generated using respective property
definitions. Code generation here is on purpose - uniform buffers are very error-prone because the order of variable matter here and if you change
a property type in its definition, but forget to change it in the uniform block definition in the shader code, then you'll have many happy hours
of debugging.</p> <p>The next important thing is explicit binding points for resources. These are just plain numbers, but defines at which binding point the shader
expects a particular resource. Binding points must be unique on per resource kind basis. This means that textures will have their own set of
binding points (0, 1, 2, 3, ...) and property groups too, so there could be a texture bound to point 0 and the property group as well.</p> <h3 id="uniform-buffers"> Uniform Buffers</h3> <p>The renderer now heavily relies on uniform buffers to store data for rendering. Current architecture involves new uniform memory allocator
to speed up uniform data upload to GPU. Internally it allocates multiple large uniform buffers (the actual size depends on GPU, but
it cannot be less than 16kb as said in the specification and the top limit is set to 65kb to prevent excessive memory allocations) and
dumps all the incoming data in those buffers and returns offsets for each block. This way of uniform packing is more efficient than
individually setting uniform values - it can save up to 15% of time. The platform that wins the most is WebAssembly, because it proxies
GAPI calls through JS, which could be quite slow.</p> <h3 id="materials-improvements"> Materials Improvements</h3> <p>All these changes dictates the required changes in the materials structure. Now materials store only changed properties and the values for the rest
of the properties will be taken from the shader defaults when rendering. Texture bindings in materials now do not have fallback values, because
the shader definition supplies them already</p> <p>Material editor was changed too to reflect these changes. For example, the following screenshot shows the structure of the standard PBR shader:</p> <p><img src="https://fyrox.rs/assets/0.36/material_editor.png" alt="material editor"></p> <p>As you can see, the "properties" buffer is the only one "uniform buffer" that can be edited from the material editor. Built-in buffers are hidden
from it, because their data is supplied at runtime.</p> <h3 id="shader-precompilation"> Shader Precompilation</h3> <p>Precompilation of all built-in shaders at once at start was removed, now all the shaders compiles on-demand. This is quite controversial change,
but it is required on some platforms, such as WebAssembly. These platforms could spend tens of seconds at shaders compilation, leaving your
game unresponsive during this stage.</p> <h3 id="minor-improvements"> Minor Improvements</h3> <p>There's a new ability to enable/disable scissor test and to specify depth func in custom shaders. Graphics server can now provide its capabilities,
which in their turn dictates which rendering techniques can be used.</p> <h2 id="asset-browser"> Asset Browser</h2> <p><img src="https://fyrox.rs/assets/0.36/asset_browser.png" alt="asset browser"></p> <p>Asset browser has got some major improvements as well. It is now able to duplicate existing resources, it also has got
a "refresh" button to refresh its content. Asset browser also shows folders in the current directory:</p> <p><img src="https://fyrox.rs/assets/0.36/asset_browser_folders.png" alt="asset browser folders"></p> <h2 id="ninepatch-improvements"> NinePatch Improvements</h2> <p><code>NinePatch</code> widget is used to split an image in nine sections, where each corner section will remain the same, while
the middle parts between each corner will be used to evenly fill the space. This widget is primarily used in games UI
to create resizable frames, buttons, windows, etc.</p> <p>This widget got some significant improvements in this release. First of all, there's no need to explicitly set UVs and
margins at the same time - all that is needed is to set margins and everything else will be calculated on the fly for
you.</p> <p>The next major improvement is the support for custom texture region, which is crucial for interfaces that use atlases
with multiple UI elements. Texture region allows specifying a rectangular region on the texture which is then will be
used for slicing.</p> <p>All this functionality is also backed by the new texture slice editor, which allows you to specify the region and margins and adjust them as you need:</p> <p><img src="https://fyrox.rs/assets/0.36/texture_slice.png" alt="texture slice"></p> <p>The next improvement is the support of configurable tiling modes. There are two modes supported: stretch and tiled.
The following image shows the difference between two. The upper one uses tiling and the bottom one just stretches the
middle sections.</p> <p><img src="https://fyrox.rs/assets/0.36/nine_slice_tiling_mode.png" alt="nine slice tiling mode"></p> <p>The last tiny, yet useful, improvement is the ability to hide center segment:</p> <p><img src="https://fyrox.rs/assets/0.36/nine_slice_no_center_segment.png" alt="nine slice no center segment"></p> <h2 id="terrain-improvements"> Terrain Improvements</h2> <p><img src="https://fyrox.rs/assets/0.36/terrain_holes.png" alt="terrain holes"></p> <p>Terrains now supports an ability to cut holes, which could bee useful if you need to add cave entrance in your terrain,
or simply remove a part of the terrain. This hole cutting mechanism is not only visual, it also affects physics:</p> <p><img src="https://fyrox.rs/assets/0.36/terrain_holes_physics.png" alt="terrain holes physics"></p> <p>As you can see, the physical collider (which is visualized as the red mesh) is also having holes in it.</p> <p>The next major improvement is the brush system improvement, which includes arbitrary transform for the brush, configurable
hardness, ability to assign specific height value. The overall performance of drawing on terrains is also improved by
off-threading the heavy work.</p> <h2 id="experimental-occlusion-culling"> Experimental Occlusion Culling</h2> <p>This release adds an experimental tile-based occlusion culling system. The main idea is to split the screen into
multiple tiles, find which object belongs to which tile, render bounding boxes into a frame buffer with depth buffer
from previous frame, find bit index for every pixel in tile for every bounding box and merge them all using additive
blending. Downscale this "visibility buffer" and read it back on CPU and cache the visibility info for the next frame.
The full algorithm description <a href="https://fyrox.rs/blog/post/tile-based-occlusion-culling/" target="_blank" rel="noopener noreferrer">can be found in this article<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.</p> <p>There's also occlusion culling for light sources, which allows to skip light-specific render passes for lights that
are fully hidden behind objects.</p> <p>Both of these features are disabled by default, because they still have some edge cases which aren't solved yet.
The main one is the latency problem, which could lead to object popping out of nowhere if the camera or an object
is moving too fast.</p> <h2 id="particle-systems"> Particle Systems</h2> <p><img src="https://fyrox.rs/assets/0.36/particle_system.gif" alt="particle system"></p> <p>Particle systems are now has an ability to change coordinate system to which the generated particles will belong
to. There are two options - local (default) and world space. World space coordinate system is very useful for
particles that should remain in place where they were created, but still let the coordinate system to be attached
to some other (potentially moving) objects.</p> <p><img src="https://fyrox.rs/assets/0.36/particle_system_distance.gif" alt="particle system distance"></p> <p>The next improvement in particle systems is the configurable visibility distance. It allows to automatically exclude
distant particle systems from rendering to improve performance. This distance can be tweaked on per-system basis.</p> <p>The last, but not least improvement for particle systems is lighting support. Lighting can be enabled/disabled in
the material properties in the material editor.</p> <h2 id="early-return-macros"> Early Return Macros</h2> <p>Useful macros for early return statements - while <code>let-else</code> exists, it still takes more lines of code than it should.
These macros are much more compact and easier to read. The most commonly used macro is <code>some_or_return</code> and it is
very simple:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token attribute attr-name">#[macro_export]</span>
<span class="token macro property">macro_rules!</span> some_or_return <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token variable">$expr</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$expr</span> <span class="token punctuation">{</span>
            v
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token variable">$expr</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$default</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$expr</span> <span class="token punctuation">{</span>
            v
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$default</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>And here's an example of why it exists. These are two equivalent functions, but the first one is written using
<code>let-else</code>, and the second one - with <code>some_or_return</code> macro:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">no_macro</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">UiMessage</span><span class="token punctuation">,</span> editor<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Editor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ui <span class="token operator">=</span> editor<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>user_interfaces<span class="token punctuation">.</span><span class="token function">first_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>wizard<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>ragdoll_wizard<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>current_scene<span class="token punctuation">)</span> <span class="token operator">=</span> editor<span class="token punctuation">.</span>scenes<span class="token punctuation">.</span><span class="token function">current_scene_entry_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>game_scene<span class="token punctuation">)</span> <span class="token operator">=</span> current_scene<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">downcast_mut</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">GameScene</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> graph <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> editor<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>scenes<span class="token punctuation">[</span>game_scene<span class="token punctuation">.</span>scene<span class="token punctuation">]</span><span class="token punctuation">.</span>graph<span class="token punctuation">;</span>
    wizard<span class="token punctuation">.</span><span class="token function">handle_ui_message</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> ui<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> game_scene<span class="token punctuation">,</span> <span class="token operator">&amp;</span>editor<span class="token punctuation">.</span>message_sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">with_macro</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">UiMessage</span><span class="token punctuation">,</span> editor<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Editor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ui <span class="token operator">=</span> editor<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>user_interfaces<span class="token punctuation">.</span><span class="token function">first_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> wizard <span class="token operator">=</span> <span class="token macro property">some_or_return!</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>ragdoll_wizard<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> current_scene <span class="token operator">=</span> <span class="token macro property">some_or_return!</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span>scenes<span class="token punctuation">.</span><span class="token function">current_scene_entry_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> game_scene <span class="token operator">=</span> <span class="token macro property">some_or_return!</span><span class="token punctuation">(</span>current_scene<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">downcast_mut</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">GameScene</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> graph <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> editor<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>scenes<span class="token punctuation">[</span>game_scene<span class="token punctuation">.</span>scene<span class="token punctuation">]</span><span class="token punctuation">.</span>graph<span class="token punctuation">;</span>
    wizard<span class="token punctuation">.</span><span class="token function">handle_ui_message</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> ui<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> game_scene<span class="token punctuation">,</span> <span class="token operator">&amp;</span>editor<span class="token punctuation">.</span>message_sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>As you can see the version with the macro is much more compact and less verbose. There are also <code>ok_or_return</code> macro
that works with <code>Result</code>s. The next group of macros is the ones that can alter control flow of loops:
<code>some_or_continue</code>, <code>ok_or_continue</code>, <code>some_or_break</code>, <code>ok_or_break</code>. These have self-descriptive names.</p> <h2 id="curve-editor"> Curve Editor</h2> <p><img src="https://fyrox.rs/assets/0.36/curve_editor.png" alt="curve editor"></p> <p>Curve editor has got some improvements as well. It is now possible to copy/paste selection. There's also a new ability
to add keys on multiple curves at once. Hotkey for <code>Zoom to Fit</code> was also added (<code>F</code> key by default).</p> <h2 id="editor-ui-statistics-plugin"> Editor UI Statistics Plugin</h2> <p><img src="https://fyrox.rs/assets/0.36/editor_ui_statistics.png" alt="editor ui statistics"></p> <p>Editor UI statistics plugin allows you to debug the editor UI itself. It shows total number of allocated widgets,
used memory (rough estimate), the number of issued drawing commands and the number of processed UI messages on the
current frame. This information could be quite useful for when something goes wrong, for example widget counter
could be helpful to track non-deleted widgets, that might pile up while the editor is working and thus slowing
it down over time.</p> <h2 id="texture-settings"> Texture Settings</h2> <p>This release added more settings for textures which include:</p> <ul><li><code>Base Level</code> - the index of the lowest defined mipmap level. Keep in mind, that the texture data should
provide the actual mip map level defined by the provided value, otherwise the rendering will be incorrect (probably
just black on majority of implementations) and glitchy.</li> <li><code>Max Level</code> - the index of the highest defined mipmap level. Keep in mind, that the texture data should provide
the actual mip map level defined by the provided value, otherwise the rendering will be incorrect (probably just black
on majority of implementations) and glitchy.</li> <li><code>Min LOD</code> - the minimum level-of-detail parameter. This floating-point value limits the selection of highest
resolution mipmap (lowest mipmap level). The initial value is -1000.0.</li> <li><code>Max LOD</code> - the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest
resolution mipmap (highest mipmap level). The initial value is 1000.</li> <li><code>LOD Bias</code> - a fixed bias value that is to be added to the level-of-detail parameter for the texture before
texture sampling. The specified value is added to the shader-supplied bias value (if any) and subsequently clamped into
the implementation-defined range <code>−bias_max..bias_max</code>, where <code>bias_max</code> is the value that can be fetched from the
current graphics server. The initial value is 0.0.</li></ul> <h2 id="file-browser-improvements"> File Browser Improvements</h2> <p><img src="https://fyrox.rs/assets/0.36/file_browser.png" alt="file browser"></p> <p>File browser was improved in this release as well. This released added home/desktop directories shortcut buttons for
faster navigation. It is now possible to focus current path of the file browser. The default path of file browser
was changed to <code>./</code>.</p> <h2 id="surface-resource"> Surface Resource</h2> <p><img src="https://fyrox.rs/assets/0.36/surface_resource.png" alt="surface resource"></p> <p>Every use of <code>Arc&lt;Mutex&lt;SurfaceData&gt;&gt;</code> was turned into <code>Resource&lt;SurfaceData&gt;</code> which essentially almost the same, except
it utilizes the standard asset management pipeline. This allowed the editor to operate with such resource instances
as well.</p> <h2 id="node-and-property-selector-improvements"> Node and Property Selector Improvements</h2> <p><img src="https://fyrox.rs/assets/0.36/property_selector.png" alt="property selector"></p> <p>Node and property selectors got some QoL improvements as well. The search bar is now focused immediately after opening,
which allows you to quickly start searching for a property or a scene node. Selection can now be confirmed using "Enter"
key. Overall navigation can now be done entirely from keyboard, making it very fast for keyboard users.</p> <h2 id="constructor-provider"> Constructor Provider</h2> <p>Creation of scene nodes and widgets was hardcoded in the editor for a long time and it is finally changed in this release.
The engine now has a special trait <code>ConstructorProvider</code> which is used to define a standard way of creating an entity.
This trait is used by the editor to fill <code>Create</code> menu and its submenus. Each entity can define multiple variants for it.
For example a <code>Mesh</code> node could be in multiple "flavors": a cube, a cone, a cylinder, etc. Typical implementation of it
could look like this:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">ConstructorProvider</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Camera</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">NodeConstructor</span> <span class="token punctuation">{</span>
        <span class="token class-name">NodeConstructor</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_variant</span><span class="token punctuation">(</span><span class="token string">"Camera"</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token class-name">CameraBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">BaseBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"Camera"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>One might ask why not just use <code>Default</code> trait for this? The answer is quite simple: most of <code>Default</code> trait implementations
aren't suitable for this purpose, because for instance there's no need to pre-allocate a string for "Camera" name when it
will be replaced with something else immediately after.</p> <p>This trait however is much more flexible and allows adding any desired way of constructing an entity. This can be highlighted
even more when you look at a typical constructor of a UI widget:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">ConstructorProvider</span><span class="token operator">&lt;</span><span class="token class-name">UiNode</span><span class="token punctuation">,</span> <span class="token class-name">UserInterface</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">ScrollBar</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GraphNodeConstructor</span><span class="token operator">&lt;</span><span class="token class-name">UiNode</span><span class="token punctuation">,</span> <span class="token class-name">UserInterface</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">GraphNodeConstructor</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">with_variant</span><span class="token punctuation">(</span><span class="token string">"Scroll Bar"</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>ui<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
                <span class="token class-name">ScrollBarBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">WidgetBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"Scroll Bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> ui<span class="token punctuation">.</span><span class="token function">build_ctx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">with_group</span><span class="token punctuation">(</span><span class="token string">"Input"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>ScrollBarBuilder::build</code> creates not only the <code>ScrollBar</code> instance, but also a bunch of other widgets that is used internally
in the scroll bar.</p> <h2 id="performance-improvements"> Performance Improvements</h2> <p>This release contains quite a lot of performance improvements in various parts of the engine. The most significant performance
improvement was achieved in the editor - it is now up to 70% faster than the previous version.</p> <p>The next place where the performance was improved is hierarchical properties propagation in the scene graph. Performance of
this operation now does not depend on the size of the scene graph. Only moving objects forces an update iteration of
hierarchical properties, which significantly improves performance in mostly static scenes.</p> <h2 id="fyrox-texture-crate"> <code>fyrox-texture</code> crate</h2> <p>Textures-related code is now detached in a separate crate called <code>fyrox-texture</code>. The main reason why it was done is to
be able to use textures in <code>fyrox-ui</code> crate, which used "abstract" textures for a long time and this prevented a lot of
widgets from being implemented properly. For example, abstract texture was an <code>UntypedResource</code> which don't have any way
of extracting is actual size (width, height) and the <code>Image</code> widget required width and height to be set explicitly. Otherwise
is just collapses into a point.</p> <p>The content of <code>fyrox-texture</code> crate is re-exported from its previous module and no change in user code is required.</p> <h2 id="animation-improvements"> Animation Improvements</h2> <p>Animation system of the engine has some nice improvements in this release.</p> <h3 id="absm"> ABSM</h3> <p>Animation Blending State Machines now "hijacks" control over animations from the animations container - now ABSM itself updates the
animations it uses, and only those that are currently used either by a state or states of active transition. This significantly
improves performance, since there's no need to update unused animations.</p> <h3 id="animation-resource"> Animation Resource</h3> <p>For quite a while, the animation data (tracks and keys) was copied together with the animation. The main disadvantage of this approach
is that when you have multiple instances of the same prefab, each prefab will have its own copy of animation tracks which is basically
immutable and can be shared across multiple instances instead. The old approach led to increased memory usage and was very unoptimal
in general.</p> <p>This release solves this issue by addition of <code>AnimationResource</code>, which contains animation tracks with keys. This resource is basically
a shared (mostly immutable) storage of animation data. So expect reduced memory consumption in this release.</p> <h3 id="root-motion"> Root Motion</h3> <p>There was a nasty bug in the root motion implementation that led to annoying jitter on looping animations. The most annoying part in this
bug was that it didn't occur immediately, instead it started to show up only after a few minutes. Now it is fixed an root motion works
flawlessly. The root cause of the bug was that the loop boundaries were handled incorrectly, thus leading to error accumulation that led
to annoying jitter after large number iterations.</p> <h3 id="performance"> Performance</h3> <p>As you may know, Fyrox uses reflection to animate arbitrary numeric properties. For a long time this system was using very unoptimal
approach of applying values from animation to the entity being animated. The value from the animation was first boxed (essentially
adding redundant memory allocation) and then fed into the reflection system where it was handled through <code>Any</code> trait. Now the engine
uses very well optimized approach where is sets the value directly without additional boxing.</p> <h2 id="tooltips"> Tooltips</h2> <p>Tooltips now behaves the same as in many other desktop applications. Previously, tooltips appeared immediately after
the cursor was hover over a widget, now it has configurable interval which is 0.5 seconds by default. Tooltips are
now invisible for hit test, which allows to click-through them and they do not get in the way as it was before.</p> <h2 id="logging"> Logging</h2> <p>Logging was improved as well. There are three new macros: <code>info!</code>, <code>warn!</code>, <code>err!</code> which are just shortcuts for
<code>Log::info(format!(..))</code> and other respective functions. Logging is now disabled by default and every game must
enable it manually using <code>Log::set_file_name</code> or <code>Log::set_file</code> functions.</p> <h2 id="toggle-button-widget"> Toggle button widget</h2> <p><img src="https://fyrox.rs/assets/0.36/toggle_button_widget.png" alt="toggle button widget"></p> <p><code>ToggleButton</code> widget is somewhat similar to <code>CheckBox</code> widget in functionality, but it looks quite different. It is
useful to create control elements that has just two states - on and off. For example, the above screenshot shows the
toggle button for selection tracking.</p> <h2 id="editor-settings-window"> Editor Settings Window</h2> <p><img src="https://fyrox.rs/assets/0.36/editor_settings_window.png" alt="editor settings"></p> <p>Editor settings window now has shortcuts for groups. It allows to quickly jump to a particular settings group, without
wasting time on scrolling. The new searching functionality increased usability as well.</p> <h2 id="what-s-next"> What's Next?</h2> <p>The next major goal for the project is to release Fyrox 1.0, which is planned for this year. This will be a massive push in stability,
documentation and book quality, existing features will be polished as well. The engine will be able to help in development from start to finish,
essentially providing an IDE for game development in Rust.</p> <h2 id="support"> Support</h2> <p>If you want to support the development of the project, click <a href="https://fyrox.rs/sponsor.html" target="_blank" rel="noopener noreferrer">this link<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>. Also, you can help by
fixing one of the <a href="https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">"good first issues" <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>,
adding a desired feature to the engine, or making a contribution to the <a href="https://github.com/fyrox-book" target="_blank" rel="noopener noreferrer">book<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <h2 id="full-list-of-changes"> Full List of Changes</h2> <p>The list is split into four sections for ease of reading and finding particular information.</p> <h2 id="added"> Added</h2> <ul><li>Tile maps.</li> <li>UI styling support.</li> <li>Project manager to manage multiple Fyrox projects at once.</li> <li>Dropdown list docs.</li> <li>Implemented PartialEq for sprite sheet animation entities.</li> <li>Property editor for SurfaceDataResource.</li> <li>Surface data viewer for surface resource.</li> <li><code>BaseSceneGraph::remove_nodes</code>.</li> <li>Ability to add/remove interaction modes dynamically.</li> <li>Shape editing for colliders.</li> <li>Shader for sprite-based gizmos (allows to draw sprite-based gizmos on top of everything else).</li> <li><code>math::get_arbitrary_line_perpendicular</code>.</li> <li>Added ability to specify font-+its size for value indicator in <code>ScrollBar</code>.</li> <li>Ability to specify font size when building a button.</li> <li>Added ability to specify font and font size when creating window title.</li> <li>Added surface resource loader.</li> <li>Built-in surfaces.</li> <li>Added a configurable throttle frame interval for <code>Executor</code>.</li> <li>Added sanity check for brush operations to protect the editor from being overloaded by huge brushes.</li> <li>Messages for <code>Grid</code> widget - ability to change rows/columns/draw border/border thickness.</li> <li><code>Material::texture</code> helper method.</li> <li><code>Color::repeat_opaque</code> method.</li> <li><code>DrawingContext::push_grid</code> method.</li> <li><code>save + save_back</code> methods for resource.</li> <li>Added "refresh" button for asset browser.</li> <li><code>ResourceDataRef::as_loaded_ref/mut</code> methods.</li> <li>Ability to open assets using double click.</li> <li>Multi-selection support for <code>ListVIew</code> widget.</li> <li><code>impl PartialEq for Ray</code>.</li> <li>Add an ability to rotate the editor camera using scene gizmo.</li> <li><code>impl From&lt;&amp;String&gt; for ImmutableString</code>.</li> <li>Improved material api - <code>Material::set_property</code> is now much less verbose.</li> <li>Better support for fbx materials from 3DS max.</li> <li>Validation for 2d colliders.</li> <li>Added folders into asset browser.</li> <li>Ability to cut holes in terrain.</li> <li>Experimental occlusion culling for light sources.</li> <li><code>read_pixels_of_type</code> to get typed pixels instead of raw bytes.</li> <li>Added <code>R32UI</code> texture format.</li> <li><code>get_image</code> for gpu texture.</li> <li>Pixel buffer for async framebuffer reads.</li> <li>Include cache sizes in rendering statistics (helps in catching uncontrollable GPU memory usage growth).</li> <li>Ability to duplicate resources in asset browser.</li> <li>Added visible distance for particle systems.
<ul><li>Automatically excludes distant particle systems from rendering to improve performance.</li> <li>Can be tweaked on a per-system basis.</li></ul></li> <li>Ability to enable/disable scissor test from custom shaders.</li> <li>Ability to specify depth func in custom shaders.</li> <li>Added uniform buffers.</li> <li>Added <code>UniformBufferCache</code> for easier handling of multiple UBOs.</li> <li>Added bind groups + mandatory texture binding via render resources.</li> <li>Ability to fetch graphics server capabilities.</li> <li>Experimental <code>UniformMemoryAllocator</code>.</li> <li>Frustum culling for light sources.</li> <li>Support a saving/restoring the maximized flag of the editor's window.</li> <li>Ability to save all opened scenes at once + hotkeys.</li> <li><code>AxisAlignedBoundingBox::project</code> method.</li> <li><code>post_update</code> callback for <code>Plugin</code>.</li> <li>Editor plugins container - adds some useful methods for plugin search.</li> <li>More dockable windows.</li> <li>Ability to copy/paste selection in the curve editor widget.</li> <li>Added a configurable limit for message log to prevent excessive bloat.</li> <li>Configurable coordinate system for particle systems - allows selecting a coordinate system for generated particles—
local or world.</li> <li>Lighting support for particle systems.</li> <li><code>ModelResource::instantiate_and_attach</code> method.</li> <li>Ability to add keys on multiple curves at once.</li> <li>Hotkey for <code>zoom to fit</code> for curve editor widget.</li> <li>Useful macros for early return statements. While let-else exists, it still takes more lines of code than it should.
these macros are much more compact and easier to read.</li> <li><code>BaseControl::self_size</code> method.</li> <li>Editor ui statistics plugin. Allows tracking the total amount of widget used by the editor, which is useful to find if
there are "dangling" widgets.</li> <li><code>DockingManagerLayoutDescriptor::has_window</code> method.</li> <li>Print the total number of drawing commands of ui for the current frame.</li> <li><code>remove_on_close</code> flag for <code>Window</code> widget.</li> <li>Ability to apply custom sorting for children widgets of a widget.</li> <li>Ability to sort menu items.</li> <li>Track processed ui messages in the editor - helps to find message queue overload.</li> <li><code>has_component</code> helper methods.</li> <li><code>StyleResource</code> resource type.</li> <li>Configurable routing strategy for ui messages.</li> <li>Helper methods for easier setting window icon.</li> <li>Add a <code>Zed</code> editor option into editor settings.</li> <li>Added configurable delay for tooltips.
<ul><li>Prevents tooltips from popping up instantly on mouse hover, instead there's a configurable (0.55 s by default)
delay.</li> <li>Removes annoying tooltip popping when moving mouse.</li></ul></li> <li>Added more texture settings - base level, max level, min lod, max lod, lod bias.</li> <li>Added home/desktop directories shortcut buttons for file browser widget.</li> <li>Ability to focus the current path in the file browser widgets.</li> <li>Ability to specify graphics server constructor.
<ul><li>Essentially gives an ability to change graphics servers at creation/runtime stages.</li> <li>By default still uses OpenGL graphics server.</li></ul></li> <li>Added kerning support for fonts.</li> <li><code>BuildContext::send_message</code> method.</li> <li>Added project manager CI.</li> <li>Backward compatibility for deserialization of <code>Untyped-&gt;Typed</code> resource.</li> <li>Ability to specify usage for element buffer.</li> <li><code>info! + warn! + err!</code> log macros.</li> <li>Documentation improvements.</li> <li><code>Downcast</code> trait to remove code bloat.</li> <li>Added tooltip for shader field in the material editor.</li> <li>Toggle button widget.</li> <li>Added tags for reflection.</li> <li><code>WidgetBuilder::with_uniform_margin(..)</code>.</li> <li>Shortcuts for groups in editor settings: allows quickly jumping to a particular settings group.</li> <li>Searching functionality for editor settings.</li> <li><code>impl TypeUuidProvider for Rect&lt;T&gt;</code>.</li> <li>Added property editors for <code>Option&lt;Rect&lt;T&gt;&gt;</code>.</li> <li>Nine patch widget improvements.
<ul><li>Added ability to specify a texture region for atlas support.</li> <li>Remove explicit uv coordinates and calculate them on the fly.</li> <li>Ability to disable drawing of the center region of the nine-patch widget.</li> <li>Configurable tiling mode for nine-patch widget.</li> <li>Easier editing of texture slice using new texture slice editor.</li></ul></li> <li>Thumb widget for draggable things.</li> <li>Messages to change vertical and horizontal scrolling of ScrollViewer widget.</li></ul> <h2 id="changed"> Changed</h2> <ul><li>Included project license in every source file.</li> <li>Reset scene node transform to identity when making it root.</li> <li>Take z index into account when linking widgets.</li> <li>Split fyrox-template into lib + cli.</li> <li>Ability to specify project root dir for template-core.</li> <li>Optional app arguments. Prevents crash when trying to parse program arguments.</li> <li>Change key bindings to make more intuitive up/down motion.</li> <li>Replaced <code>SurfaceSharedData</code> into <code>Resource&lt;SurfaceData&gt;</code> <ul><li>Surface shared data was essentially a resource of some sort anyway.</li> <li>Allows saving meshes as resources externally.</li> <li>Allows using standard resource pipeline for surface data.</li></ul></li> <li>Simplified camera picking API in the editor.</li> <li>Improved terrain brush system.</li> <li>Print surface resource kind in the property editor.</li> <li>Fixed new object placement.
<ul><li>Children objects will stay at (0,0,0).</li> <li>When creating via "Create" menu, a new object will be located in front of the camera.</li> <li>When creating a parent object whose parent is root, it will also be located in front of the camera.</li></ul></li> <li>Ability to specify name column width of inspector widget.</li> <li>Save camera projection mode in editor settings.</li> <li>Refactored editor camera controller - allows dragging the camera using mmb in 2d mode.</li> <li>Sort items of built-in resources.</li> <li>Remove native collider when its shape cannot be created.</li> <li>Hijack control over animations from animation container in ABSM - now ABSM itself updates the animations it uses,
and only those that are currently used either by a state or states of active transition.</li> <li>Extract the rendering framework into a separate crate.</li> <li>Make fbx elements of mesh geometry optional.
<ul><li>Prints a warning message and continues reading.</li> <li>This is needed to be able to load "malformed" fbx, that has no mesh geometry, such as animation-only fbx.</li></ul></li> <li>Enable resource hot reloading by default in executor.</li> <li>Move <code>rotateVec2</code> to shared shader functions.</li> <li>Store initial data and file extension (if any) of built-in resources.</li> <li>Moved opengl initialization to the rendering framework.</li> <li>Use uniform buffer for bone matrices instead of texture matrix storage.</li> <li>Use uniform buffer to pass object instance data to shaders.</li> <li>Moved camera properties into its own uniform block.</li> <li>Switched to uniform buffers across the renderer.</li> <li>Pass material properties using uniform buffers.
<ul><li>Automatically generate uniform buffer description for material properties.</li> <li>Automatically define uniforms for samplers.</li> <li>No more need to manually define material properties in shaders, just use <code>properies.your_property_name</code>.</li></ul></li> <li>Isolated opengl-specific code of gpu program into its own module.</li> <li>Use uniform memory allocator to speed up uniform data upload to gpu.
<ul><li>Splits rendering of render bundles in two steps: uniform data collection + upload and the actual rendering.</li> <li>More efficient use of memory by using all available space in uniform buffers (prevents having uniform.
buffers with just 200–300 bytes of memory, where the actual memory block on gpu is 4 kb).</li> <li>It significantly reduces the number of individual data transfers and gapi calls in general.</li> <li>Improves performance by 12–15%.</li></ul></li> <li>Removed redundant buffer binding/unbinding - saves some time on api calls (especially in WebGL, where everything is
proxied through JS).</li> <li>Pass sceneDepth texture to shaders explicitly.</li> <li>Use explicit binding for textures. Prevents dozens of <code>glUniform1i</code> calls when drawing stuff, thus improving
performance by 5–10% (more on WebAssembly, where each gl call is passed through JS).</li> <li>Refactored shader structure to include resource bindings.
<ul><li>Makes shader structure more rigid and removes implicit built-in variables.</li> <li>Makes binding points of resources explicit.</li></ul></li> <li>Turned <code>Matrix2Editor</code> into generic-over-size <code>MatrixEditor</code>.</li> <li>Use immutable string in shader property name.</li> <li>Reworked materials.
<ul><li>Material now stores only changed shader properties.</li> <li>Move validation from set_property/bind to the renderer where it simply prints an error message to the log
if something's wrong.</li> <li>Removed fallback value from texture resource binding, it makes no sense to duplicate this info since the correct
one is stored in the shader anyway.</li> <li>Removed <code>default</code> property from texture definition in shaders.</li></ul></li> <li>Collect light info when constructing a render bundle. Removes redundant loop over scene graph nodes.</li> <li>Refactor hot reload to allow custom dynamic plugins besides dylib-based.</li> <li>Improved gpu texture api.</li> <li>Perform checked borrow in node message processing to prevent crashes. Crash could happen if a node is already deleted,
but its message was still in the queue.</li> <li>Replaced component querying from nodes with <code>ComponentProvider</code> trait.</li> <li>Turned editor inspector into a plugin.</li> <li>Cloning physics when cloning Graph to persist Scene settings when saving Scene from the editor.</li> <li>TabControl improvements..</li> <li>Changed <code>traverse_iter</code> to return a pair of handle and ref - much more convenient when there's a need to handle a
handle with a reference at the same time, no need to do re-borrow which is double work anyway.</li> <li>Added <code>AnimationResource</code> which decoupled animation tracks data into a shared resource.
<ul><li>Significantly reduces memory consumption when cloning animations, since it does not need to clone the tracks
anymore.</li> <li>Animation resource can be shared across multiple animations using the same tracks.</li> <li>Significantly speeds up the instantiation of animation player scene node.</li> <li>Backward compatibility is preserved.</li></ul></li> <li>Focus search bar's text box when focusing toolbar itself - toolbar focus makes no sense anyway, because it does not
interact with keyboard, but text box does.</li> <li>Node selector usability improvements.
<ul><li>Focus search bar on open.</li> <li>Ability to confirm selection by enter key.</li> <li>Bring the first selected item into view on open.</li> <li>Added tab navigation.</li></ul></li> <li>Lazy z-index sorting instead of on-demand.</li> <li>Exclude samples buffer from a list of animatable properties.</li> <li>Improved property selector.
<ul><li>Focus search bar on opening.</li> <li>Tab navigation.</li> <li>Highlight selected properties on rebinding.</li> <li>Ability to confirm selection by hitting the enter key.</li></ul></li> <li>Detached material-related parts of the editor into its own plugin - material editor is now non-existent by default and
created only when needed, which saves memory (both ram and vram) and cpu/gpu time.</li> <li>Detached ragdoll wizard into a separate plugin.</li> <li>Move the settings window into a separate plugin.</li> <li>Move the animation editor into its own plugin.</li> <li>Improved editor plugins api.</li> <li>Create animation editor on editor start if animation editor was docked before.</li> <li>Move the absm editor to a separate plugin.</li> <li>Create save file selector for prefabs on demand.</li> <li>Move the curve editor window into its own plugin.</li> <li>Move the path fixer into a plugin.</li> <li>Use builtin surfaces for meshes created in the editor.</li> <li>Migrated to latest <code>tinyaudio</code>.</li> <li>Removed hardcoded ui widgets constructors. It replaced with user-defined constructors via <code>ConstructorProvider</code> trait.</li> <li>Sort menu items in alphabetical order in creation menus.</li> <li>Replaced hardcoded ui style variables with configurable styles.</li> <li>Make tooltips invisible for hit test.</li> <li>Move the log panel to <code>fyrox-ui</code>.</li> <li>Keep the editor running until the active popup is fully shown.</li> <li>Change the default path of file browser to <code>./</code>.</li> <li>Disable log file by default. The log file could be undesirable in some cases, and now it is off by default and can be
enabled by <code>Log::set_file_name/set_file</code> in <code>fn main</code>.</li> <li>Explicit api to change the log file.</li> <li>Replaced proprietary Arial font with Roboto in the editor.</li> <li>Do not precompile built-in shaders on engine start.
<ul><li>It is faster to compile them on-demand.</li> <li>On WebAssembly such compilation could take 10–15 seconds.</li></ul></li> <li>Detached texture-related code to separate crate. It allows attaching it to <code>fyrox-ui</code> to use textures directly without
using hacky <code>UntypedResource</code>.</li> <li>Use TextureResource directly in ui code where possible - removes redundant juggling with untyped↔typed conversions.</li> <li>Force <code>Image</code> widget to use texture size on measurement stage - removes "surprising effect" with collapsed image, if
width/height is not set explicitly.</li> <li>Audio initialization errors non-fatal now. It allows running the engine in environments without proper audio output
support.</li> <li>Print editor version in the window title.</li> <li>Print editor version in the log on start.</li> <li>Replace the hardcoded version of the engine with the one from Cargo.toml. This is a semi-reliable solution, but much
better than having the hardcoded version.</li> <li>Close projection (2d/3d) selector on selection.</li> <li>Use toggle button for <code>track selection</code> in the world viewer.</li> <li>Put the search bar of the world viewer on the same row with other buttons.</li> <li>Moved <code>load_image</code> to <code>fyrox-ui</code> utils.</li></ul> <h2 id="fixed"> Fixed</h2> <ul><li>Fixed blurry fonts.</li> <li>Significantly improved editor performance.</li> <li>Improved joint stability after migration to the latest Rapier physics.</li> <li>Use z index from the respective message.</li> <li>Fixed crash when trying to change window title using the respective message.</li> <li>Fixed procedural meshes serialization.</li> <li>Fixed inspector syncing when replacing the selected object with another type.</li> <li>Fixing Rect tests in fyrox-math.</li> <li><code>transmute_vec_as_bytes</code> soundness fix.</li> <li>Fixed crash when trying to drag'n'drop non-texture in texture field.</li> <li>Refresh asset browser after asset deletion.</li> <li>Better validation for colliders.</li> <li>Support for chained texture nodes in fbx - fixes normal map import on FBX files made in latest 3ds max/Maya/etc.</li> <li>Watch for changes in the current directory and refresh asset browser content.</li> <li>Fixed potential crash when cloning ui nodes.</li> <li>Fixed tool installation check in project exporter.
<ul><li>Do not try to install already installed tools.</li> <li>Prevents accessing the network when there's no actual need.</li></ul></li> <li>Fixed redundant texture binding if it is already bound to pipeline.</li> <li>Discard scaling from rotation matrix before passing it to bounding shape - fixes clipping issues of light sources.</li> <li>Do not skip light scatter rendering even if there's no fragments lit. It fixes flashing of light scattering.</li> <li>Fixed shadow map lod selection condition.</li> <li>Speed up access to animation curve data.</li> <li>Use <code>ImmutableString</code> in <code>ValueBinding</code> to make it smaller results in faster copying (32 bytes vs. 16 bytes).</li> <li>Prevent render targets from registering multiple times in texture cache.</li> <li>Improved performance of render data collection.</li> <li>Drop inherited <code>RUSTFLAGS</code> for project exporter child processes.</li> <li>Fixed crash when rendering large bundles.</li> <li>Do not reallocate gpu buffer if there's enough space for data already.</li> <li>Ignore buffer write commands when the data is empty.</li> <li>Set glsl es precision to <code>highp</code>.</li> <li>Fixed an invalid editor window size on second startup at the hidpi display.</li> <li>Ensure vector images have a set size.</li> <li>Fix crash on macOS in notify crate when the path is set first time.</li> <li>Reduced code bloat by isolating fallback textures into their own struct.</li> <li>Fix wasm tests fails due to using of the deprecated PanicInfo.</li> <li>Discard scaling part when calculating light source bounding box.</li> <li>Excluded some non-animatable properties from property selector.</li> <li>Detached perf of hierarchical properties propagation from graph size.
<ul><li>Graph now updates hierarchical properties only for ones that actually changed.</li> <li>Significantly improves performance in static scenes.</li></ul></li> <li>Prevent redundant global transform update for 2d rigid bodies.</li> <li>Fixed "teleportation" bug (when a scene node was located at world's origin for one frame and then teleports back
where it should be).</li> <li>Prevent potential nan in <code>vector_to_quat</code>.</li> <li>Fixed convergence in reverb sound effect.</li> <li>Fixed root motion jitter on looping animations - loop boundaries were handled incorrectly, thus leading to error
accumulation that led to annoying jitter after some iterations.</li> <li>Fixed visible borders around point lights.</li> <li>Reduced code bloat in the engine internals.</li> <li>Fixed transform syncing of colliders.</li> <li>Fixed <code>Inspector</code> widget syncing issues.</li> <li>Fixed crash when deleting multiple animation tracks at once.</li> <li>Fix for UI layout, including Grid and Text.</li> <li>Fixed crash when trying to fetch intersections from a deleted collider.</li> <li>Fixed crash when trying to collect animation events without a root state.</li> <li>Fixed crash when using <code>accurate_world_bounding_box</code> on some meshes - it would crash if a mesh has no position/bone
indices/bone weights attributes in its vertex buffer.</li> <li>Fixed name of ragdoll joint generated by ragdoll wizard.</li> <li>Improved overall editor performance and ui nodes linking in particular.</li> <li>Prevent redundant syncing of the editor settings window - saves ~10% of time.</li> <li>Prevent the editor from loading the same texture over and over again.</li> <li>Fixed keyboard navigation for tree root - fixes annoying issue which causes keyboard focus to stick at tree root.</li> <li>Fixed camera preview panel size.</li> <li>Fixed deletion of some widgets.</li> <li>Fixed arrow visibility of menu item when dynamically changing its items.</li> <li>Fixed <code>MenuItem</code> performance issues.</li> <li>Fixed syncing of material editor shader field.</li> <li>Added <code>fyrox-build-tools</code> crate which essentially contains build tools from the editor.</li> <li>Fixed incorrect texture bindings invalidation - caused weird bug with incorrect textures applied to some objects (very
noticeable in the ui after resizing the window).</li> <li>Use mip mapping for icons in the editor to smooth icons in the editor.</li> <li>Fixed background color "leaking" during <code>Border</code> widget rendering.</li> <li>Fixed syncing bug of R coordinates for volume textures.</li> <li>Fixed transform order in visual transform calculation.</li> <li>Fixed incorrect memory alignment when deserializing <code>BinaryBlob</code>.</li> <li>Fixed crash when using nine-patch widget without a texture.</li> <li>Fixed crash when dropping non-texture resource on texture field.</li></ul> <h2 id="removed"> Removed</h2> <ul><li>Removed redundant data hash calculation in textures.</li> <li>Removed redundant field from render data bundle - <code>is_skinned</code> flag makes no sense, because it could be derived
from bone matrix count anyway and it is always defined on the per-instance basis, not per-bundle.</li> <li>Remove redundant decal layer index from mesh/terrain/render the data bundle. These are residuals from before
custom material era, it makes no sense now since decal layer index is defined in materials and these fields simply had
no effect.</li> <li>Removed depth offset.
<ul><li>It could be done with shaders.</li> <li>Removed because it adds unnecessary projection matrix juggling for each rendered instance.</li></ul></li> <li>Removed implicit blend shapes storage passing to material shaders - it is now controlled directly from <code>Mesh</code> node,
and it creates temp material to pass blend shape storage explicitly.</li> <li>Removed <code>PersistentIdentifier</code> and <code>MatrixStorageCache</code>.</li> <li>Removed <code>cast_shadows</code> property from <code>BaseLight</code> - this property at some point started to be redundant, because <code>Base</code>
already has such property and the one in <code>BaseLight</code> must be deleted to prevent confusion.</li> <li>Remove an incorrect error message in the animation editor.</li> <li>Removed <code>Node::query_component_ref/mut</code>.
<ul><li>It duplicates existing functionality.</li> <li>Replaced with <code>SceneGraphNode::component_ref/mut</code>.</li></ul></li> <li>Removed redundant boxing when applying animation values - makes animation of arbitrary numeric properies significantly
faster.</li></ul></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/82.d1d00301.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tile-based Occlusion Culling]]></title>
            <description><![CDATA[This article explains the algorithm of tile-based occlusion culling.]]></description>
            <link>https://fyrox.rs/blog/post/tile-based-occlusion-culling/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/tile-based-occlusion-culling/</guid>
            <pubDate>Sun, 29 Sep 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">Tile-based Occlusion Culling</h1> <div class="content__default"><p>Occlusion culling is a visibility test, that determines if an object is visible or not. There are many different
techniques for occlusion culling with their own pros and cons, and this article introduces another approach for
occlusion culling. It is fast, efficient, and does not require compute shaders and could work on quite old hardware
(including mobile devices).</p> <h2 id="short-explanation"> Short Explanation</h2> <p>TL;DR. The main idea is to split the screen into multiple tiles, find which object belongs to which tile, render bounding
boxes into a frame buffer with depth buffer from previous frame, find bit index for every pixel in tile for every
bounding box and merge them all using additive blending. Downscale this "visibility buffer" and read it back on CPU and
cache the visibility info for the next frame.</p> <h2 id="algorithm-overview"> Algorithm Overview</h2> <p>Occlusion queries are well known occlusion culling mechanism, yet it has significant downsides that limits its usage:</p> <ol><li>Quite significant lag and visibility info could be obtained with <em>at least</em> one frame delay.</li> <li>Cannot be used with instancing, thus requires separate draw call for each visibility test.</li></ol> <p>The latter is the major downside of occlusions queries, that could easily kill performance instead of improving it.
The tile-based occlusion query algorithm was designed specifically to bypass the lack of instancing and to reduce the lag
to guaranteed one frame.</p> <p>The major steps of the algorithm includes:</p> <ol><li>Perform the initial frustum culling to find objects on screen, that needs to be rendered.</li> <li>Create a frame buffer with depth buffer from the previous frame and one <code>RGBA8</code> color target.</li> <li>Divide the screen using a set tiles of fixed size (for example, 16x16 pixels). Sort the objects list from back-to-front
and project bounding box (AABB) of each object onto the screen and write its index into the tiles it intersects.</li> <li>Take the first 32 (more on that later) object indices from the list of each tile and upload them into special <code>R32UI</code>
texture buffer of <code>((1 + 32) * wTileCount, hTileCount)</code> in size. First element of each tile should contain the amount of objects
in it.</li> <li>Collect all the world-space matrices of each AABB into a buffer (could be a <code>RGBA32F</code> texture or, a vertex buffer, etc.
depends on the target hardware).</li> <li>Enable additive blending and render AABBs of every object using instanced rendering in the frame buffer.</li> <li>In the fragment shader, find corresponding position (1 of 32) of the instance in respective tile buffer and raise one of
32 available bits in pixel. Since we have additive blending enabled, this bit will be combined with all other bits from
other objects in the tile.</li> <li>Create separate frame buffer with one color attachment of <code>R32UI</code> format of <code>(wTileCount, hTileCount)</code> in size and merge
all the bits from each pixel of corresponding tile into one pixel.</li> <li>Read this optimized visibility buffer back on CPU and using the tiles, map each bit to object index and cache this
visibility info for the next frame.</li></ol> <p>The next sections will explain each major step in details.</p> <h2 id="frustum-culling-and-sorting"> Frustum Culling and Sorting</h2> <p>Frustum culling must be applied to the set of objects, to prevent GPU from doing unnecessary work and to prevent potential
issues when projecting AABBs of object on screen. Sort the list of visible objects from closest to farthest.</p> <h2 id="frame-buffers"> Frame Buffers</h2> <p>There are two frame buffers used in this algorithm:</p> <ol><li>Visibility buffer - full screen RGBA8 texture as a color attachment + depth/stencil texture with D24S8 format. The depth
buffer must be filled with the depth from previous frame.</li> <li>Optimization buffer - <code>(wTileCount, hTileCount)</code> R32UI texture as a color attachment + no depth buffer.</li></ol> <h2 id="tiles-preparation"> Tiles Preparation</h2> <p>When all the frame buffers are prepared, we can prepare the tiles. All we need to do is to uniformly fill the screen with tiles and
find a set of objects in each tile. It is very important to have the list of objects to be sorted back-to-front, this way the
tiles will be filled with object indices from closest to farthest. Since we'll be using axis-aligned bounding boxes for the
visibility determination, all we need to do is to project the AABB of each object on screen plane and find the range of tiles
that intersects with the projected bounds. To project an AABB on screen all we need to do is to project all 8 corners of it on
the screen plane and find min and max points on the screen. This could be done like so:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">screen_space_rect</span><span class="token punctuation">(</span>
    aabb<span class="token punctuation">:</span> <span class="token class-name">AxisAlignedBoundingBox</span><span class="token punctuation">,</span>
    view_projection<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Matrix4</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    viewport<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Rect</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Rect</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> min <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">::</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">f32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> max <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">::</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">f32</span><span class="token punctuation">::</span><span class="token constant">MIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> corner <span class="token keyword">in</span> aabb<span class="token punctuation">.</span><span class="token function">corners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> clip_space <span class="token operator">=</span> view_projection <span class="token operator">*</span> <span class="token class-name">Vector4</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>corner<span class="token punctuation">.</span>x<span class="token punctuation">,</span> corner<span class="token punctuation">.</span>y<span class="token punctuation">,</span> corner<span class="token punctuation">.</span>z<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> ndc_space <span class="token operator">=</span> clip_space<span class="token punctuation">.</span><span class="token function">xyz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> clip_space<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> normalized_screen_space <span class="token operator">=</span>
            <span class="token class-name">Vector2</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndc_space<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> ndc_space<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        normalized_screen_space<span class="token punctuation">.</span>x <span class="token operator">=</span> normalized_screen_space<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        normalized_screen_space<span class="token punctuation">.</span>y <span class="token operator">=</span> normalized_screen_space<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> screen_space_corner <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>normalized_screen_space<span class="token punctuation">.</span>x <span class="token operator">*</span> viewport<span class="token punctuation">.</span>size<span class="token punctuation">.</span>x <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">+</span> viewport<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>normalized_screen_space<span class="token punctuation">.</span>y <span class="token operator">*</span> viewport<span class="token punctuation">.</span>size<span class="token punctuation">.</span>y <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">+</span> viewport<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> screen_space_corner<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> min<span class="token punctuation">.</span>x <span class="token punctuation">{</span>
            min<span class="token punctuation">.</span>x <span class="token operator">=</span> screen_space_corner<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> screen_space_corner<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> min<span class="token punctuation">.</span>y <span class="token punctuation">{</span>
            min<span class="token punctuation">.</span>y <span class="token operator">=</span> screen_space_corner<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> screen_space_corner<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> max<span class="token punctuation">.</span>x <span class="token punctuation">{</span>
            max<span class="token punctuation">.</span>x <span class="token operator">=</span> screen_space_corner<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> screen_space_corner<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> max<span class="token punctuation">.</span>y <span class="token punctuation">{</span>
            max<span class="token punctuation">.</span>y <span class="token operator">=</span> screen_space_corner<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> width <span class="token operator">=</span> max<span class="token punctuation">.</span>x <span class="token operator">-</span> min<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    <span class="token keyword">let</span> height <span class="token operator">=</span> max<span class="token punctuation">.</span>y <span class="token operator">-</span> min<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    <span class="token class-name">Rect</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span>x<span class="token punctuation">,</span> min<span class="token punctuation">.</span>y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>At first we transforming an AABB corner into clip space, then doing perspective divide using absolute value fourth component of
the projected vector. Absolute value here is very important - when the point is behind near clipping plane we still need to know
its projected position and if we'd use signed value, the projection would flip and the screen space rect would be incorrect.
It is also important to clamp the coordinates of the points in viewport bounds, because we'll use them to calculate indices of
the tiles.</p> <p>Now when we know screen space rectangle of AABB, we need to find which tiles are intersecting with the rectangle. We could just
iterate over each tile and check for intersection, but this is too slow and there's much faster solution. All we need to know
position of tiles where min and max point of the rectangle are:</p> <p><img src="https://fyrox.rs/assets/occlusion/interval.svg" alt="interval"></p> <p>This could be calculated by simply dividing the coordinates of each point by the tile size. This way we're essentially transforming
screen space coordinates into tile space. All we need to do is to iterate in <code>min_y..max_y</code> and <code>min_x..max_x</code> ranges and write object
index and its average depth (more about this below) to the respective tiles:</p> <div class="language-rust extra-class"><pre class="language-rust"><code> <span class="token keyword">for</span> <span class="token punctuation">(</span>object_index<span class="token punctuation">,</span> object<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>objects_to_test<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> object_index <span class="token operator">=</span> object_index <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>node_ref<span class="token punctuation">)</span> <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">try_get</span><span class="token punctuation">(</span><span class="token operator">*</span>object<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> aabb <span class="token operator">=</span> node_ref<span class="token punctuation">.</span><span class="token function">world_bounding_box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token function">screen_space_rect</span><span class="token punctuation">(</span>aabb<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>view_projection<span class="token punctuation">,</span> viewport<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> debug_renderer<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token namespace">debug_renderer<span class="token punctuation">::</span></span><span class="token function">draw_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> lines<span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token constant">WHITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">screen_space_to_tile_space</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left_top_corner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">screen_space_to_tile_space</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right_bottom_corner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> y <span class="token keyword">in</span> min<span class="token punctuation">.</span>y<span class="token punctuation">..=</span>max<span class="token punctuation">.</span>y <span class="token punctuation">{</span>
        <span class="token keyword">let</span> offset <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>w_tiles<span class="token punctuation">;</span>
        <span class="token keyword">for</span> x <span class="token keyword">in</span> min<span class="token punctuation">.</span>x<span class="token punctuation">..=</span>max<span class="token punctuation">.</span>x <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>tiles<span class="token punctuation">.</span>tiles<span class="token punctuation">[</span>offset <span class="token operator">+</span> x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>object_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Once the tiles are filled, we need to sort object list of each tile by the average depth and put first 32 objects to plain array:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Default)]</span>
<span class="token attribute attr-name">#[repr(C)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">GpuTile</span> <span class="token punctuation">{</span>
    objects<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u32</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token keyword">mut</span> gpu_tiles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">GpuTile</span><span class="token punctuation">::</span>default<span class="token punctuation">;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>tiles<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>tile<span class="token punctuation">,</span> gpu_tile<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>tiles<span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>gpu_tiles<span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tile<span class="token punctuation">.</span>objects
        <span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span>depth<span class="token punctuation">.</span><span class="token function">partial_cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">.</span>depth<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Less</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    gpu_tile<span class="token punctuation">.</span>objects <span class="token operator">=</span> tile
        <span class="token punctuation">.</span>objects
        <span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>obj<span class="token closure-punctuation punctuation">|</span></span> obj<span class="token punctuation">.</span>index<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">u32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">;</span> <span class="token constant">MAX_BITS</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token constant">MAX_BITS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ArrayVec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token constant">MAX_BITS</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">into_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>All that is left is to upload these <code>gpu_tiles</code> to a rectangular <code>R32UI</code> texture of <code>(32 * wTiles, hTiles)</code> size.</p> <h2 id="rendering"> Rendering</h2> <p>Now onto the core of the algorithm - how the visibility is actually determined. At first let's look at this image:</p> <p><img src="https://fyrox.rs/assets/occlusion/bits.svg" alt="interval"></p> <p>The idea is very simple - since each tile could contain only 32 objects, we could give each object its own bit mask
and combine the masks using additive blending when rendering AABBs of objects. We only need to find the appropriate
bit mask in the fragment shader, it could be done like so:</p> <div class="language-c extra-class"><pre class="language-c"><code>uniform <span class="token keyword">int</span> tileSize<span class="token punctuation">;</span>
uniform usampler2D tileBuffer<span class="token punctuation">;</span>
uniform <span class="token keyword">float</span> frameBufferHeight<span class="token punctuation">;</span>

out vec4 FragColor<span class="token punctuation">;</span>

flat in uint objectIndex<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>gl_FragCoord<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> tileSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>frameBufferHeight <span class="token operator">-</span> gl_FragCoord<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> tileSize<span class="token punctuation">;</span>

    <span class="token keyword">int</span> bitIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tileDataIndex <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">33</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">texelFetch</span><span class="token punctuation">(</span>tileBuffer<span class="token punctuation">,</span> <span class="token function">ivec2</span><span class="token punctuation">(</span>tileDataIndex<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> objectsListStartIndex <span class="token operator">=</span> tileDataIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uint pixelObjectIndex <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token function">texelFetch</span><span class="token punctuation">(</span>tileBuffer<span class="token punctuation">,</span> <span class="token function">ivec2</span><span class="token punctuation">(</span>objectsListStartIndex <span class="token operator">+</span> i<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pixelObjectIndex <span class="token operator">==</span> objectIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bitIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        FragColor <span class="token operator">=</span> <span class="token function">vec4</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        uint outMask <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> r <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span>outMask <span class="token operator">&amp;</span> <span class="token number">255u</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> g <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token punctuation">(</span>outMask <span class="token operator">&amp;</span> <span class="token number">65280u</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token punctuation">(</span>outMask <span class="token operator">&amp;</span> <span class="token number">16711680u</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token punctuation">(</span>outMask <span class="token operator">&amp;</span> <span class="token number">4278190080u</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">;</span>
        FragColor <span class="token operator">=</span> <span class="token function">vec4</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>At first, we're calculating the tile position the current fragment is in. Then fetching the size of the buffer of the tile
and start searching for the current object index in the buffer. The index of the object in the list will be the index of
the corresponding bit. If the object index is found, we packing the mask in RGBA8 pixel using a bunch of bitwise operations.</p> <h2 id="optimization"> Optimization</h2> <p>Once the visibility buffer is rendered, we can optimize it before sending the data back to CPU side. Remember, that we have
the buffer size equal to the size of the screen and since modern resolutions are quite high (4k+ in some cases) the amount
of data that needs to be transferred and processed on CPU is huge. What the optimization means? The visibility buffer contains
visibility info of 32 objects per pixel - each bit of 32-bit integer could be either 0 (invisible) or 1 (visible). We also
know that our tile have fixed size and it also can contain only 32 objects. Why not just collapse a bunch of pixels in each
tile into a single pixel? All we need to do is to apply <code>OR</code> logical operation for every pixel in a tile and essentially
combine all of them into a single 32 bit unsigned integer. It could be done like so:</p> <div class="language-c extra-class"><pre class="language-c"><code>uniform <span class="token keyword">int</span> tileSize<span class="token punctuation">;</span>
uniform sampler2D visibilityBuffer<span class="token punctuation">;</span>

out uint optimizedVisibilityMask<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tileX <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>gl_FragCoord<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tileY <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>gl_FragCoord<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> beginX <span class="token operator">=</span> tileX <span class="token operator">*</span> tileSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> beginY <span class="token operator">=</span> tileY <span class="token operator">*</span> tileSize<span class="token punctuation">;</span>

    <span class="token keyword">int</span> endX <span class="token operator">=</span> <span class="token punctuation">(</span>tileX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> tileSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> endY <span class="token operator">=</span> <span class="token punctuation">(</span>tileY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> tileSize<span class="token punctuation">;</span>

    <span class="token keyword">int</span> visibilityMask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> beginY<span class="token punctuation">;</span> y <span class="token operator">&lt;</span> endY<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> beginX<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> endX<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ivec4 mask <span class="token operator">=</span> <span class="token function">ivec4</span><span class="token punctuation">(</span><span class="token function">texelFetch</span><span class="token punctuation">(</span>visibilityBuffer<span class="token punctuation">,</span> <span class="token function">ivec2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            visibilityMask <span class="token operator">|=</span> <span class="token punctuation">(</span>mask<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mask<span class="token punctuation">.</span>b <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mask<span class="token punctuation">.</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> mask<span class="token punctuation">.</span>r<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    optimizedVisibilityMask <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>visibilityMask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>optimizedVisibilityMask</code> must be a <code>R32UI</code> texture and the <code>visibilityBuffer</code> is the full screen texture that was produced
by the previous step.</p> <h2 id="read-the-results-and-cache"> Read the Results and Cache</h2> <p>The optimized visibility buffer can be transferred back to RAM using standard reading mechanism of your GAPI. All we need to do
is to use that buffer to prepare the visibility cache.</p> <p>Keep in mind, that we're always 1 frame behind and thus we must cache the results of visibility test somewhere, so it can be
used in the next frame. A good option is to use a hash map, but what if there's no visibility info for an object? In this
case it must be considered visible. It is needed because if an observer moves or rotates, some objects will inevitably get on
the screen and we must renderer them. Usually this is not an issue, because two adjacent frames keeps some level of coherency
and in vast majority of cases it is more than 90%.</p> <h2 id="limitations-and-possible-improvements"> Limitations and Possible Improvements</h2> <p>The described occlusion culling algorithm has some issues, but all of them aren't critical and could be solved:</p> <ol><li>In some cases 32 objects per pixel is not enough - this could lead to popping effects in distant objects when multiple
objects occupy the same tiles. This issue could be fixed in two major ways: either consider all the objects outside of the range
as visible, or add more precision. The first option could lead to redundant draw calls and thus may decrease performance.
The second option could be implemented in a few ways: either change pixel format to <code>RGBA16</code> and this will effectively double
the maximum amount of objects or add "depth peeling" and create 1 or more additional layers. These two approaches could
be combined. There's no best approach - adding more layers or increasing precision will lead to higher memory usage and also
could lead to memory bandwidth pressure, which is an issue on low-end PCs and always an issue on mobile platforms. As a last
potential fix to this issue is to simply change the tile size, but keep in mind that it has its own downsides - too small tile
will lead to increased load of the CPU and too large will lead to even worse popping.</li> <li>VRAM -&gt; RAM data transfer - this always has some performance penalty, but it must be measured. If it overweighs the speedup
of occlusion culling, then you could use the visibility buffer directly on GPU, but it could be done on modern hardware only.</li></ol></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/81.fbc1b922.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fyrox Game Engine 0.34]]></title>
            <description><![CDATA[Fyrox 0.34 includes code hot reloading, project exporter, preview generation for assets, GLTF support, batching and many more]]></description>
            <link>https://fyrox.rs/blog/post/fyrox-game-engine-0-34/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/fyrox-game-engine-0-34/</guid>
            <pubDate>Mon, 20 May 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">Fyrox Game Engine 0.34</h1> <div class="content__default"><p>I'm happy to announce that Fyrox 0.34 has been released! Fyrox is a modern game engine written in Rust, it helps
you to create 2D and 3D games with low effort using native editor; it is like Unity, but in Rust. This release includes
code hot reloading, project exporter, assets preview generation, UI prefabs, GLTF support, static and dynamic batching, keyboard
navigation, animation support for UI, editor style and usability improvements and many more.</p> <h2 id="how-to-upgrade"> How to Upgrade</h2> <p>At first, install the latest <code>fyrox-template</code> by executing the following command: <code>cargo install fyrox-template --force</code>.
Then execute this: <code>fyrox-template upgrade --version=latest</code>. The amount of breaking changes in the code is quite low and
you can use <a href="https://github.com/fyrox-book/fyrox-book.github.io/commit/2b82494e96155f769f53a1f3ae947f6a46e2384c" target="_blank" rel="noopener noreferrer">this commit<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>
as a guide to fix an existing project.</p> <h2 id="code-hot-reloading"> Code Hot Reloading</h2> <p>Code hot reloading is a new feature of the engine, that allows you to recompile the game while it is running and the new
version is then automatically loaded in the running game. This feature is super useful for rapid prototyping, because it
turns Rust in some sort of a "scripting" language with close-to-zero iterations overhead. Since only the game code is
reloaded, all heavy assets remains loaded in the memory and there's no need do the typical chain of actions: "close game
-&gt; write code -&gt; compile -&gt; run -&gt; initialize -&gt; load assets -&gt; setup required conditions -&gt; test", all you need to do
is to "write code -&gt; compile -&gt; test". In action it looks like this:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/vq6P3Npydmw" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>This feature makes game development in Rust much more fun, because you can focus on the actual game development and not
repeat all these redundant actions like a robot.</p> <p>Huge respect to <a href="https://github.com/zakarumych" target="_blank" rel="noopener noreferrer">@zakarumych<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>, who did awesome research job and also implemented hot reloading
in his <a href="https://github.com/zakarumych/nothing" target="_blank" rel="noopener noreferrer">game engine<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> prototype (?).</p> <h3 id="how-to-use"> How To Use</h3> <p>At first, install the latest <code>fyrox-template</code> by executing the following command: <code>cargo install fyrox-template --force</code>.
Generate a project <a href="https://fyrox-book.github.io/beginning/scripting.html" target="_blank" rel="noopener noreferrer">as usual<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> and do the following instructions.</p> <blockquote><p>⚠️ If you have an existing project from one of the previous versions of the engine, the best way to add support for
CHR is to re-generate the entire project and copy all the assets and game code in the new project. CHR requires very
specific project structure and a small mistake in it could lead to incorrect behavior.</p></blockquote> <p>CHR is quite simple to use - a project generated by <code>fyrox-template</code> already has all that is needed for hot reloading.
Yet, it requires some bootstrapping to start using it. At first, you need to compile your game plugin using the following
command:</p> <div class="language-shell extra-class"><pre class="language-shell"><code><span class="token assign-left variable">RUSTFLAGS</span><span class="token operator">=</span><span class="token string">"-C prefer-dynamic=yes"</span> <span class="token function">cargo</span> build <span class="token parameter variable">--package</span> game_dylib --no-default-features <span class="token parameter variable">--features</span><span class="token operator">=</span><span class="token string">"dylib-engine"</span> <span class="token parameter variable">--profile</span> dev-hot-reload
</code></pre></div><p>This command will compile the engine DLL (<code>fyrox_dylib.dll/so</code>) and the plugin DLL (<code>game_dylib.dll/so</code>). Please note the
mandatory environment variable <code>RUSTFLAGS="-C prefer-dynamic=yes"</code>. It forces the compiler to link standard library
dynamically. It is very important, because if not set, the standard library will be duplicated in game plugin and engine,
which will lead to subtle bugs.</p> <blockquote><p>⚠️ Environment variables can be set in a different ways, depending on your OS. On Linux it simply prepends the actual
command, on Windows it requires a <a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/set_1#examples" target="_blank" rel="noopener noreferrer">separate command<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.
Other OSes can have their own ways of setting environment variables.</p></blockquote> <p>The next step is to compile the editor in CHR mode. To do that, run the following command:</p> <div class="language-shell extra-class"><pre class="language-shell"><code><span class="token assign-left variable">RUSTFLAGS</span><span class="token operator">=</span><span class="token string">"-C prefer-dynamic=yes"</span> <span class="token function">cargo</span> run <span class="token parameter variable">--package</span> editor --no-default-features <span class="token parameter variable">--features</span><span class="token operator">=</span><span class="token string">"dylib"</span> <span class="token parameter variable">--profile</span> dev-hot-reload
</code></pre></div><p>This command will compile the editor in CHR mode and run it. After this, all you need to do is to select build profile
in the editor to be <code>Debug (HR)</code>:</p> <p><img src="https://fyrox.rs/assets/0.34/build_profile.png" alt="build profiles"></p> <p>Once that's done you can run your game by clicking on the green <code>Play</code> button. You can switch between CHR and normal mode
(static linking) at any time. Keep in mind, that if you run the editor in CHR mode, it will also reload all changed plugins.</p> <h3 id="build-profiles"> Build Profiles</h3> <p>CHR uses separate build profiles: <code>dev-hot-reload</code> (no optimizations) and <code>release-hot-reload</code> (with optimizations).
Separate build profiles allows you to quickly switch between statically linked plugins and code hot reloading. This could
be useful if you're experiencing some issues with hot reloading (see next section for more info).</p> <h3 id="stability"> Stability</h3> <p>CHR is very new and experimental feature of the engine, it is based on wildly unsafe functionality which could result
in memory corruption, subtle bugs, etc. If you experience weird behaviour of your game after hot reloading, run the
game in normal (static linking) mode instead. Please report any bugs in the <a href="https://github.com/FyroxEngine/Fyrox/issues" target="_blank" rel="noopener noreferrer">issue tracker<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>
of the engine. CHR was tested on two relatively large games - <a href="https://github.com/mrDIMAS/FishFolly" target="_blank" rel="noopener noreferrer">Fish Folly<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> and
<a href="https://github.com/mrDIMAS/StationIapetus" target="_blank" rel="noopener noreferrer">Station Iapetus<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>. You can download these projects and try CHR yourself.</p> <h3 id="technical-details-and-limitations"> Technical Details and Limitations</h3> <p>CHR is using standard operating system (OS) mechanism of shared libraries (DLL for short). Pretty much any OS can load
native code into a running process dynamically from a DLL. Any dynamically loaded library can then be unloaded from the
process memory. This gives a perfect opportunity to reload game code in runtime. It may sound quite easy, but on practice
there are a lot of issues.</p> <h4 id="plugin-entities-and-reloading"> Plugin Entities and Reloading</h4> <p>Plugins can supply the engine with a predefined set of entities (such as scripts, etc.). These entities are serialized into
a memory blob before the plugin itself is unloaded. When all plugins are reloaded, this memory blob is used to restore
the state of plugin entities. That being said, pretty much all plugin entities must be serializable (implement <code>Visit</code> trait).</p> <h4 id="trait-objects"> Trait Objects</h4> <p>Trait object are very problematic with hot reloading, because internally trait objects contains vtable with function
pointers. These pointers can be easily invalidated if the plugin is unloaded. This applies even to engine trait objects,
if they're created directly from the plugin side. The only way to bypass this issue is to use special methods from the
engine to create its trait objects. It is possible to add a lint to clippy to check for such cases (see the respective
<a href="https://github.com/rust-lang/rust-clippy/issues/12819" target="_blank" rel="noopener noreferrer">issue<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</p> <h4 id="dangling-objects"> Dangling Objects</h4> <p>Current plugin system tries its best to remove all plugin's entities from the engine internals before reloading plugins.
However, some objects could be overlooked by this system, which could result in crash or memory corruption. Current
approach of preventing to having dangling objects is based on built-in reflection system - the plugin system iterates
across all fields of every object and checks its assembly name. If the assembly name match the plugin's assembly name,
then this object must be deleted before the plugin is unloaded.</p> <h4 id="non-serializable-entities"> Non-serializable Entities</h4> <p>Not every object can be serialized, and in this case the current plugin system calls a special method to restore such
non-serializable entities after hot reloading. Such entities could include server connections, job queues, etc.</p> <h2 id="editor-style-and-usability-improvements"> Editor Style and Usability Improvements</h2> <p>The editor has got a new look, that makes it more attracting and pleasant to work with:</p> <p><img src="https://fyrox.rs/assets/0.34/editor.png" alt="editor"></p> <h2 id="multi-script-support"> Multi-Script Support</h2> <p>Scene nodes can now have more than one script assigned. This greatly increases flexibility of scripting by allowing you
to mix multiple scripts on the same node. Scenes made with previous "one node-one script" approach can still be loaded
without any issues (backward compatibility is preserved).</p> <p>You can assign scripts from both the editor and code. In the editor is multiple scripts looks like this:</p> <p><img src="https://fyrox.rs/assets/0.34/multiscript.png" alt="multiscript"></p> <p>To add a new script, click on the <code>+</code> button and the select the script type from the dropdown list. Execution order of
the script methods is the same as their location in the list.</p> <h2 id="project-exporter"> Project Exporter</h2> <p>The editor now offers a new tool, that builds your project for various platforms (PC, WebAssembly, Android) and creates
packages that are ready for deployment. This automated build system even allows you to build, upload and run your game
directly on your smartphone in a few clicks.</p> <p><img src="https://fyrox.rs/assets/0.34/project_export.png" alt="project export"></p> <p>At first, this tool installs required build tools, then it scans for used assets in the specified folders and clones them
in the output folder. Then it compiles your game in release mode and clones executable file into the output folder. It can
also run the final build if needed. The latter option is very useful for Android builds and basically allows you to test
your games on a smartphone rapidly.</p> <p>Project exporter is still a new, highly experimental tool, yet it could save heaps of time by removing a lot of manual work.
For now it may lack some targets for specific environments, but thankfully it could be fixed very easily.</p> <h2 id="assets-preview-generation"> Assets Preview Generation</h2> <p>The editor now generates previews for assets, which helps finding desired one quickly. Previously you'd need to click
on each asset to see its preview in the asset previewer. Asset preview works with pretty much any asset that has sensible
graphical representation. This is how it looks for prefabs:</p> <p><img src="https://fyrox.rs/assets/0.34/asset_preview.png" alt="asset preview"></p> <p>Sound sources shows the waveform, it is not very informative as prefabs preview, but still can give some info about nature
of the source:</p> <p><img src="https://fyrox.rs/assets/0.34/sound_source_preview.png" alt="sound source preview"></p> <p>The same applies for fonts, user interfaces, etc. Asset previews could take some time render and on some machines it could
go out of control by taking too much time for rendering. If this will happen, you can always disable this feature in the
editor settings.</p> <h2 id="gltf-support"> GLTF Support</h2> <p>GLTF support was one of the requested features and it is finally implemented (kudos to <a href="https://github.com/b-guild" target="_blank" rel="noopener noreferrer">b-guild<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).
Use <code>gltf</code> feature to enable the GLTF loader.</p> <h2 id="static-and-dynamic-batching"> Static and Dynamic Batching</h2> <p>Static baching is a technique that merges multiple meshes with the same material into a larger one, thus significantly
reducing amount of draw calls on GPU, which in its turn increases rendering performance. This happens because each draw
call has a small overhead, and when there are thousands of draw calls, it could significantly affect performance.</p> <p>Dynamic batching is similar to static batching, but it works at each frame, merging specified meshes into a large one.
This feature could be useful in limited cases only, since it is effective only at meshes with low polygon count (tens to
hundreds of polygons).</p> <p>To use static/dynamic batching all you need to do is to create a root Mesh scene node and specify its batching node to be
Static or Dynamic. Next, you need to attach all the objects to it, which you want to be batched. The engine will do the
rest of the work for you.</p> <p><img src="https://fyrox.rs/assets/0.34/batching.png" alt="batching"></p> <p>It will automatically create a batch per each material in all descendants of the root mesh node and merge all the geometry
in an appropriate batch.</p> <h2 id="multiple-ui-instances"> Multiple UI Instances</h2> <p>Fyrox now supports multiple user interface instances. It was also possible before, but you'd have to manually create UI instances
and manage them appropriately, which is quite bug-prone. However, this is not the main reason why there are multiple UI support.
The main reason is code hot reloading, when the engine manages UI itself it can reload only a small portion of UI that comes from
a game plugin. In vast majority of cases there's no custom widgets and nothing will be reloaded at all, increasing code hot
reloading performance and reducing iteration times.</p> <h2 id="keyboard-navigation"> Keyboard Navigation</h2> <p>For a long time <code>fyrox-ui</code> framework didn't support keyboard navigation, which was quite annoying, since keyboard navigation
could save heaps of time when doing repetitive actions (such as filling in a series of input fields). Now <code>fyrox-ui</code> supports
various keyboard navigation techniques. For example, this is how Tab/Shift+Tab navigation looks in the Inspector:</p> <p><img src="https://fyrox.rs/assets/0.34/keyboard_navigation.gif" alt="keyboard navigation"></p> <p>Trees can now be traversed using arrow keys as well:</p> <p><img src="https://fyrox.rs/assets/0.34/tree_keyboard_navigation.gif" alt="tree keyboard navigation"></p> <h2 id="animations-in-ui"> Animations in UI</h2> <p><img src="https://fyrox.rs/assets/0.34/animation.gif" alt="animation"></p> <p>UI now supports animations, which is useful to be able create interactive user interfaces. UI animations uses the same animation
system that game scenes do with little to no differences. It is also possible to create state machines:</p> <p><img src="https://fyrox.rs/assets/0.34/absm.gif" alt="absm"></p> <p>State machines allows you to mix multiple animations into one.</p> <h2 id="grid"> Grid</h2> <p><img src="https://fyrox.rs/assets/0.34/grid.PNG" alt="grid"></p> <p>Game scenes now have a oXZ-oriented grid, each square cell of it has 1m in size. It could be useful for grid snapping and estimating
objects sizes by eye. The grid can be turned on/off in the editor settings.</p> <h2 id="animation-editor-improvements"> Animation Editor Improvements</h2> <p>It is now possible to select multiple curves at once in the animation editor, this makes editing much faster since you don't need to
switch between curves. You can also select a track and all its curves will be selected at once as well. Curves are also colored now:</p> <p><img src="https://fyrox.rs/assets/0.34/colored_curves.png" alt="colored curves"></p> <p>Background curve is also a new thing in the animation editor, it shows every other curve in the selected animation. It shown in pale
gray color.</p> <h2 id="ui-prefabs"> UI Prefabs</h2> <p>UI system now supports prefabs, which allows you to put common UI widgets into a separate UI scene and use it in some other.
This mechanism works the same as the one for game scenes. On practice it look like this:</p> <p><img src="https://fyrox.rs/assets/0.34/ui_prefab.png" alt="ui prefab"></p> <p>Each button here is a prefab (shown in purple-ish color in the world viewer) and the prefab itself looks like this:</p> <p><img src="https://fyrox.rs/assets/0.34/button_prefab.png" alt="button prefab"></p> <p>When you change such prefabs, its instances on other scenes will take the changes you've made automatically. This allows you
to build complex user interfaces from simple "blocks".</p> <h2 id="adaptive-scroll-bar"> Adaptive Scroll Bar</h2> <p><img src="https://fyrox.rs/assets/0.34/scroll_bar.gif" alt="adaptive scroll bar"></p> <p>Scroll bar's thumb size is now changes its size accordingly to the content size. Previously it had fixed size, which wasn't
informative and in some cases it was quite annoying to use in "tight" spaces.</p> <h2 id="world-viewer"> World Viewer</h2> <p>World Viewer now is able to reorder its items by simple drag'n'drop. This is especially useful in user interfaces, where the
order of widgets defines draw order. In action it looks like this:</p> <p><img src="https://fyrox.rs/assets/0.34/reorder.gif" alt="reorder"></p> <h2 id="shape-casting"> Shape Casting</h2> <p>Fyrox 0.34 allows to perform shape casting to check whether an arbitrary shape intersects with physical objects or not.
It is similar to ray casting, however it could be used to check if there's an obstacle along a given line segment, which could
be useful in AI.</p> <h2 id="grid-snapping-quick-access-panel"> Grid Snapping Quick Access Panel</h2> <p><img src="https://fyrox.rs/assets/0.34/grid_snapping.png" alt="grid snapping"></p> <p>Grid snapping exists in the engine for more than 3 years already, but it was hidden in editor settings and overall usability was
quite bad, simply because to enable it or change settings you'd need to open editor settings, find grid snapping section,
tweak settings, close the editor settings, try the new settings. Rinse and repeat if you need other settings. In the new version
all you need to do is to click onto magnet icon on the toolbar, set the required settings and that's pretty much all.</p> <h2 id="rendering-statistics"> Rendering Statistics</h2> <p><img src="https://fyrox.rs/assets/0.34/rendering_statistics.png" alt="rendering statistics"></p> <p>The editor now can show rendering statistics in a separate dockable panel, this information could be useful for optimization
needs.</p> <h2 id="scene-preview"> Scene Preview</h2> <p><img src="https://fyrox.rs/assets/0.34/wireframe.gif" alt="wireframe"></p> <p>You can switch between shaded and wire frame rendering modes directly from the scene previewer. Wire frame rendering mode could
be useful if you want to find something hidden behind walls or large objects.</p> <h2 id="asset-browser-performance"> Asset Browser Performance</h2> <p>For a long time searching in the asset browser was quite slow, turned out that it was <code>./target</code> folder with build artifacts.
Usually, it is located in your project's directory and it could contain tens of gigabytes and tens of thousands files. Asset
browser included this folder in searching and that's why it was horribly slow.</p> <h2 id="mesh-control-panel"> Mesh Control Panel</h2> <p>Mesh control panel helps you to perform various actions with meshes. For example you can create trimesh static colliders,
convex colliders, add rigid bodies, etc. The panel opens automatically when a mesh node is selected and it looks like this:</p> <p><img src="https://fyrox.rs/assets/0.34/mesh_control_panel.png" alt="mesh control panel"></p> <h2 id="reflection"> Reflection</h2> <p>Reflection system has gotten a small, yet very important feature (mostly for code hot reloading) - an ability to fetch assembly
name of anything that implements <code>Reflect</code> trait. This feature is used to scan scene content for plugin entities and unload
them.</p> <h2 id="full-list-of-changes"> Full List of Changes</h2> <p>The list is split into four sections for ease of reading and finding particular information.</p> <h3 id="added"> Added</h3> <ul><li>Code hot reloading for plugins.</li> <li>Ability to have multiple scripts on one scene node.</li> <li>Static and dynamic batching for meshes.</li> <li>Project exporter for automated deployment.</li> <li>Configurable build profiles for the editor.</li> <li>Ability to have multiple user interface instances.</li> <li>GLTF support (available via <code>gltf</code> feature).</li> <li>Keyboard navigation support in the UI.</li> <li>Preview generation for assets in the asset browser.</li> <li>Grid for the scene preview.</li> <li><code>fyrox-template</code> improvements to generate projects, that supports code hot reloading.</li> <li><code>AnimationPlayer</code> + <code>AnimationBlendingStateMachine</code> widgets.</li> <li>UI prefabs with ability to instantiate them.</li> <li><code>Pool::try_get_component_of_type</code> + the same for <code>MultiBorrowContext</code>.</li> <li><code>NodeTrait::on_unlink</code> method.</li> <li>Implemented <code>ComponentProvider</code> trait for <code>Node</code>.</li> <li><code>MultiBorrowContext::get/get_mut</code> methods.</li> <li>Ability to remove objects from multiborrow context.</li> <li><code>newtype_reflect</code> delegating macro.</li> <li><code>SceneGraph::change_hierarchy_root</code> method.</li> <li>Ability to change UI scene root.</li> <li>Property inheritance for UI widgets.</li> <li>Ability to instantiate UI prefabs by dropping prefab into world viewer/scene previewer.</li> <li>Ability to open scripts from the editor's inspector.</li> <li><code>Control::post_draw</code> method.</li> <li>Ability to reorder children of a scene node.</li> <li><code>SceneGraph::relative_position</code> + <code>SceneGraphNode::child_position</code> methods.</li> <li>Ability to reorder nodes/widgets in the world viewer.</li> <li>Added more icons for widgets.</li> <li>Added support for UI animations in the animation editor.</li> <li>Configurable UI update switches.</li> <li>Ability to edit ui absm nodes in the absm editor.</li> <li><code>AbsmEventProvider</code> widget.</li> <li>Ability to enable msaa when initializing graphics context.</li> <li>Ability to change corner radius in <code>Border</code> widget.</li> <li>Ability to draw rectangles with rounded corners in UI drawing context.</li> <li>Added layout rounding for <code>fyrox-ui</code> which significantly reduced blurring.</li> <li>Added support for embedded textures in FBX.</li> <li><code>Selector</code> widget.</li> <li>Added project dir and scenes to open as cli args to editor.</li> <li><code>utils::make_cross_primitive</code> helper method.</li> <li>Ability to draw wire circle in the UI drawing context.</li> <li>Ability to draw WireCircle primitives in VectorImage widget.</li> <li>More tests.</li> <li>Vertex buffer API improvements.</li> <li>Rendering statistics window for the editor.</li> <li>Added shape casting in physics.</li> <li>Ability to unassign textures in material editor.</li> <li>Allow to set negative playback speed for animations in animation editor.</li> <li><code>Scene::clone_one_to_one</code> shortcut for easier scene cloning.</li> <li><code>fyrox-dylib</code> crate to be able to link the engine dynamically.</li> <li>Ability to link the engine dynamically to the editor.</li> <li>Added property editor for untyped textures.</li> <li>Added <code>Plugin::on_loaded</code> method.</li> <li><code>NetListener::local_address</code> method.</li> <li><code>Model::new</code> method.</li> <li>Ability to disable space optimization of <code>InheritableVariable</code> on serialization.</li> <li>Added CI for project template for all supported platforms.</li> <li>Added diagnostics for degenerated triangles when calculating tangents.</li> <li><code>Pool::first_ref/first_mut</code> methods.</li> <li>Added release keystore for android project templates.</li> <li>Collect rendering statistics on per-scene basis.</li> <li><code>transmute_slice</code> helper function.</li> <li>Ability to read GPU texture data.</li> <li>Experimental histogram-based auto-exposure for HDR (disabled by default).</li> <li>Short-path angle interpolation mode for <code>Curve</code> - <code>Curve::angle_at</code>.</li> <li>Property editor for <code>RcUiNodeHandle</code> type.</li> <li>Adaptive scroll bar thumb.</li> <li>Ability to fetch current task pool from resource manager.</li> <li>Async icon generation for assets in the asset browser.</li> <li>Case-insensitive string comparison helper method <code>fyrox::core::cmp_strings_case_insensitive</code>.</li> <li>Major performance improvement for searching in the asset browser.</li> <li>Configurable interpolation mode for animations.</li> <li>Ability to close popups using <code>Esc</code> key.</li> <li>Added diagnostics for docking manager layout, that warns if a window has empty name.</li> <li>Keyboard navigation for tree widget.</li> <li>Ability to close windows by <code>Esc</code> key.</li> <li>Focus opened window automatically.</li> <li>Keyboard navigation for <code>Menu</code> widget.</li> <li>Added <code>ImmutableString</code> editor.</li> <li>Docs for inspector module.</li> <li>Ability to deactivate menus using <code>Esc</code> key.</li> <li><code>PopupMessage::RelayedMessage</code> to re-cast messages from a popup to a widget.</li> <li><code>NavigationLayer</code> widget that handles <code>Tab</code>/<code>Shift+Tab</code> navigation.</li> <li>Ability to switch check box state using space key.</li> <li>Ability to click button widget using <code>Space</code>/<code>Enter</code> keys.</li> <li><code>accepts_input</code> for widgets that can be used for keyboard interaction.</li> <li>Added keyboard navigation for input fields in the inspector.</li> <li>Highlight a widget with keyboard focus.</li> <li><code>Visitor</code> docs.</li> <li>Ability to open/close drop down list using arrow keys.</li> <li>Re-cast <code>Variant</code> message on enum property editor.</li> <li>Focus popup content (if any) on opening.</li> <li>Keyboard navigation for list view widget.</li> <li>Focus window content (if any) on opening.</li> <li>Optional ability to bring focused item into view in navigation layer.</li> <li>Hotkey to run the game from the editor (default is <code>F5</code>).</li> <li>Ability to increase/decrease <code>NumericUpDown</code> widget value by arrow keys.</li> <li>Configurable command stack max capacity (prevents the command stack to grow uncontrollably, which could eat a lot of memory if the editor is running for a long time).</li> <li>Auto-select text on focusing <code>TextBox</code> widget.</li> <li>Ability to render scene manually.</li> <li>Ability to set precision for <code>VecEditor</code> widget.</li> <li>Ability to switch between shaded and wireframe mode in the scene preview.</li> <li>Multi-curve support for the curve editor widget.</li> <li><code>Color::COLORS</code> array with pre-defined colors.</li> <li>Ability to set different brushes for every curve in the curve editor.</li> <li>Apply different colors to curves in the animation editor.</li> <li>Show multiple curves at once when selecting tracks in the animation editor.</li> <li>Dropdown menu widget.</li> <li>Quick-access menu for grid snapping.</li> <li><code>Create Parent</code> context menu option for scene nodes.</li> <li>Add background curves concept to the curve editor widget.</li> <li>Smart placement for newly created objects.</li> <li>Added mesh control panel - allows to create physics entities (colliders, rigid bodies, etc) in a few clicks.</li> <li><code>Reflect::assembly_name</code> to retrieve assembly name of a type.</li></ul> <h3 id="changed"> Changed</h3> <ul><li>Major style improvements for the editor UI.</li> <li>Migrated to Rapier 0.18.</li> <li>Refactored multiborrow context - removed static size constraint and made borrowing tracking dynamic and more efficient.</li> <li>Use <code>Result</code> instead of <code>Option</code> for multiborrowing for better UX.</li> <li>Added panic on <code>Ticket::drop</code> to prevent dangling pool records.</li> <li>Moved generic graph handling code into <code>fyrox-graph</code> crate.</li> <li>Do not call <code>Control::update</code> for every widget:
<ul><li>in the editor on complex scenes it improves average performance by 13-20%.</li> <li>you have to set <code>need_update</code> flag when building the widget if you need <code>Control::update</code> to be called.</li></ul></li> <li>Mutable access to UI in <code>Control::update</code>.</li> <li>Refactored <code>Selection</code> to use dynamic dispatch.</li> <li>Refactored the entire editor command system to use dynamic dispatch.</li> <li>Split <code>SceneGraph</code> trait into object-safe and object-non-safe parts.</li> <li>Run most of <code>Engine::pre_update</code> logic even if there's no graphics context.</li> <li>Moved color space transformation to vertex shader of particle system to increase performance.</li> <li>Recalculate world space bounding box of a mesh on <code>sync_transform</code> instead of <code>update</code>.</li> <li>Refactored rectpacker to use plain <code>Vec</code> instead of <code>Pool</code>.</li> <li>Moved rectangle-related code to <code>rectutils</code> crate.</li> <li>Automatically unregister faulty resources if registering ok one.</li> <li>Prevent uvgen to modifying the actual surface data.</li> <li>Extracted uvgen module to <code>uvgen</code> crate.</li> <li>Use simple vec instead of pool in octree.</li> <li>Moved <code>math</code> + <code>curve</code> + <code>octree</code> mods to <code>fyrox-math</code> crate.</li> <li>Moved lightmapper into a <code>lightmap</code> crate.</li> <li>Support for backwards movement (negative speed) for navmesh agent.</li> <li>Moved the engine implementation into <code>fyrox-impl</code> crate, <code>fyrox</code> crate now is a proxy to it.</li> <li>Moved interaction modes panel to the toolbar.</li> <li>Made shader methods public to be able to create them manually.</li> <li>Show unassigned handles in orange color to attract attention.</li> <li>Major refactoring of <code>TextBox</code> widget that makes it much more pleasant to work with.</li> <li>Major usability improvements for <code>DockingManager</code> tiles.</li> <li><code>Window</code> widget content is now linked to <code>NavigationLayer</code> widget instance.</li> <li>Prevented <code>TextBox</code> and <code>NumericUpDown</code> widgets from sending change messages when they have not changed.</li> <li>Reduced width and precision for worldspace position of current selection.</li> <li>Use <code>ImmutableString</code> for scene nodes and widgets to reduce memory consumption on duplicated strings.</li> <li>Do not flush the renderer when changing scenes, to prevent various graphical issues.</li> <li>More informative names for curves in the animation editor.</li> <li>Change cursor icon when picking/dragging keys in curve editor.</li> <li>Major refactoring of coordinate system in the curve editor.</li> <li>Keep the animation player selected in the animation editor.</li> <li>Changed AABB validity to include zero-size dimensions to allow camera fitting to work with flat objects.</li> <li>Prefer prefab roots when selecting nodes in scene.</li> <li><code>Reflect</code> trait bound for <code>Plugin</code> trait.</li></ul> <h3 id="fixed"> Fixed</h3> <ul><li>Fixed cascade shadow maps (CSM) rendering.</li> <li>Fixed crash when setting particle spawn rate too high.</li> <li>Fixed UB when using MultiBorrowContext.</li> <li>Fixed visibility of cloned widget.</li> <li>Set unique id for widget copies.</li> <li>Fixed crash when closing scenes.</li> <li>Fixed <code>Default</code> impl for <code>Pool</code>.</li> <li>Fixed rare crash in <code>TextBox</code> widget when typing in something</li> <li>Fixing double pixel loop (it was looping over y twice) in terrain internals.</li> <li>Fixed creating a MenuItem in editor.</li> <li>Force ui widget to recalculate layout if it was animated</li> <li>Registered property editors for all UI properties.</li> <li>Fixed incorrect FBX cluster loading (fixes incorrect rendering of FBX models)</li> <li>Fixed crash when selection range is incorrect in the <code>TextBox</code> widget.</li> <li>Fixed crash in the animation editor when trying to rebind a track referencing deleted scene node.</li> <li>Properly expand tree items when building path in file browser widget.</li> <li>Fixed doubling of items under disks in file browser widget.</li> <li>Fixed track deletion in the animation editor.</li> <li>Fixed file browser behaviour on empty file path</li> <li>Select current dir in the asset browser.</li> <li>Automatically remove disconnected listeners from the log.</li> <li>Fixed support of custom layout panel of <code>ListView</code> widget.</li> <li>Fixed async tasks at WebAssembly target.</li> <li>Fixed property inheritance for types with interior mutability.</li> <li>Keep selected brush when hovering mouse over a <code>Decorator</code> widget.</li> <li>Fixed <code>TabControl</code> widget headers style.</li> <li>Improved SearchBar widget style.</li> <li>Fixed incorrect script task handling (it was passing task result to all scripts, instead the one that launched the task).</li> <li>Prevent particle systems from over-spawn particles when spawn rates are high.</li> <li>Fixed incorrect vertex buffer data layout.</li> <li>Fixed crash if a selected node was deleted during asset hot reloading.</li> <li>Prevent moving a folder into its own subfolder in the asset browser.</li> <li>Fixed lightmap saving when corresponding lightmap textures were deleted.</li> <li>Sort rectangles back-to-front when rendering to prevent blending issues.</li> <li>Back-to-front sorting when rendering nodes with transparency.</li> <li>Fixed seams on skybox cubemap.</li> <li>Hide <code>should_be_deleted</code> field.</li> <li>Do not update scripts on disabled nodes.</li> <li>Fixed sound context serialization (this bug caused all sound buses to disappear on load)</li> <li>Fixed potential crash in audio bus editor.</li> <li>Fixed crash when closing the editor.</li> <li>Fixed crash <code>attempt to subtract with overflow</code> in particle systems.</li> <li>Fixed incorrect <code>Selection::is_empty</code> implementation.</li> <li>Fixed canvas background color leaking to the rendered image on WebAssembly.</li> <li>Ignore <code>target</code> dir when doing search in the asset browser.</li> <li>Fixed accidental enabling/disabling tracks when expanding them in the animation editor.</li> <li>Fixed editor layout saving and loading.</li> <li>Prevent <code>Inspector</code> properties from disappearing when expander is closed.</li> <li>Use context menus instead of plain popups in color gradient editor.</li> <li>Fixed incorrect extension proposal for in the resource creator.</li> <li>Fixed incorrect resource creation in resource creator.</li> <li>Fixed sluggish tiles resizing in the docking manager.</li> <li>Keep the order of interaction modes the same.</li> <li>Fixed bring-into-view for <code>ScrollPanel</code> widget - not it does not jump unpredictable.</li> <li>Do not pass keyboard input to invisible widgets.</li> <li>Handle edge cases properly when calculating curve bounds.</li> <li>Fixed "zoom to fit" functionality in the curve editor widget.</li> <li>Fixed sliding of the view in the curve editor widget on resizing.</li> <li>Fixed frustum culling flag usage.</li> <li>Fixed inspector syncing/context changing.</li> <li>Fixed crash when trying to get selected entity from empty selection.</li> <li>Fixed crash when closing scenes using <code>X</code> button on the tabs.</li></ul> <h3 id="removed"> Removed</h3> <ul><li>Removed <code>define_command_stack</code> macro</li> <li>Removed redundant <code>old_selection</code> arg from change selection command</li></ul> <h2 id="support"> Support</h2> <p>If you want to support the development of the project, click <a href="https://fyrox.rs/sponsor.html" target="_blank" rel="noopener noreferrer">this link<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>. Also, you can help by
fixing one of the <a href="https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">"good first issues" <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>,
adding a desired feature to the engine, or making a contribution to the <a href="https://github.com/fyrox-book" target="_blank" rel="noopener noreferrer">book<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/80.9ecacfb4.js" defer=""></script><script src="/assets/js/18.e8cf7feb.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The making of a 3D platformer in Fish Folk's Universe]]></title>
            <description><![CDATA[This article gives an overview of the development process of Fish Folly game.]]></description>
            <link>https://fyrox.rs/blog/post/how-i-made-a-game-in-fyrox/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/how-i-made-a-game-in-fyrox/</guid>
            <pubDate>Wed, 13 Mar 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">The making of a 3D platformer in Fish Folk's Universe</h1> <div class="content__default"><p>This article shows the overview of the development process of the <a href="https://github.com/mrDIMAS/FishFolly" target="_blank" rel="noopener noreferrer">Fish Folly<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>
game using Fyrox Game Engine. It does not go into development details very deeply, though. The current state of the game is
something like this:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/mxcSnWft0gQ" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <h2 id="idea-and-assets"> Idea and Assets</h2> <p>The idea of the game was proposed by <a href="https://github.com/erlend-sh" target="_blank" rel="noopener noreferrer">@erlend<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> back in the April 2022 and it should be a FallGuys-like 3D
platformer with multiplayer support. I started working on it in May 2022. At first we thought about the visual style of the game
and decided it to be close to Fish Games series. Erlend commissioned a 3D model for the main character:</p> <p><img src="https://fyrox.rs/assets/fish-folly/fish.gif" alt="fish"></p> <p>The next part was to find a good set of tiles for the game levels, and we found an awesome pack of tiles and various 3D models for
the environment by Quaternius (<a href="https://quaternius.itch.io/ultimate-platformer-pack" target="_blank" rel="noopener noreferrer">Ultimate Platformer Pack<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>). It fits nicely in the
visual style of the game.</p> <h2 id="development"> Development</h2> <p>After these preparation steps were done, I started coding the game. The plan was to make an MVP in a few months, but... the universe had
other plans. As you may noticed already, the development of MVP took almost 2 years. This mostly because I'm the lead developer of
Fyrox and when I see something missing or broken in the engine, I usually go and add/fix stuff. And don't forget that I had a full
time job back in the day, so it was hard-mode development difficulty from the beginning. The first version of the game with
minimal functionality was done in a few weeks. It was a simple character controller, with a simple map and a few bots running into
nowhere:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/DrugAFKi-GQ" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>By the end of the June 2022, <a href="https://github.com/Hyeve-jrs" target="_blank" rel="noopener noreferrer">@Hyeve<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> made a cool map using Quaternius tile set:</p> <p><img src="https://fyrox.rs/assets/fish-folly/map.png" alt="fish"></p> <p>This map was tweaked by me in the final version of the game, the most part of it remained unchanged, I just added more traps, cannons,
spikes, etc. In the beginning of the July 2022 I've added a simple AI to the game:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/YRE5g57aZEg" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>It was dead-simple - bots run on navmesh straight to target, jumping when they see a gap in front of them (more on that later). It was
kinda working, but the chances of finishing a map by any bot was very low. The navmesh was "drawn" by hand:</p> <p><img src="https://fyrox.rs/assets/fish-folly/navmesh.webp" alt="navmesh"></p> <p>Since the game is FallGuys-like, there was a key part that is still missing - ragdoll physics for characters. This took me a lot of
effort to add it to the game, since I never did it previously:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/RuoLInE34dM" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>It is kinda buggy, but sorta works. Looking ahead, it is worth to mention that this ragdoll physics was one the trickiest part of the
entire game to make working properly. Ragdoll principle is very easy at first glance, but it requires a lof of manual work for fine
tuning. In general, ragdolls are just a set of rigid bodies linked with joints with various constraints (you can read more
<a href="https://fyrox-book.github.io/physics/ragdoll.html" target="_blank" rel="noopener noreferrer">here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>). I even added a special Ragdoll Wizard to the engine (you can see it in action
<a href="https://www.youtube.com/watch?v=TxSlqGhCxYc" target="_blank" rel="noopener noreferrer">here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>). After the initial ragdoll support was added, I switched back to the engine development and
released four (!) versions of the engine (you can find blog posts <a href="https://fyrox.rs/blog/" target="_blank" rel="noopener noreferrer">here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>). As you can see, the entire 2023 was
dedicated to the engine development and the game development was on-hold.</p> <p>In January 2024, I decided to continue the development, just to have at least some project on the engine more or less finished. I started
by improving the player's control, improved ragdoll physics a lot and made a <a href="https://fyrox.rs/assets/demo/fish_folly/index.html" target="_blank" rel="noopener noreferrer">Web-version<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>
of the game. You can still play it, but it is very outdated by now. Unfortunately, the latest version cannot be run in a web-browser,
because it uses standard TCP sockets for networking.</p> <p>At this time the game still didn't have a multiplayer support. By that time, I had very little expertise in making multiplayer games.
I talked with people, read some articles and decided to implement client-server architecture with listen-server approach. Transformation
of the game to client-server architecture was quite painful. There was a lot of trial and error before I found the right way of doing
things.</p> <p>At first, I separated game code into two parts - server and client sides. Server side does the heavy lifting - it runs the entire
game logic, simulates physics, sending messages to the clients, etc. Client side on the other hand is very lightweight, it can be considered
as a simple "player" for commands that comes from the server. It just sets positions and rotations for scene nodes, controls sound sources...
and that's pretty much it.</p> <p>The first version of the multiplayer support was finished by the end of January 2024 - and it looked like this:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/b8Fs9fF6AJ8" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>As you can see, at this time I also made a simple UI. This UI was made in the new UI editor, that was implemented not so long ago. Since
this point in time the development was quite rapid. The entire February and the beginning of March 2024 was spent on adding missing game
features. I added leaderboard, improved bots AI, added more traps, added award scene, added sounds and music, fixed a lot of bugs.</p> <p>Bots AI was probably the second non-trivial part of the development. Bots are using navigational mesh of the level to build paths to target.
Since the path contains a lot of gaps and traps, some avoidance algorithm should be added. I ended up with something like this:</p> <p><img src="https://fyrox.rs/assets/fish-folly/bots_ai.png" alt="bots ai"></p> <p>The three vertical lines in front of the bots are ground probes, that checks if there's a gap that can jumped over. It is based on simple
raycasting. The green box is used to determine if there's a trap in front of the bot. If the bot "sees" the trap, it just goes backwards.
It works kinda ok with rotating traps, but not for stationary spikes.</p> <h2 id="conclusion"> Conclusion</h2> <p>The development of this game was a lot of fun, I learned a lof of new stuff. If you want to add your map, some game mechanics, sounds, or
anything you want you can do it in the <a href="https://github.com/mrDIMAS/FishFolly" target="_blank" rel="noopener noreferrer">game's repository<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>. For example, implement a minigame for which
we've already got assets prepared! Pick one from the list:</p> <h3 id="burnstile"> Burnstile</h3> <p><a href="https://github.com/mrDIMAS/FishFolly/issues/2" target="_blank" rel="noopener noreferrer">Burnstile<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> - similar to the one from <a href="https://www.youtube.com/watch?v=cYO9C8A7xfY" target="_blank" rel="noopener noreferrer">Mario Party 6<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><img src="https://fyrox.rs/assets/fish-folly/burnstile.gif" alt="Burnstile"></p> <h3 id="tumble-temple"> Tumble Temple</h3> <p><a href="https://github.com/mrDIMAS/FishFolly/issues/3" target="_blank" rel="noopener noreferrer">Tumble temple<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> - similar to the one from <a href="https://www.youtube.com/watch?v=Emb89socnb0" target="_blank" rel="noopener noreferrer">Mario Party 9<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><img src="https://fyrox.rs/assets/fish-folly/tumble_temple.gif" alt="Tumble temple"></p> <p>You can also check the <a href="https://github.com/mrDIMAS/FishFolly/issues" target="_blank" rel="noopener noreferrer">issues<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> page to see how you can contribute to the game. This project was made
by the effort of many people, and you can become one of them.</p></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/79.58653b5b.js" defer=""></script><script src="/assets/js/18.e8cf7feb.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fyrox Game Engine 0.33]]></title>
            <description><![CDATA[Fyrox 0.33 includes new UI editor, rendering improvements, various editor improvements,  script API improvements, async tasks, book improvements and more.]]></description>
            <link>https://fyrox.rs/blog/post/fyrox-game-engine-0-33/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/fyrox-game-engine-0-33/</guid>
            <pubDate>Wed, 24 Jan 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">Fyrox Game Engine 0.33</h1> <div class="content__default"><p>I'm happy to announce that Fyrox 0.33 has been released! Fyrox is a modern game engine written in Rust, it helps
you to create 2D and 3D games with low effort using native editor; it is like Unity, but in Rust. This release includes
new UI editor, rendering improvements, various editor improvements, script API improvements, async tasks, book improvements
and more.</p> <h2 id="introduction"> Introduction</h2> <p>Before we begin, check out <a href="https://fyrox.rs/examples.html" target="_blank" rel="noopener noreferrer">demo projects<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> of the engine - it is a set of applications
and games made with the engine. You can also check <a href="https://fyrox.rs/games.html" target="_blank" rel="noopener noreferrer">games<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> section of the website to
see which games are made using the engine.</p> <h2 id="how-to-update"> How to Update</h2> <p>At first, update the <code>fyrox-template</code> by using <code>cargo install fyrox-template --force</code> and then execute the following
command in your project root directory: <code>fyrox-template upgrade --version=latest</code>. There will be some compilation
errors, but Rust compiler should help you to fix them. There are a lot of <em>small</em> breaking changes that could be
fixed pretty easily. Data compatibility was preserved in 99% of cases, so your previous assets should load fine.</p> <h2 id="ui-editor"> UI Editor</h2> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/qQTxEK5TTxM" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>This is the most important part of the new release. The UI editor was requested by the community quite a long time ago
and now it's basic version is finally added. It still incomplete in some places, but despite that, very useful.</p> <p>The editor can edit special kind of scene called UI-scene. UI scenes have pretty much nothing in common with
standard game scenes and completely isolated from them. There's a number of reasons why UI widgets are not
classic scene nodes and you can read about this <a href="https://fyrox-book.github.io/ui/editor/editor.html" target="_blank" rel="noopener noreferrer">here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.</p> <p>To load a UI scene like in the video above and do some actions when buttons clicked, you can do the following:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Game</span> <span class="token punctuation">{</span>
    new_game<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">UiNode</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    exit<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">UiNode</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>_scene_path<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token class-name">PluginContext</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token comment">// Spawn async task that will load the UI.</span>
        ctx<span class="token punctuation">.</span>task_pool<span class="token punctuation">.</span><span class="token function">spawn_plugin_task</span><span class="token punctuation">(</span>
            <span class="token class-name">UserInterface</span><span class="token punctuation">::</span><span class="token function">load_from_file</span><span class="token punctuation">(</span><span class="token string">"menu.ui"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>resource_manager<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>result<span class="token punctuation">,</span> game<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Game</span><span class="token punctuation">,</span> ctx<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> ui <span class="token operator">=</span> ctx<span class="token punctuation">.</span>user_interface<span class="token punctuation">;</span>
                <span class="token operator">*</span>ui <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                game<span class="token punctuation">.</span>new_game <span class="token operator">=</span> ui<span class="token punctuation">.</span><span class="token function">find_by_name_down_from_root</span><span class="token punctuation">(</span><span class="token string">"NewGame"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                game<span class="token punctuation">.</span>exit <span class="token operator">=</span> ui<span class="token punctuation">.</span><span class="token function">find_by_name_down_from_root</span><span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">Self</span> <span class="token punctuation">{</span>
            new_game<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token punctuation">::</span><span class="token constant">NONE</span><span class="token punctuation">,</span>
            exit<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token punctuation">::</span><span class="token constant">NONE</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">on_ui_message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">PluginContext</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">UiMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">ButtonMessage</span><span class="token punctuation">::</span><span class="token class-name">Click</span><span class="token punctuation">)</span> <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> message<span class="token punctuation">.</span><span class="token function">destination</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>new_game <span class="token punctuation">{</span>
                ctx<span class="token punctuation">.</span>user_interface<span class="token punctuation">.</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token class-name">WidgetMessage</span><span class="token punctuation">::</span><span class="token function">visibility</span><span class="token punctuation">(</span>
                    ctx<span class="token punctuation">.</span>user_interface<span class="token punctuation">.</span><span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">MessageDirection</span><span class="token punctuation">::</span><span class="token class-name">ToWidget</span><span class="token punctuation">,</span>
                    <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> message<span class="token punctuation">.</span><span class="token function">destination</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>exit <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>window_target<span class="token punctuation">)</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>window_target <span class="token punctuation">{</span>
                    window_target<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This code spawns an async task in <code>Game::new</code> that will load the UI scene in a separate thread and when it
is done, it will replace current UI instance in the context with the loaded one. To do something useful when
our buttons clicked we're using <code>on_ui_message</code> method from plugin - it is called when there's any message
from the UI.</p> <h2 id="navigational-mesh"> Navigational Mesh</h2> <p><img src="https://fyrox-book.github.io/ai/navmesh.gif" alt="navmesh"></p> <p>Navigation on navmeshes was improved using string pulling algorithm. This algorithm straightens path on the
navmesh and makes it less jagged. It also possible now to specify radius for navmesh agent and it will use
this radius to turn around the corners of the navmesh like so:</p> <p><img src="https://fyrox-book.github.io/ai/agent_radius.gif" alt="navmesh2"></p> <p>It is now possible to calculate paths on a navmesh using async tasks. It could be done like so in one of your
scripts:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Visit, Default, Reflect, Debug, Clone)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">MyScript</span> <span class="token punctuation">{</span>
    navmesh<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    path<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vector3</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">ScriptTrait</span> <span class="token keyword">for</span> <span class="token class-name">MyScript</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">on_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">ScriptContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Borrow a navigational mesh scene node first.</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>navmesh_node<span class="token punctuation">)</span> <span class="token operator">=</span> ctx
            <span class="token punctuation">.</span>scene
            <span class="token punctuation">.</span>graph
            <span class="token punctuation">.</span><span class="token function">try_get_of_type</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">NavigationalMesh</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>navmesh<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Take a shared reference to the internal navigational mesh.</span>
            <span class="token keyword">let</span> shared_navmesh <span class="token operator">=</span> navmesh_node<span class="token punctuation">.</span><span class="token function">navmesh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Spawn a task, that will calculate a long path.</span>
            ctx<span class="token punctuation">.</span>task_pool<span class="token punctuation">.</span><span class="token function">spawn_script_task</span><span class="token punctuation">(</span>
                ctx<span class="token punctuation">.</span>scene_handle<span class="token punctuation">,</span>
                ctx<span class="token punctuation">.</span>handle<span class="token punctuation">,</span>
                <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> navmesh <span class="token operator">=</span> shared_navmesh<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> begin_index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>
                        navmesh<span class="token punctuation">.</span><span class="token function">query_closest</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> end_index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>
                            navmesh<span class="token punctuation">.</span><span class="token function">query_closest</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">500.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">800.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">let</span> <span class="token keyword">mut</span> path <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> navmesh
                                <span class="token punctuation">.</span><span class="token function">build_path</span><span class="token punctuation">(</span>begin_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> path<span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token class-name">None</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>path<span class="token punctuation">,</span> this<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">MyScript</span><span class="token punctuation">,</span> _ctx<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
                    this<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>

                    <span class="token class-name">Log</span><span class="token punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Path is calculated!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">on_update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">ScriptContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Draw the computed path.</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> segment <span class="token keyword">in</span> path<span class="token punctuation">.</span><span class="token function">windows</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ctx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>drawing_context<span class="token punctuation">.</span><span class="token function">add_line</span><span class="token punctuation">(</span><span class="token class-name">Line</span> <span class="token punctuation">{</span>
                    begin<span class="token punctuation">:</span> segment<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    end<span class="token punctuation">:</span> segment<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    color<span class="token punctuation">:</span> <span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This could be useful for large game levels with complex navigational meshes where you can spawn multiple tasks per
frame (or per bunch of frames) to do calculations asynchronously.</p> <h2 id="scripts"> Scripts</h2> <p>Scripting API was significantly improved and now you need to write much less code and you have much wider
access to the engine entities from scripts. This is how a smallest possible script was look like in Fyrox 0.32:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Visit, Reflect, Default, Debug, Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyScript</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token macro property">impl_component_provider!</span><span class="token punctuation">(</span><span class="token class-name">MyScript</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">TypeUuidProvider</span> <span class="token keyword">for</span> <span class="token class-name">MyScript</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">type_uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Uuid</span> <span class="token punctuation">{</span>
        <span class="token macro property">uuid!</span><span class="token punctuation">(</span><span class="token string">"948ba50d-0fd1-4947-b94c-0d6080bb6f74"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">ScriptTrait</span> <span class="token keyword">for</span> <span class="token class-name">MyScript</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">id</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Uuid</span> <span class="token punctuation">{</span>
        <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">type_uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>And this is how it looks like in 0.33:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Visit, Reflect, Default, Debug, Clone, TypeUuidProvider, ComponentProvider)]</span>
<span class="token attribute attr-name">#[type_uuid(id = <span class="token string">"4a6399ac-2f3e-4488-8ea9-743abb86ab36"</span>)]</span>
<span class="token attribute attr-name">#[visit(optional)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyScript</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">ScriptTrait</span> <span class="token keyword">for</span> <span class="token class-name">MyScript</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>The new version significantly smaller: 5 lines of code vs 13 in the old version. This greatly reduces any
distractions with insignificant portions of code and helps you to focus on your own code. What's previously was
implemented using macros, now is implemented using <code>#[derive]</code> attribute. As you can see, <code>TypeUuidProvider</code> and
<code>ComponentProvider</code> now implemented this way. Also, please note a new attribute at the top of the script declaration:
<code>#[visit(optional)]</code> it marks all fields of the struct optional, and the deserializer won't complain if some field
is missing on load. This is very useful, to be able to add new fields freely to your script.</p> <p>Scripts now have access to current graphics context (which gives you access to the main window and renderer),
task pool (allows you to spawn async tasks from scripts), user interface (now you can directly access widgets
from scripts), current scene handle.</p> <p>In Fyrox 0.32, <code>ScriptContext</code> had <code>plugins</code> field, which gives you access to plugins from scripts. It was
quite tedious to access plugins from scripts: <code>ctx.plugins.iter().find_map(|p| p.cast::&lt;MyPlugin&gt;()).unwrap()</code>. Now
it is much easier: <code>ctx.plugins.get::&lt;MyPlugin&gt;()</code>.</p> <h2 id="async-tasks"> Async Tasks</h2> <p>Fyrox now supports task-based programming for both scripts and plugins. Task is a closure that does something in a
separate thread and then the result of it is returned back to the main thread. This is very useful technique, that
allows you to perform heavy calculations using all available CPU power, not just one CPU core with a single main
thread. Tasks could be used for pretty much anything, that can be done as a separate piece of work. Graphically
it could represented like this:</p> <p><img src="https://fyrox-book.github.io/scripting/task.svg" alt="tasks"></p> <p>For example, this is how you can spawn a task in your plugin that loads a file in a separate thread and when it's
done, it stores the loaded data in the plugin itself on the main thread.</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">MyGameConstructor</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">PluginConstructor</span> <span class="token keyword">for</span> <span class="token class-name">MyGameConstructor</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">create_instance</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _scene_path<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        context<span class="token punctuation">:</span> <span class="token class-name">PluginContext</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Plugin</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">MyGame</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">MyGame</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">MyGame</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">PluginContext</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span>task_pool<span class="token punctuation">.</span><span class="token function">spawn_plugin_task</span><span class="token punctuation">(</span>
            <span class="token comment">// Emulate heavy task by reading a potentially large file. The game will be fully</span>
            <span class="token comment">// responsive while it runs.</span>
            <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"some/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> data <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                file<span class="token punctuation">.</span><span class="token function">read_to_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                data
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token comment">// This closure is called when the future above has finished, but not immediately - on</span>
            <span class="token comment">// the next update iteration.</span>
            <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>data<span class="token punctuation">,</span> game<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">MyGame</span><span class="token punctuation">,</span> _context<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
                <span class="token comment">// Store the data in the game instance.</span>
                game<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Immediately return the new game instance with empty data.</span>
        <span class="token keyword">Self</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">MyGame</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> _context<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">PluginContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Do something with the data.</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The data is: {:?}"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Tasks should be used to perform sensible amount of work, simply because each task has its own overhead and it could
be larger than the actual task if the task is tiny.</p> <h2 id="dynamic-font-atlas"> Dynamic Font Atlas</h2> <p>For a long time fonts in Fyrox had quite rudimentary support and it was quite tricky to change font size of a text
at runtime. In this release this was finally fixed by adding support for dynamic font atlases. Dynamic atlas is a
very simple concept: texture atlas of the font is split into multiple pages, where each page corresponds to its own
character size and each pages could also be split into multiple chunks. Multiple chunks is needed, because there's
is a hardware limit for the maximum texture size.</p> <p>You can now easily change font size in the UI of Text and TextBox widgets, this could be done like so:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">set_font_size</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">UiNode</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> ui<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">UserInterface</span><span class="token punctuation">,</span> new_font_size<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ui<span class="token punctuation">.</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">::</span><span class="token function">font_size</span><span class="token punctuation">(</span>
        text<span class="token punctuation">,</span>
        <span class="token class-name">MessageDirection</span><span class="token punctuation">::</span><span class="token class-name">ToWidget</span><span class="token punctuation">,</span>
        new_font_size<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="batching"> Batching</h2> <p>Some parts of renderer now uses batching for rendering that improves rendering performance quite a lot. It is now
used in 2D rendering, particle systems, 3D sprites.</p> <h2 id="animation-refactoring"> Animation Refactoring</h2> <p>Animation-related code was isolated in a separate crate called <code>fyrox-animation</code>. Despite the name of it you
can still use it without Fyrox at all. The crate provides quite powerful ready-to-use animation system, that
includes:</p> <ul><li>Key frame animation.</li> <li>Animation blending with state machine.</li> <li>Timeline events.</li> <li>Root motion.</li> <li>Optional reflection-based property modification of an animatable object.</li> <li>Sprite sheet animation.</li></ul> <p>It was moved into the separate crate, because there's a plan to add animation support for the user interface
scenes, that were introduced in this release.</p> <h2 id="io-abstraction"> IO Abstraction</h2> <p>It is now possible to use new IO abstraction to add support for virtual file systems. It could be used to provide
access to assets located in ZIP-archives for example.</p> <p><img src="https://fyrox.rs/assets/0.33/resource_loader.png" alt="resource io"></p> <h2 id="material-rework"> Material Rework</h2> <p>Material is was turned into resource, which means that you can save materials on disk, share them across
multiple surfaces. Sprites (3D), rectangles (2D), particle systems are now using materials instead of dedicated
renderer with limited functionality. This greatly improves rendering flexibility.</p> <h2 id="editor-improvements"> Editor Improvements</h2> <p>The editor has a ton of various changes, improves and fixes. Here's the most significant changes.</p> <h3 id="edge-highlighting"> Edge Highlighting</h3> <p><img src="https://fyrox.rs/assets/0.33/highlight.gif" alt="highlight"></p> <p>The editor now highlights currently selected objects, which helps to find the selected object and see its
actual shape. This is especially useful if you either have a dark area or a bunch of objects.</p> <h3 id="gizmo-improvements"> Gizmo Improvements</h3> <p><img src="https://fyrox.rs/assets/0.33/gizmo.gif" alt="gizmo"></p> <p>Movement, rotation, scaling gizmos were improved in this release. The gizmos are now react to the cursor which
makes it much more comfortable to work with - you definitely know that you're clicking on a gizmo,
not something behind it. In general, all gizmos now are closer to the industry standard.</p> <h3 id="collider-fitting"> Collider Fitting</h3> <p>It is now possible to fit colliders to actual object bounds in just one click. The editor now automatically opens
a collider control panel with a single <code>Fit</code> button.</p> <h3 id="ability-to-create-assets"> Ability to Create Assets</h3> <p>Asset browser can now create new assets and save them to disk. This could be done using small <code>+</code> button near the
search bar:</p> <p><img src="https://fyrox.rs/assets/0.33/new_asset.png" alt="new asset"></p> <p>You can create not just built-in asset types from this window, but also your own resource types.</p> <h3 id="camera-visualization"> Camera Visualization</h3> <p><img src="https://fyrox.rs/assets/0.33/camera_frustum.png" alt="camera frustum"></p> <p>Camera frustum is now visualized in the editor which makes it easier to position and find it in the scene.</p> <h3 id="ability-to-move-assets"> Ability to Move Assets</h3> <p>You can now move assets and folders with assets in the Asset Browser. This operation automatically fixes all the
links in the assets that has references to the moved ones.</p> <h3 id="placeholder-texture"> Placeholder Texture</h3> <p><img src="https://fyrox.rs/assets/0.33/placeholder.png" alt="placeholder"></p> <p>The editor now assigns a placeholder texture for objects without a texture to make them look nicer. This texture
is also available in the asset browser and can be assigned to pretty much any material.</p> <h3 id="other"> Other</h3> <p>It is now possible to start the editor with multiple scenes at once. This saves a lot of time when you need to
work with a bunch of scenes and restart the editor often.</p> <p>You can now connect a state with every other in the ABSM editor like so:</p> <p><img src="https://fyrox.rs/assets/0.33/transition.gif" alt="transition"></p> <h2 id="network"> Network</h2> <p>This release also contains some experimental support for multiplayer games. <code>fyrox-core</code> now have a <code>net</code> module,
which contains a thin abstraction layer, that allows you to establish connection between devices over the network
and send various messages between them. You can see it in action in
<a href="https://github.com/mrDIMAS/FishFolly" target="_blank" rel="noopener noreferrer">this project<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.</p> <h2 id="book-improvements"> Book Improvements</h2> <p>The book in this release has tons of improvements as well, there are the following changes:</p> <ul><li>Tutorials rework (see below)</li> <li>Custom widgets</li> <li>Navmesh improvements</li> <li>Shaders usage example</li> <li>Built-in properties of shaders</li> <li>Drawing parameters</li> <li>Animation usage</li> <li>Animation signals</li> <li>ABSM chapter improvements (including events)</li> <li>Mesh data buffers</li> <li>Ui Editor</li> <li>Font chapter rework</li> <li>Changed default theme to dark</li> <li>Removed obsolete information</li> <li>Added chapters for <code>Screen</code>, <code>ScrollViewer</code>, <code>ScrollPanel</code>, <code>VectorImage</code> widgets.</li> <li>Chapter about root motion</li> <li>Async tasks</li> <li>Light maps</li> <li>Input handling (mouse, keyboard)</li> <li>Sprite animation</li> <li>Accessing other script's data</li> <li>Window management</li> <li>NixOS build instructions (kudos to <a href="https://github.com/stillinbeta" target="_blank" rel="noopener noreferrer">@stillinbeta<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>)</li></ul> <p>The book is also slowly getting refactored - source code of snippets is now slowly moving from the book
source to a separate cargo project, and the code snippets are referenced directly from this project.</p> <h2 id="tutorials"> Tutorials</h2> <p>FPS tutorial was fully rewritten using the latest engine version. As before, it is split in three
parts:</p> <ul><li><a href="https://fyrox-book.github.io/tutorials/fps/tutorial-1/fps-tutorial.html" target="_blank" rel="noopener noreferrer">Character Controller<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://fyrox-book.github.io/tutorials/fps/tutorial-2/fps-tutorial-2.html" target="_blank" rel="noopener noreferrer">Weapons<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://fyrox-book.github.io/tutorials/fps/tutorial-3/fps-tutorial-3.html" target="_blank" rel="noopener noreferrer">Bots and AI<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul> <p>There's also a set of community tutorials, which you can find in the <a href="https://fyrox-book.github.io/tutorials/community.html" target="_blank" rel="noopener noreferrer">respective chapter<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> of the book.</p> <h2 id="full-list-of-changes"> Full List of Changes</h2> <p>The list is split into four sections for ease of reading and finding particular information.</p> <h3 id="added"> Added</h3> <ul><li>UI editor.</li> <li>Tasks system for scripts and plugins.</li> <li>Implemented dynamic font atlas.</li> <li>Batching for 2D graphics.</li> <li>Ability to move resources and folders in the Asset Browser.</li> <li>Edge highlighting for selection in the editor.</li> <li>Added an ability to create resources from asset browser.</li> <li>Added height parameter for <code>Text</code> and <code>TextBox</code> widgets.</li> <li>Ability to specify IO abstraction when loading user interface.</li> <li><code>Utf32StringPropertyEditorDefinition</code> to edit <code>Vec&lt;char&gt;</code> UTF32 strings.</li> <li><code>RefCellPropertyEditorDefinition</code> for <code>RefCell&lt;T&gt;</code> types.</li> <li>Enable reflection + serialization for formatted text and its instances.</li> <li>Built in font resource.</li> <li>Font resource property editor with font preview.</li> <li>Ability to assign fonts from asset browser.</li> <li>Reflection for resources.</li> <li>UI graph manipulation methods.</li> <li><code>Screen</code> widget  automatically fits to the current screen size.</li> <li>Show type name in world viewer for widgets.</li> <li>Ability to specify ignored types for <code>Reflect::apply_recursively</code>.</li> <li>Preview for curve and hrir resources.</li> <li>Ability to open a window at desired position.</li> <li>Ability to edit textures as UntypedResource in widgets.</li> <li>Implemented <code>Serialize + Deserialize + Display</code> traits for <code>ErasedHandle</code>.</li> <li>Smart positioning for contextual floating panels in the editor.</li> <li><code>WidgetMessage::Align</code> + <code>WindowMessage::OpenAndAlign</code> messages.</li> <li>Ability to invalidate layout for all widgets at once.</li> <li>Ability to mark all fields of a struct/enum optional when deserializing: <code>#[visit(optional)]</code> can now be
added to a struct/enum directly, thus overriding all other such attributes on fields.</li> <li>Added access to user interface, task pool, graphics context, current scene handle for scripts.</li> <li><code>PluginsRefMut::get/get_mut/of_type_ref/of_type_mut</code> methods.</li> <li>Added a bunch of <code>#[inline]</code> attributes for <code>Pool</code> for slight performance improvements.</li> <li>Added <code>AtomicHandle</code> that can be modified using interrior mutability.</li> <li>Ability to pass pixel kind to the <code>Renderer::render_ui_to_texture</code> method.</li> <li>Show material resource state in the material field editor.</li> <li>Ability to scroll to the end of the content for <code>ScrollViewer</code> and <code>ScrollPanel</code> widgets.</li> <li>Ability to save and load light maps into/from a file.</li> <li>Ability to repeat clicks of a button while it is pressed.</li> <li>Ability to open materials for editing from the asset browser.</li> <li>Ability to filter a list of types when using reflection for fields iteration.</li> <li>Implemented <code>PartialOrd + Ord</code> traits for <code>Handle</code> type.</li> <li>Added icon in the asset browser for material resources.</li> <li>Ability to pass generics to <code>uuid_provider</code> macro.</li> <li>Ability to share navigational mesh across multiple threads.</li> <li>Implemented <code>Reflect</code> trait for <code>RwLock</code>.</li> <li><code>UserInterface::find_by_name_down_from_root</code> method to search widgets by name.</li> <li>Implemented <code>Send</code> trait for UI entities.</li> <li>Added user interface resource.</li> <li>Collider control panel with ability to fit colliders to parent bounds.</li> <li>Property editor for vector image's primitives.</li> <li>Show warning in the log when there's script message with no subscribers.</li> <li>Implemented <code>TypeUuidProvider</code> trait for standard types.</li> <li>Ability to specify clear color in <code>Renderer::render_ui_to_texture</code>.</li> <li>Added icon in the asset browser for shader resources.</li> <li>Ability to copy widgets from UI to UI.</li> <li>Ability to create ragdolls from <code>Create</code> menu.</li> <li>Added an ability to rebind tracks in the animation editor.</li> <li>Added a set of standard materials, exposed them in the editor.</li> <li>Added placeholder texture.</li> <li>Ability to fetch resource import options from their respective loaders.</li> <li>Implemented <code>Visit</code> and <code>Reflect</code> traits for <code>char</code>.</li> <li>Ability to specify icons for assets in respective preview generators.</li> <li><code>TypedResourceData</code> trait to be able to set correct default state of a resource.</li> <li>Implemented <code>ResourceData::save</code> for built-in engine resource types.</li> <li>Documentation for LODs.</li> <li>Color constants for the colors with names.</li> <li>Ability to save resources.</li> <li><code>ResourceLoader::supports_extension</code> method.</li> <li>Implemented <code>Error</code> trait for <code>VisitError</code>.</li> <li><code>Material::set_texture</code> shortcut.</li> <li>Implemented <code>From&lt;&amp;str&gt;</code> trait for <code>ImmutableString</code>.</li> <li>Added normalization option for vertex attribute descriptor.</li> <li>Added experimental network abstraction layer.</li> <li>Added frustum culling for rectangle node.</li> <li>Added camera view pyramid visualization (kudos to <a href="https://github.com/dasimonde" target="_blank" rel="noopener noreferrer">@dasimonde<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</li> <li>Added IO abstraction for resource system (kudos to <a href="https://github.com/jacobtread" target="_blank" rel="noopener noreferrer">@jacobtread<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</li> <li>Added <code>Reflect</code>, <code>Debug</code>, <code>Visit</code> trait implementations for UI widgets.</li> <li>Added <code>Visit</code> trait implementation for <code>usize/isize</code>.</li> <li>Added <code>ResourceIo::move_file</code> method.</li> <li>Added <code>ResourceManager::move_resource</code> method with filtering.</li> <li>Added <code>Drop</code> message for <code>FileBrowser</code> with dropped path.</li> <li>Added <code>ResourceIo::canonicalize_path</code>.</li> <li>Added <code>Pool::generate_free_handles</code> methods.</li> <li>Added <code>InteractionMode::make_button</code> method that creates appropriate button for the mode.</li></ul> <h3 id="changed"> Changed</h3> <ul><li>Major editor refactoring to support new UI scenes.</li> <li>Moved low level animation modules into fyrox-animation crate.
<ul><li>Type aliases for scene specific animation entities + preludes.</li> <li>Texture as generic parameter for sprite sheet animation.</li></ul></li> <li>Turn font into resource + added <code>TextMessage::Height</code>.</li> <li>Make standard built-in shaders non-procedural by default.</li> <li>Refactored internal structure of resources.
<ul><li>All resource related data is now stored in <code>ResourceHeader</code> instead of being scattered all around in <code>ResourceState</code>
variants and even in resource data itself.</li> <li>Backward compatibility is preserved.</li> <li><code>ResourceKind</code> instead of path+flag, refactored resource loader trait.</li></ul></li> <li>Refactored interaction modes in the editor.</li> <li>Switched to UntypedResource from SharedTexture in ui</li> <li>Simplified usage of <code>ResourceManager::request/try_request</code>. No need to write <code>rm.request&lt;Type, _&gt;</code>, just <code>rm.request&lt;Type&gt;</code>.</li> <li>Registered Light Panel in floating panels, so it can be docked.</li> <li>Made searching in the asset browser smarter.</li> <li>GPU resources cache refactoring.</li> <li>Speed up access to textures.</li> <li>Automatic implementation of <code>ScriptTrait::id()</code> method. This implementation now should be removed from your
scripts.</li> <li>Scroll to the end of build log in the editor.</li> <li>Prevented build window from closing when a build has failed.</li> <li>Tweaked node handle property editor to also work with ui widgets.</li> <li>Filter out texture bytes in the property selector to improve performance.</li> <li>Enabled clicks repetition mode for scroll bar increase/decrease buttons.</li> <li>Keep the editor active if there's any captured ui element.</li> <li>Increased scroll bar step for scroll viewer.</li> <li>Added filter argument for <code>aabb_of_descendants</code>.</li> <li>Use abstract EntityId instead of ErasedHandle in animation entities.</li> <li>Optimized internals of navigation mesh.</li> <li>Prevented serialization of the data of external resources.</li> <li>Pass screen size to <code>Control::update</code>.</li> <li>Ability to clone user interface entirely.</li> <li>Refactored scene saving dialogs in the editor to make them more stable.</li> <li>Made <code>Limb::iterate_recursive</code> method public.</li> <li>Switch character rigid body to kinematic when a ragdoll is active.</li> <li>Keep menu items highlighted when opening a menu chain.</li> <li>Gizmo improvements for navmesh interaction mode.</li> <li>Open navmesh panel at the top right of the scene preview when selecting a navmesh scene node.</li> <li>Improved visualization in the dependency viewer.</li> <li>Made asset import options inspector generic.</li> <li>Provide access to material context in the renderer.</li> <li>Movement, scale, rotation gizmo improvements.</li> <li>Mutable access for ui nodes.</li> <li>Preload resources before generating preview for them.</li> <li>Made world viewer to accept data provider instead of scene directly.</li> <li>Replaced <code>Cow&lt;Path&gt;</code> with <code>&amp;Path</code> in <code>ResourceData</code> trait</li> <li>Allow to set materials by drag'n'drop on material editor field.</li> <li>Made material fields in the inspector more clickable.</li> <li>Improved navigation on navmesh using string pulling algorithm.</li> <li>Improved performance of navigation mesh queries.</li> <li>Improved text box widget performance.</li> <li><code>Plane</code> API improvements.</li> <li>Made material editor wider a bit by default.</li> <li>Extend resource data constructor with type name.</li> <li>Turned material into resource, removed <code>SharedMaterial</code> struct.</li> <li>Serialize vertex buffer data as a bytes slab.</li> <li>Use <code>Window::pre_present_notify</code> as recommended in the <code>winit</code> docs.</li> <li>Refactored sprites rendering to use materials.</li> <li>Refactored particle system rendering to use forward renderer.</li> <li>More built-in shader variables for lighting.</li> <li>Triangle buffer API improvements.</li> <li>Use debug message callback instead of message queue for OpenGL errors.</li> <li>Enable OpenGL debugging in debug build profile.</li> <li>Customizable time-to-live for geometry buffers (allows to create temporary buffers that lives one frame (ttl = 0)).</li> <li>Allow to start multiple scenes at editor start up (kudos to <a href="https://github.com/dasimonde" target="_blank" rel="noopener noreferrer">@dasimonde<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</li> <li><code>push_vertices</code> + <code>push_vertices_transform</code> method for vertex buffer.</li> <li>Ability to connect a state with every other state in the ABSM editor (kudos to <a href="https://github.com/Riddhiman007" target="_blank" rel="noopener noreferrer">@Riddhiman007<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>)</li> <li>Added UUIDs for scene nodes.</li> <li>Ability to set navmesh agent path recalculation threshold.</li> <li>Reset <code>modified</code> flags of inheritable variables when fixing node type.</li> <li>Check for node type mismatch on graph resolve and auto-fix this.</li> <li>Use type names instead of type ids when reporting inheritance errors.</li> <li>Remove orphaned nodes when restoring graph's integrity.</li> <li>Code example for <code>Inspector</code> widget.</li> <li>Pass node handle to surface instance data.</li> <li>Check for global <code>enabled</code> flag when filtering out cameras for rendering.</li> <li>Serialize joints binding local frames.</li> <li>Support for touch events in the UI (kudos to <a href="https://github.com/Bocksdin" target="_blank" rel="noopener noreferrer">@Bocksdin<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</li> <li>A* pathfinding optimization (kudos to <a href="https://github.com/TiltedTeapot" target="_blank" rel="noopener noreferrer">@TiltedTeapot<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</li></ul> <h3 id="fixed"> Fixed</h3> <ul><li>Fixed crash of the editor on Wayland.</li> <li>Fixed font rendering API.</li> <li>Fixed restoration of shallow resource handles of untyped resources.</li> <li>Prevent double saving of settings after modification.</li> <li>Keep aspect ratio when previewing a texture in the asset browser.</li> <li>Filter out non-savable resources in resource creation dialog.</li> <li>Fixed offscreen UI rendering in the UI editor.</li> <li>Fixed deep cloning of materials: make them embedded after cloning.</li> <li>Fixed path filters to correctly handle folders with "extensions".</li> <li>Save material when changing its shader property in the material editor.</li> <li>Fixed massive footgun with pointers to the graphics pipeline state scattered all around the renderer.</li> <li>Prevent creating of multiple thread pool across the engine.</li> <li>Fixed crash in the material editor if a material is failed to load.</li> <li>Prevent the editor from closing after saving a scene via Ctrl+S.</li> <li>Fixed position saving of maximized editor window.</li> <li>Fixed crash when assigning non-material resource in a material property.</li> <li>Fixed forward pass of standard shader for skinned meshes</li> <li>Fixed uuid formatting in visitor.</li> <li>Fixed resource extension comparison in the editor by making it case-insensitive.</li> <li>Fixed crash when drag'n'dropping assets in scene previewer.</li> <li>Fixed OpenGL error handling</li> <li>Fixed performance issues when modifying vertex/triangle buffers.</li> <li>Fixed crash when editing terrains (kudos to <a href="https://github.com/Riddhiman007" target="_blank" rel="noopener noreferrer">@Riddhiman007<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>)</li> <li>Fixed a bug when vertex attribute divisor was ignored.</li> <li>Fixed colors for log messages.</li> <li>Fixed scene loading in derived mode.</li> <li>Fixed text coloring when sending a <code>WidgetMessage::Foreground</code> to text.</li> <li>Fixed memory leaks on Linux (kudos to <a href="https://github.com/LordCocoNut" target="_blank" rel="noopener noreferrer">@LordCocoNut<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>)</li> <li>Fixed invalid GPU resource indexing bug, that caused crashes/quirks in graphics when switching scenes in the editor.</li></ul> <h3 id="removed"> Removed</h3> <ul><li>Removed implicit cloning when in <code>Reflect::into_any</code> impl for some types.</li> <li>Removed redundant memory allocation when fetching fields using reflection.</li> <li>Removed redundant memory allocation when iterating over fields.</li> <li>Removed <code>Option</code> wrapper in typed resource to flatten the internal structure of resources.</li> <li>Removed a bunch of redundant clones in the renderer.</li> <li>Removed lazy calculations in the navigational mesh.</li> <li>Removed unused <code>soft_boundary_sharpness_factor</code> param from particle systems (this property was moved to the
standard particle system material).</li> <li>Removed <code>InteractionModeKind</code> and replaced it with uuids.</li></ul> <h2 id="support"> Support</h2> <p>If you want to support the development of the project, click one of the links below. Preferable way is to use
<a href="https://boosty.to/fyrox" target="_blank" rel="noopener noreferrer">Boosty<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> - this way the money will be available for the development immediately.
Alternatively you can use <a href="https://www.patreon.com/mrdimas" target="_blank" rel="noopener noreferrer">Patreon<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>, but in this case the money will
be on-hold for unknown period of time (<a href="https://github.com/FyroxEngine/Fyrox/issues/363" target="_blank" rel="noopener noreferrer">details are here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</p> <p>Also, you can help by fixing one of the <a href="https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">"good first issues" <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>,
adding a desired feature to the engine, or making a contribution to the <a href="https://github.com/fyrox-book" target="_blank" rel="noopener noreferrer">book<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/78.cbc41ee7.js" defer=""></script><script src="/assets/js/18.e8cf7feb.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fyrox Game Engine 0.32]]></title>
            <description><![CDATA[Fyrox 0.32 includes lots of editor improvements, graphics improvements, quality-of-life improvements, documentation and book improvements, overall usability improvements, bug fixes and more.]]></description>
            <link>https://fyrox.rs/blog/post/fyrox-game-engine-0-32/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/fyrox-game-engine-0-32/</guid>
            <pubDate>Wed, 25 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">Fyrox Game Engine 0.32</h1> <div class="content__default"><p>I'm happy to announce that Fyrox 0.32 has been released! Fyrox is a modern game engine written in Rust, it helps
you to create 2D and 3D games with low effort using native editor; it is like Unity, but in Rust. This release includes
lots of editor improvements, graphics improvements, quality-of-life improvements, documentation and book improvements,
overall usability improvements, bug fixes and more.</p> <h2 id="how-to-update"> How to Update</h2> <p>At first, update the <code>fyrox-template</code> by using <code>cargo install fyrox-template --force</code> and then execute the following
command in your project root directory: <code>fyrox-template upgrade --version=latest</code>.</p> <h2 id="scene-loading"> Scene Loading</h2> <p>In the previous version of the engine, you have to load scenes manually using an instance of <code>AsyncSceneLoader</code> and
this was quite confusing. Now it is changed - scene loading is now managed by the engine and game plugins now have
three methods: <code>on_scene_begin_loading</code>, <code>on_scene_loaded</code>, <code>on_scene_loading_failed</code>. All these methods have
self-descriptive names. To load a scene all you need to do is to request it in the loader:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Game</span> <span class="token punctuation">{</span>
    scene<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">Scene</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>scene_path<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">PluginContext</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token comment">// Request a new scene.</span>
        context
            <span class="token punctuation">.</span>async_scene_loader
            <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>scene_path<span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">"data/scene.rgs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">Self</span> <span class="token punctuation">{</span>
            scene<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token punctuation">::</span><span class="token constant">NONE</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">on_scene_begin_loading</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">PluginContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Remove previous one (if any).</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>scene<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>scenes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">on_scene_loaded</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>
        path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">,</span>
        scene<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">Scene</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        context<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">PluginContext</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>scene <span class="token operator">=</span> scene<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>As you can see, current approach is much cleaner than previous and less bug-prone.</p> <h2 id="standard-scripts"> Standard Scripts</h2> <p>Fyrox now offers a library (<code>fyrox-scripts</code>) with a set of standard scripts. For now there's only one script for flying
camera controller, which is used in variety of examples, however the amount will be increased over time. If you have
any game-ready script, you can create a pull request on GitHub.</p> <h2 id="editor-improvements"> Editor Improvements</h2> <p>The editor has lots of improvements in this release.</p> <h3 id="power-saving-mode"> Power-Saving Mode</h3> <p>For a long time the editor was always active, no matter if you use it or not, even when minimized it was consuming heaps
of CPU and GPU resources. Now it is changed and the editor is "sleeping" most of the time, it activates only to process
your actions. This mode is especially useful for laptop users to prevent them from overheating and sound like a turbine.</p> <h3 id="orbital-camera"> Orbital Camera</h3> <p><img src="https://fyrox.rs/assets/0.32/camera.gif" alt="camera"></p> <p>Orbital camera rotation is very helpful to look at an object at different angles. Previously it was quite tedious to
do so: you need to use WSAD keys, hold right mouse button and fly around the object. Orbital camera rotation by default
bound to middle mouse button (can be changed in the editor settings).</p> <h3 id="improved-searching"> Improved Searching</h3> <p>Searching the in the World Viewer is now fuzzy, search query does not need to be exact. It makes the search less
confusing.</p> <h3 id="node-handle-property-editor"> Node Handle Property Editor</h3> <p><img src="https://fyrox.rs/assets/0.32/node_handle.png" alt="node handle"></p> <p>Node handle property editor now has an ability to select a node handle using node selector (green button), which seems
to be less confusing that the assignment via drag'n'drop from the world viewer. Also, it now has <code>Make Unassigned</code> button
(red one), which can be used to make the handle unassigned. The last two buttons are used to locate the object in the
world viewer and to select it respectively.</p> <h3 id="ragdoll"> Ragdoll</h3> <p><img src="https://fyrox.rs/assets/0.32/ragdoll.png" alt="ragdoll"></p> <p>The editor offers a new ragdoll wizard that could be used to create ragdolls with just a few clicks. Currently,
autofilling of it works only with 3D models from mixamo.com. Check the following video see how it works:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/TxSlqGhCxYc" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <h3 id="scene-gizmo"> Scene Gizmo</h3> <p><img src="https://fyrox.rs/assets/0.32/scene_gizmo.gif" alt="scene gizmo"></p> <p>Scene gizmo is used to show current camera orientation and to quickly switch between various point of views (as well
as projection mode).</p> <h3 id="terrain-editor-hotkeys"> Terrain Editor Hotkeys</h3> <p>Terrain editor now has a bunch of useful shortcuts to activate various drawing modes and to change brush options. By
default, the hotkeys are the following:</p> <ul><li><code>F1</code> - switch to height map drawing mode.</li> <li><code>F2</code> - switch to mask drawing mode.</li> <li><code>F3</code> - switch to slope flattening mode.</li> <li><code>[</code> and <code>]</code> - decrease and increase brush size.</li> <li><code>;</code> and <code>'</code> - decrease and increase brush opacity.</li> <li><code>,</code> and <code>.</code> - switch to previous/next layer.</li></ul> <h3 id="curve-property-editor"> Curve Property Editor</h3> <p><img src="https://fyrox.rs/assets/0.32/curve_editor.png" alt="curve editor"></p> <p>It is now possible to edit <code>foo: Curve</code> fields in the inspector. It could be useful to create complex laws of change
for some processes in your game. For example, the curves on the screenshot above are used to define acceleration and
deceleration laws.</p> <h3 id="node-deletion-dialog"> Node Deletion Dialog</h3> <p><img src="https://fyrox.rs/assets/0.32/node_deletion.png" alt="node deletion"></p> <p>The editor now checks if a node that is about to be deleted is referenced in some other scene nodes or scripts. This is
useful to prevent accidental deletion of something that is currently in use.</p> <h3 id="resource-field"> Resource Field</h3> <p><img src="https://fyrox.rs/assets/0.32/show_in_ab.gif" alt="show in asset browser"></p> <p>Resource property editors now have a special button, that shows the currently selected resource in the Asset Browser.
This change could save an extra clicks when you need to find an asset and change its import options.</p> <h3 id="lightmaps"> Lightmaps</h3> <p><img src="https://fyrox.rs/assets/0.32/lightmap.png" alt="light map"></p> <p>Lightmap generation in the editor is now asynchronous, which does not hang the main thread, instead it shows a progress
bar and allows you to cancel the generation.</p> <h3 id="other"> Other</h3> <p>The editor now saves the collapsed/expanded state of scene nodes in the world viewer. It is now impossible to open a
scene multiple times - instead of loading it, the editor will show its tab in the scene preview. Only currently active
scene will be updated in preview mode.</p> <h2 id="saved-games"> Saved Games</h2> <p>Fyrox now has a "standard" way of managing saved games, which allows you to create save files in a few lines of code and
load them in a single line. Check the <a href="https://fyrox-book.github.io/serialization/save.html" target="_blank" rel="noopener noreferrer">respective chapter<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>
in the book to learn more.</p> <h2 id="ui"> UI</h2> <p>It is now possible to close tabs in <code>TabControl</code> widget using middle mouse button. Added context menu to the file
browser to be able to create folders and remove files.</p> <h2 id="sound"> Sound</h2> <p>Sound system of the engine has some improvements and fixes as well. It is now possible to fetch duration of sound
buffer, and it is now infallible (previously it could return <code>None</code> for some decoders). HRIRs are now resources,
and can be loaded via standard resource manager. The new method <code>Sound::try_play</code> will only play the sound if it is not
already playing. HRTF renderer is now taking sound source gain into account (previously only 2D part was using gain).</p> <h2 id="resource-management"> Resource Management</h2> <p>Textures now have <code>Flip green channel</code> option in import options: this adds an ability to flip green channels for
normal maps made in OpenGL Y+ format.</p> <p>Hardcoded list of supported resource extensions was removed from the asset browser, and now it uses a list of extensions
from resource loaders. This allows the asset browser to show custom resources.</p> <p>Non-modified inheritable variables now do not save their info, which saves heaps of disk space in derived assets.</p> <h2 id="rendering"> Rendering</h2> <p>This release contains major fixes for the rendering in the engine. For a long time, binormal vector of TBN basis
was calculated incorrectly, thus leading to some weird lighting artifacts. The book has a
<a href="https://fyrox-book.github.io/rendering/normal_maps.html" target="_blank" rel="noopener noreferrer">separate chapter<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> about normal maps used in the engine.</p> <p>Parallax mapping is also fixed in this release, it includes two additional properties for standard materials -
<code>parallaxCenter</code> and <code>parallaxScale</code>. <code>parallaxCenter</code> defines a baseline value that is used as zero and <code>parallaxScale</code>
defines "strength" of the parallax.</p> <p>Shadows now does not pop up out of nowhere, instead they're slowly fading in and out. This solves annoying graphical
artifacts, which previously could be solved only by increasing shadow rendering distance which in its turn led to
worse performance.</p> <p>Previous versions of the engine had a bug with texture compression - mip levels weren't correctly compressed, which
led to graphical artifacts. This is now fixed as well.</p> <p>Camera scene node now has built-in skybox which replaces the black void that was previously "used". Light scattering
shader now takes light intensity into account. Deferred lighting shaders correctly transfers frame alpha, which fixes
rendering with transparent background.</p> <h2 id="reflection"> Reflection</h2> <p>There are some improvements in the reflection system. The new method <code>Reflect::enumerate_fields_recursively</code> allows you
to iterate over descendant fields of an object while getting info about each field. Another new method
<code>Reflect::apply_recursively</code> for recursive iteration over the descendant fields of an object.</p> <h2 id="examples"> Examples</h2> <p>Engine examples from <code>examples</code> directory are now considered obsolete and were removed. They're now replaced with
<a href="https://github.com/FyroxEngine/Fyrox-demo-projects" target="_blank" rel="noopener noreferrer">new examples<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>. You can also run all examples in your web-browser
from the <a href="https://fyrox.rs/examples.html" target="_blank" rel="noopener noreferrer">examples page<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> on the website.</p> <h2 id="documentation-improvements"> Documentation Improvements</h2> <p>This release contains lots of documentation improvements. This is mostly related to the UI docs, however some of the
other parts of the engine were documented too. In total, more than 20 widgets and scene entities were fully documented
with code examples.</p> <h2 id="book-improvements"> Book Improvements</h2> <p>The book was improved as well. It also includes chapters for various UI widgets, ragdoll wizard, saved games,
proofreading, corrections, removal of outdated information and more.</p> <h2 id="tutorials"> Tutorials</h2> <p>RPG tutorial was updated to the latest version of the engine. You can find it
<a href="https://fyrox-book.github.io/tutorials/rpg/tutorial-1/tutorial-part-1.html" target="_blank" rel="noopener noreferrer">here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.</p> <h2 id="full-list-of-changes-in-random-order"> Full List of Changes in Random Order</h2> <ul><li>Do not call <code>Script::on_os_event</code> if script is not started yet.</li> <li>Borrow instead of move in <code>Visitor::load_from_memory</code>.</li> <li>Ability to load scenes in two modes - derived and raw.</li> <li>Fixed selection issues in the animation editor.</li> <li>Fixed path fixer.</li> <li>Ability to set resource path.</li> <li><code>ResourceManager::unregister</code> to unregister loaded resources.</li> <li>Refactored scene loading + plugin interface improvements.</li> <li>Bring currently selected node into view when clearing filter in the world viewer.</li> <li>Fixed searching in the property selector.</li> <li>Bring current selection into view in node selector when clearing filter text.</li> <li>Fixed <code>zoom to fit</code> in the curve editor when there's no keys.</li> <li>Fixed node name formatting in the animation editor's track list.</li> <li>Fixed tooltips in the inspector.</li> <li><code>EditorPlugin::on_post_update</code> that invoked after any other update methods.</li> <li>Fixed selection syncing in node selector.</li> <li><code>TreeRootMessage::ItemsChanged</code> to catch the moment when tree root items changes.</li> <li>Improved visual style of node handle property editor.</li> <li>Ability to set scene node handle via node selector.</li> <li><code>Sound::try_play</code> method that will only play the sound if it is not already playing.</li> <li><code>Flip green channel</code> option for texture import options: this adds an ability to flip green channels for
normal maps made in OpenGL Y+ format.</li> <li>Resource manager improvements: added base trait with auto-implementation to reduce boilerplate code, mandatory
<code>ResourceLoader::data_type_uuid</code> method to fetch actual data type produced by resource loader,
<code>ResourceManager::try_request</code> - returns an optional resource handle, returns <code>None</code> if <code>T</code> does not match the
actual data id (<code>request</code> just panics in this case).</li> <li>Print an error message to the log when unable to load a resource.</li> <li>Resource field property editor improvements: emit transparent geometry to improve mouse picking,
added margins for elements.</li> <li>Exposed resource manager reference to plugin registration context to be able to register custom resource
loaders that will be used in both the game and the editor.</li> <li><code>Material::sync_to_shader</code> method to sync material properties with its shader.</li> <li><code>parallaxCenter</code> + <code>parallaxScale</code> property for standard shaders.</li> <li>Fixed TBN-basis visualization in mesh debug drawing.</li> <li>Make all gizmo's X axis match the actual coordinate system's X axis.</li> <li>Fixed tooltip in asset browser to show full path without clipping.</li> <li>Fixed parallax mapping.</li> <li>Fixed binormal vector calculation.</li> <li>Added missing <code>tif</code> extension for texture loader.</li> <li>Fixed build window output in the editor.</li> <li>Added fade in/fade out for shadows, that prevents them from popping out of nowhere.</li> <li>Added scene gizmo.</li> <li>Keep frame alpha when applying lighting for transparent background rendering.</li> <li>Rewind sound sources before stopping them.</li> <li>Improved camera focusing on a scene object.</li> <li>Changed orbital camera controls: drag camera was moved to <code>Shift+RMB</code>, added configurable zoom range.</li> <li>Added orbital camera mode for editor camera (can be activated by middle mouse button).</li> <li>Use <code>f32</code> instead of <code>Duration</code> for scene sound source's playback time.</li> <li>Fixed terrain brush bounds visualization.</li> <li>Hotkeys for terrain editor.</li> <li>Use <code>workspace.dependencies</code> in the projects generated by <code>fyrox-template</code> to simplify dependency change.</li> <li>Improved editor settings handling.</li> <li><code>Curve::bounds</code> + ability to <code>Zoom to fit</code> with delay for the curve editor.</li> <li>Property editor for <code>Curve</code> fields.</li> <li>New <code>fyrox-scripts</code> crate + flying camera controller script.</li> <li>Ability to map ui key back to winit + change key binding property editor.</li> <li>Fallback to root directory if <code>fyrox-template script</code> cant find <code>game/src</code>.</li> <li>Added debug impls for gpu texture.</li> <li>Fixed seams between terrain chunks.</li> <li>Removed obsolete examples and replaced them with <a href="https://github.com/FyroxEngine/Fyrox-demo-projects" target="_blank" rel="noopener noreferrer">new examples<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.</li> <li>Fixed curve editor compatibility with scrolling regions.</li> <li>Fixed clipping issues in curve editor.</li> <li>Save expanded state of the scene items in the world viewer in the editor settings.</li> <li>Fixed invalid keys positioning in the curve editor when selecting them.</li> <li>Fixed box selection in the curve editor when mouse is outside.</li> <li>Focus currently selected entity when clearing filter text in animation editor.</li> <li>Fixed a bunch of potential crashes in the <code>CurveEditor</code> widget.</li> <li>Fixed HiDPI issues on WebAssembly.</li> <li>Removed hardcoded list of supported resource extensions from the editor and use ones from resource loaders.</li> <li><code>Hrir</code> resource + async HRTF loading for HRTF sound renderer.</li> <li>Fixed texture compression.</li> <li>Do not use <code>glCheckError</code> in release builds since it has bad performance.</li> <li>Set nearest filtration for floating-point textures in the renderer (WebAssembly fix).</li> <li>Switch a resource without a loader into error state to prevent infinite loading in some cases.</li> <li>Fixed resource loading in WebAssembly.</li> <li>Do not render anything if screen size is collapsed into a point.</li> <li>Split light map generation in two steps + added async generation for the editor.</li> <li>Do not allow to create game projects with a number in beginning of its name.</li> <li>Optimized light map data serialization (breaking change, regenerate your lightmaps).</li> <li><code>BinaryBlob</code> wrapper to serialize arbitrary sets of data as bytes.</li> <li>Print an error to the log instead crashing when unable to generate a lightmap.</li> <li>Moved light map into <code>Graph</code> from <code>Scene</code>.</li> <li>Fixed light map internal handles mapping when copying a graph.</li> <li><code>PathEditor</code> widget + property editor for <code>PathBuf</code> for Inspector.</li> <li>Reduce default amount of texels per unit for lightmapper in the editor.</li> <li>Ability to specify vcs for a new project in <code>fyrox-template</code></li> <li>Set <code>resolver = 2</code> for workspaces generated by <code>fyrox-template</code></li> <li>Improved joints computational stability.</li> <li><code>Make Unassigned</code> button for node handle property editor.</li> <li>Do not save invalid window attributes of the main editor window.</li> <li>Fixed joints binding.</li> <li>Joint rebinding is now optional.</li> <li>Fixed potential infinite loop when constructing quaternion from a matrix.</li> <li>Ability to set custom name to group command in the editor.</li> <li><code>Ragdoll</code> scene node.</li> <li>Improved mouse picking for node handle property editor.</li> <li>Ragdoll wizard to create ragdolls with a few clicks.</li> <li>Power-saving mode for the editor. Editor pauses its execution if its window is unfocused or there's no OS events
from the main window. This change reduces CPU/GPU resources consumption down to zero when the editor is non-active.</li> <li>Do not create a separate region for inheritable variables on serialization if non-modified. This saves quite a
lot of disk space in derived assets (including saved games).</li> <li>Property editors for inheritable vec collections of resources.</li> <li>Clamp input time to the actual duration of the buffer when setting sound source's playback time.</li> <li>Fixed inability to fetch stream length of ogg/vorbis.</li> <li><code>GenericBuffer::duration</code> is now using integer arithmetics which does not suffer from precision
issues (unlike floating point numbers).</li> <li>Decoders now returns channel duration in samples, not in seconds.</li> <li>Send text box message on changes only if its commit mode is immediate.</li> <li>Fixed severity for messages from inability to load editor settings.</li> <li>Added vec property editors for collections of resources.</li> <li>Property editor for <code>Vec&lt;T&gt;</code> will now use appropriate property editor for <code>T</code> instead of implicit usage
of <code>InspectablePropertyEditor</code>.</li> <li>Fixed incorrect focusing of an asset in the asset browser.</li> <li>Fixed emitted message direction for <code>TextBox</code> widget.</li> <li><code>Show in Asset Browser</code> button for resource fields in the inspector.</li> <li>Take sound source gain into account when using HRTF renderer.</li> <li>Fixed visualization of bones list of a surface in the editor.</li> <li>Reduced HRTF sound renderer latency.</li> <li>Fixed animation events collection for blend-by-index ABSM nodes.</li> <li>Improved ABSM events collection API.</li> <li>Ability to fetch animation events from ABSM layers.</li> <li>Fixed property reversion: now it reverts only modified ones.</li> <li>Ability to revert all inheritable properties at once of a scene node.</li> <li><code>Reflect::enumerate_fields_recursively</code> allows you to iterate over descendant fields of an object
while getting info about each field.</li> <li>Update only currently active scene in the editor.</li> <li>Navmesh path smoothing improvements and fixes. Prevent smoothing from cutting corners.</li> <li><code>A*</code> path finder API improvements.</li> <li>Debug drawing for NavMesh scene node.</li> <li>Light scattering now takes light intensity into account.</li> <li>Prevent loading the same scene multiple times.</li> <li>Clear UI in the editor when changing scenes to prevent potential visual desync.</li> <li>Fixed potential panic when handling UI messages with invalid target widget handle.</li> <li>Fixed doubling of the text when printing text in <code>TextBox</code> widget on some platforms.</li> <li>Ability to duplicate animation tracks in the animation editor.</li> <li>Ability to set an ID of animation tracks.</li> <li>Fixed potential panic on invalid handles of <code>Rapier</code> entities when fetching contacts.</li> <li>Ability to close tabs in <code>TabControl</code> widget using middle mouse button.</li> <li>Visualize directional lights as arrows in the editor.</li> <li>Ability to draw arrows in scene debug drawing context.</li> <li>Migrated to <code>winit 0.29</code>.</li> <li>Fixed <code>Rect::clip_by</code> method.</li> <li>Removed <code>VecExtensions</code> trait, because its functionality was already added in the standard library.</li> <li><code>Popup</code> widget improvements: <code>Placement::target</code> method, ability to create popups without adding them
to the UI.</li> <li>Fixed potential infinite loop in the <code>Menu</code> widget.</li> <li>Added context menu to the file browser to be able to create folders and remove files.</li> <li>Significantly improved test coverage for <code>fyrox-core</code> and <code>fyrox-resource</code> crates (kudos to
<a href="https://github.com/san-smith" target="_blank" rel="noopener noreferrer">@san-smith<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>)</li> <li>Optional node deletion dialog to warn if a node is referenced somewhere in the graph.</li> <li>Fixed potential double free issue in the vertex buffer.</li> <li>Fixed unsoundness of type-erasure in the vertex buffer.</li> <li><code>Graph::find_references_to</code> to search for node references in the graph.</li> <li><code>Reflect::apply_recursively</code> for recursive iteration over the descendant fields of an object.</li> <li>Added <code>try</code> reserved keyword for <code>fyrox-template</code>.</li> <li>Built-in sky box for <code>Camera</code> scene node.</li> <li>Improved search in the World Viewer.</li> <li>Make <code>TriangleDefinition</code> trivially-copyable.</li> <li>Major UI documentation improvements.</li> <li>Docs for <code>VectorImage</code>, <code>ScrollPanel</code>, <code>RectEditor</code>, <code>RangeEditor</code>, <code>ProgressBar</code>, <code>ListView</code>, <code>Canvas</code>,
<code>SearchBar</code>, <code>ScrollViewer</code>, <code>Expander</code>, <code>KeyBindingEditor</code>, <code>HotKeyEditor</code>, <code>Tree</code>, widgets.</li> <li>Major book improvements.</li></ul> <h2 id="support"> Support</h2> <p>If you want to support the development of the project, click one of the links below. Preferable way is to use
<a href="https://boosty.to/fyrox" target="_blank" rel="noopener noreferrer">Boosty<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> - this way the money will be available for the development immediately.
Alternatively you can use <a href="https://www.patreon.com/mrdimas" target="_blank" rel="noopener noreferrer">Patreon<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>, but in this case the money will
be on-hold for unknown period of time (<a href="https://github.com/FyroxEngine/Fyrox/issues/363" target="_blank" rel="noopener noreferrer">details are here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</p> <p>Also, you can help by fixing one of the <a href="https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">"good first issues" <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>,
adding a desired feature to the engine, or making a contribution to the <a href="https://github.com/fyrox-book" target="_blank" rel="noopener noreferrer">book<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/77.7d325b71.js" defer=""></script><script src="/assets/js/18.e8cf7feb.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fyrox Game Engine 0.31]]></title>
            <description><![CDATA[Fyrox 0.31 includes editor improvements, documentation improvements, overall usability improvements, bug fixes and more]]></description>
            <link>https://fyrox.rs/blog/post/fyrox-game-engine-0-31/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/fyrox-game-engine-0-31/</guid>
            <pubDate>Sat, 22 Jul 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">Fyrox Game Engine 0.31</h1> <div class="content__default"><p>I'm happy to announce that Fyrox 0.31 has been released! Fyrox is a modern game engine written in Rust, it helps
you to create 2D and 3D games with low effort using native editor; it is like Godot, but in Rust. This release includes
editor improvements, documentation improvements, overall usability improvements, bug fixes and more.</p> <h2 id="editor-improvements"> Editor Improvements</h2> <p>The editor has the most amount of changes in this release. This includes custom plugins, ability to open multiple scenes,
ability to save and load docking manager layout, and many more.</p> <h3 id="editor-plugins"> Editor Plugins</h3> <p><img src="https://fyrox.rs/assets/0.31/plugin.gif" alt="layout"></p> <p>It is now possible to create plugins for the editor. The gif above shows a simple plugin that has a window with a single
button, that increases scale 2x on each click. It's source code is quite simple and straightforward:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">fyrox<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">core<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">Log</span><span class="token punctuation">,</span> <span class="token namespace">pool<span class="token punctuation">::</span></span><span class="token class-name">Handle</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">gui<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
        <span class="token namespace">button<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">ButtonBuilder</span><span class="token punctuation">,</span> <span class="token class-name">ButtonMessage</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token namespace">message<span class="token punctuation">::</span></span><span class="token class-name">UiMessage</span><span class="token punctuation">,</span>
        <span class="token namespace">widget<span class="token punctuation">::</span></span><span class="token class-name">WidgetBuilder</span><span class="token punctuation">,</span>
        <span class="token namespace">window<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">WindowBuilder</span><span class="token punctuation">,</span> <span class="token class-name">WindowTitle</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Thickness</span><span class="token punctuation">,</span> <span class="token class-name">UiNode</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">fyroxed_base<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">plugin<span class="token punctuation">::</span></span><span class="token class-name">EditorPlugin</span><span class="token punctuation">,</span>
    <span class="token namespace">scene<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">commands<span class="token punctuation">::</span>graph<span class="token punctuation">::</span></span><span class="token class-name">ScaleNodeCommand</span><span class="token punctuation">,</span> <span class="token namespace">commands<span class="token punctuation">::</span></span><span class="token class-name">SceneCommand</span><span class="token punctuation">,</span> <span class="token class-name">Selection</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Editor</span><span class="token punctuation">,</span> <span class="token class-name">Message</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyEditorPlugin</span> <span class="token punctuation">{</span>
    tool_window<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">UiNode</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    increase_scale<span class="token punctuation">:</span> <span class="token class-name">Handle</span><span class="token operator">&lt;</span><span class="token class-name">UiNode</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">MyEditorPlugin</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>editor<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Editor</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> editor<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>user_interface<span class="token punctuation">.</span><span class="token function">build_ctx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> increase_scale<span class="token punctuation">;</span>
        <span class="token keyword">let</span> tool_window <span class="token operator">=</span> <span class="token class-name">WindowBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">WidgetBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">with_title</span><span class="token punctuation">(</span><span class="token class-name">WindowTitle</span><span class="token punctuation">::</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"My Editor Plugin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">with_content</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                increase_scale <span class="token operator">=</span> <span class="token class-name">ButtonBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
                    <span class="token class-name">WidgetBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_margin</span><span class="token punctuation">(</span><span class="token class-name">Thickness</span><span class="token punctuation">::</span><span class="token function">uniform</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">with_text</span><span class="token punctuation">(</span><span class="token string">"Make Selection 2x Bigger"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                increase_scale
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">Self</span> <span class="token punctuation">{</span>
            tool_window<span class="token punctuation">,</span>
            increase_scale<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">EditorPlugin</span> <span class="token keyword">for</span> <span class="token class-name">MyEditorPlugin</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">on_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> _editor<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Editor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Editor plugin successfully initialized!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">on_ui_message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">UiMessage</span><span class="token punctuation">,</span> editor<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Editor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">ButtonMessage</span><span class="token punctuation">::</span><span class="token class-name">Click</span><span class="token punctuation">)</span> <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Check if our plugin's button was clicked.</span>
            <span class="token keyword">if</span> message<span class="token punctuation">.</span><span class="token function">destination</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>increase_scale <span class="token punctuation">{</span>
                <span class="token comment">// Fetch current scene being edited.</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>editor_scene<span class="token punctuation">)</span> <span class="token operator">=</span> editor<span class="token punctuation">.</span>scenes<span class="token punctuation">.</span><span class="token function">current_editor_scene_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> engine_scene <span class="token operator">=</span> <span class="token operator">&amp;</span>editor<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>scenes<span class="token punctuation">[</span>editor_scene<span class="token punctuation">.</span>scene<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Selection</span><span class="token punctuation">::</span><span class="token class-name">Graph</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>editor_scene<span class="token punctuation">.</span>selection <span class="token punctuation">{</span>
                        <span class="token comment">// Increase scale of each selected node.</span>
                        <span class="token keyword">for</span> node <span class="token keyword">in</span> selection<span class="token punctuation">.</span><span class="token function">nodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">let</span> old_scale <span class="token operator">=</span>
                                <span class="token operator">*</span><span class="token operator">*</span>engine_scene<span class="token punctuation">.</span>graph<span class="token punctuation">[</span><span class="token operator">*</span>node<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">local_transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token comment">// Put scaling command to the commands queue.</span>
                            editor<span class="token punctuation">.</span>message_sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">DoSceneCommand</span><span class="token punctuation">(</span>
                                <span class="token class-name">SceneCommand</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">ScaleNodeCommand</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
                                    <span class="token operator">*</span>node<span class="token punctuation">,</span>
                                    old_scale<span class="token punctuation">,</span>
                                    old_scale<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Such plugin can be registered in your <code>editor</code> project (if you use standard project structure generated by the
<code>fyrox-template</code> tool) like so:</p> <div class="language-rust extra-class"><pre class="language-rust"><code><span class="token punctuation">...</span>
<span class="token keyword">let</span> plugin <span class="token operator">=</span> <span class="token class-name">MyEditorPlugin</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> editor<span class="token punctuation">)</span><span class="token punctuation">;</span>
editor<span class="token punctuation">.</span><span class="token function">add_editor_plugin</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Editor plugins allows you extending the editor as you want, adding any missing (yet) functionality, creating tools of any
complexity that can save heaps amount of time by removing tedious parts from your work. You can also share your plugins
with other people as a standard Rust crate, if they operate only on engine entities (or introduce their own).</p> <p>Editor plugins are still somewhat experimental, but they already can save a lot of time and make the editor fully
configurable.</p> <h3 id="ability-to-focus-editor-s-camera-on-an-object"> Ability to Focus Editor's Camera on an Object</h3> <p><img src="https://fyrox.rs/assets/0.31/focus.gif" alt="layout"></p> <p>It is now possible to focus the editor camera on an object either by double-clicking it in the World Viewer or by <code>[F]</code>
hotkey. This feature helps you find a selected object very quickly, and very useful in case of complex scenes with
lots of objects.</p> <h3 id="ability-to-open-multiple-scenes-at-once"> Ability to Open Multiple Scenes at Once</h3> <p><img src="https://fyrox.rs/assets/0.31/multiscene.gif" alt="multiscene"></p> <p>For a long time, the editor was able to open only one scene at a time, which slowed down the work if you use lots of
prefabs and switching between them very often. Now it is fixed, and you can open multiple scenes at once. Keep in mind,
that only one scene can be edited at a time, you can't undock scene tabs and see/edit multiple scenes at once.</p> <h3 id="ability-save-docking-manager-layout"> Ability Save Docking Manager Layout</h3> <p><img src="https://fyrox.rs/assets/0.31/layout.gif" alt="layout"></p> <p>It is now possible to save and load the layout of editor panels. It is a huge usability improvement which saves a lot
of time if you use custom combination of windows and the default layout is not suitable for you. For example, if you're
working with the animation editor, it is undocked and hidden by default so before, you had to open and dock it every time
you restarting the editor, losing time for nothing.</p> <h3 id="additional-ways-to-open-editor-scenes"> Additional Ways to Open Editor Scenes</h3> <p><img src="https://fyrox.rs/assets/0.31/open.png" alt="open"></p> <p>Previously, to open a scene you was forced to go to <code>File -&gt; Load Scene</code> menu, find you scene in the file selector and
click "load". In some cases that was enough, but in many cases it is very tedious and now it possible to open scenes
from the asset browser by simply right-clicking on it and pressing <code>Open</code>.</p> <p><img src="https://fyrox.rs/assets/0.31/open2.png" alt="open 2"></p> <p>It is also possible to open parent prefab of a scene node in the world viewer, which also saves time in some cases.</p> <h3 id="camera-preview"> Camera Preview</h3> <p><img src="https://fyrox.rs/assets/0.31/camera.gif" alt="camera"></p> <p>Camera preview is now done via separate preview panel. This panel automatically shows up when you select a camera,
it allows you to turn the preview mode on or off. Previously you was forced to right-click on camera now in the
world viewer, click "Preview" and then click do it again to exit the preview mode.</p> <h3 id="other-editor-improvements"> Other Editor Improvements</h3> <p>Newly created objects are now automatically selected. This saves extra clicks and makes scene creation smoother.</p> <h2 id="_9-slice-widget"> 9-slice Widget</h2> <p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7a/Traditional_scaling_vs_9-slice_scaling.svg" alt="9slice"></p> <p>9-slice image widget (kudos to <a href="https://github.com/DrAlta" target="_blank" rel="noopener noreferrer">@DrAlta<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>) allows you to divide an image into 9 segments where
corners aren't distorted, while other parts can be distorted. It is used for scaling of 2D images, such as buttons, or
anything else that has some sort of border that shouldn't be distorted when applying arbitrary scaling.</p> <h2 id="behaviour-trees"> Behaviour trees</h2> <p>Behaviour trees now has support of <code>Inverter</code> node, that inverses the result of its child node. It is useful
to inverse the result of logical nodes, so you don't need to have two versions of logical nodes. It also has useful
shortcuts to create behaviour tree nodes.</p> <h2 id="documentation-improvements"> Documentation Improvements</h2> <p>This release contains lots of documentation improvements. This is mostly related to the UI docs, however some of the
other parts of the engine were documented too. In total, more than 20 widgets and scene entities were fully documented
with code examples.</p> <h2 id="book-improvements"> Book Improvements</h2> <p>The book was improved as well. It also includes chapter for various UI widgets, proofreading, corrections, removal of
outdated information.</p> <h2 id="full-list-of-changes-in-random-order"> Full List of Changes in Random Order</h2> <ul><li>Multi-scene editing</li> <li>Docs for <code>Window</code> widget</li> <li>Fixed opengl es usage when opengl is not supported</li> <li>Docs for <code>Decorator</code> widget</li> <li>Added <code>crv</code> extension for <code>CurveLoader</code></li> <li>Basic editor plugins support</li> <li>Updated dependencies</li> <li>Expose all editor fields so they can be accessible outside</li> <li>Docs for <code>UuidEditor</code> widget</li> <li>Use user_data field of physics entities to store handle to engine entity</li> <li>Ability to encode/decode handles to/from u128</li> <li>Ability to fetch all contact pairs from 2d/3d physics worlds</li> <li>Docs for <code>MessageBox</code> widget</li> <li><code>Graph::aabb_of_descendants</code></li> <li>Aabb api improvements</li> <li>Ability to open asset of a node from the world viewer</li> <li>Improved <code>impl_component_provider</code> macro to accept <code>field.foo.ab</code> chains</li> <li>Docs for navmesh node</li> <li>Useful shortcuts for behaviour trees</li> <li>Fixed standard materials for new serialization format</li> <li>Inverter node for behaviour trees</li> <li>Docs and examples for <code>VertexBuffer</code></li> <li>Added <code>VertexTrait</code> to prevent using a vertex type with different layout</li> <li>Improved <code>surface</code> mod docs</li> <li>Added <code>elapsed_time</code> in <code>PluginContext</code></li> <li>Use all texture channels in sprite fragment shader</li> <li>Load editor's docking manager layout on reconfiguration</li> <li>Open window of a tile when restoring docking manager layout</li> <li>Ability to save/load editor's docking manager layout</li> <li>Prevent panic in ui search methods</li> <li>Ability to apply saved docking manager layout + improved layout saving</li> <li>Ability to save docking manager layout</li> <li>Changed error to warning when unable to load missing options file</li> <li>Fixed crash when exiting the editor</li> <li>Fixed opening arbitrary files from asset browser</li> <li>Ability to open scenes from asset browser</li> <li>User-defined data for tabs</li> <li>Ability to add and remove tabs in the <code>TabControl</code> widget via messages</li> <li>Added a nine patch widget</li> <li>Fixed tab control's content alignment</li> <li><code>can_be_closed</code> flag for <code>TabControl</code> tabs</li> <li>Ability to close tabs in <code>TabControl</code> widget</li> <li>Docs for <code>TabControl</code> widget</li> <li>Ability to catch the moment when the active tab of <code>TabControl</code> changed</li> <li>Docs for <code>ScrollBar</code> widget</li> <li>Docs for <code>Popup</code> widget</li> <li>Docs for <code>NumericUpDown</code> widget</li> <li>Ability to change <code>StackPanel</code>'s orientation via message</li> <li>Ability to change <code>WrapPanel</code>'s orientation via message</li> <li>Docs for <code>WrapPanel</code> widget</li> <li>Docs for <code>CheckBox</code> widget</li> <li>Docs for <code>Widget</code></li> <li>Docs for <code>TextBox</code> widget</li> <li>Docs for <code>StackPanel</code> widget</li> <li>Docs for <code>Grid</code> widget</li> <li>Docs for <code>Image</code> widget</li> <li>Docs for <code>Text</code> widget</li> <li>Fyrox-ui docs</li> <li>Docs for <code>Button</code> widget</li> <li>Access to current transform of <code>TransformStack</code></li> <li>Docs for <code>Border</code></li> <li>Ability to pass doc comments in <code>define_constructor</code> macro</li> <li>Docs for <code>BuildContext</code></li> <li>Docs for <code>UiNode</code></li> <li>Iterative font atlas packing.</li> <li>Docs for <code>Thickness</code></li> <li>Docs for widget alignments</li> <li>Docs for <code>BaseControl</code></li> <li>Update hierarchical data when instantiating a prefab</li> <li>Docs for <code>trait Control</code></li> <li>Hotkey to focus editor's camera on a selected object</li> <li>Helper methods for <code>Frustum</code></li> <li>Ability to focus editor's camera on an object</li> <li>Helper methods for <code>TextureKind</code></li> <li>Camera fitting functionality</li> <li>Aabb helper methods</li> <li>Save editor settings only if they were modified by user</li> <li><code>Camera::frustum</code> method.</li> <li>Fixed camera preview + added camera preview control panel</li> <li>Automatically select newly created scene nodes in the editor</li></ul> <h2 id="semver-importance"> SemVer Importance</h2> <p>This release is slightly out of schedule because of breaking changes in <code>nalgebra</code> crate, that were published as a patch.
These changes broke backward compatibility in serialization, which in its turn caused the engine to
<a href="https://github.com/FyroxEngine/Fyrox/issues/472" target="_blank" rel="noopener noreferrer">panic<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> on attempt to load standard shaders. This situation clearly
shows why following <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">SemVer rules<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> is important.</p> <h2 id="support"> Support</h2> <p>If you want to support the development of the project, click one of the links below. Preferable way is to use
<a href="https://boosty.to/fyrox" target="_blank" rel="noopener noreferrer">Boosty<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> - this way the money will be available for the development immediately.
Alternatively you can use <a href="https://www.patreon.com/mrdimas" target="_blank" rel="noopener noreferrer">Patreon<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>, but in this case the money will
be on-hold for unknown period of time (<a href="https://github.com/FyroxEngine/Fyrox/issues/363" target="_blank" rel="noopener noreferrer">details are here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</p> <p>Also, you can help by fixing one of the <a href="https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">"good first issues" <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>,
adding a desired feature to the engine, or making a contribution to the <a href="https://github.com/fyrox-book" target="_blank" rel="noopener noreferrer">book<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/76.3d39fc87.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fyrox Game Engine 0.30]]></title>
            <description><![CDATA[Fyrox 0.30 is a huge release, mostly focused on animation, editor, audio, quality-of-life improvements.]]></description>
            <link>https://fyrox.rs/blog/post/fyrox-game-engine-0-30/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/fyrox-game-engine-0-30/</guid>
            <pubDate>Wed, 07 Jun 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">Fyrox Game Engine 0.30</h1> <div class="content__default"><p>I'm happy to announce that Fyrox 0.30 has been released! Fyrox is a modern game engine written in Rust, it helps
you to create 2D and 3D games with low effort using native editor; it is like Godot, but in Rust. This is the
biggest release of the engine since the very beginning. This release is mostly focused on animation,
editor, audio, quality-of-life improvements.</p> <h2 id="animation"> Animation</h2> <p>Animation system was significantly improved, and now it should be much easier to create complex animations
that are used all over the place in the modern game development.</p> <h3 id="root-motion"> Root Motion</h3> <p>Root motion is a special animation technique of motion transfer from a root bone to a physical capsule that
moves characters in games. It is used to prevent "floating" or "sliding" effect; to perfectly match capsule
motion with the motion from the animation. To get better understanding of how it works, check the video:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/0lG8Spzk128" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>As you can see, root motion significantly improves overall animation quality: feet matches the ground and
the motion looks natural.</p> <h3 id="blend-space"> Blend Space</h3> <p><img src="https://fyrox.rs/assets/twif15/blend_space.gif" alt="blend space"></p> <p>Blend space is an animation blending technique which allows you to blend multiple animations into one based
on two numeric input parameters (sampling point). Blend space consists of any number of points, located in
the value space; these points are triangulated:</p> <p><img src="https://fyrox.rs/assets/twif15/blend_space.png" alt="blend space 2"></p> <p>To blend animation, you need to pass sampling point in (visualized as a crosshair on the screenshot) and
the blend space will calculate weights for three animation poses around the sampling point. See the gif
above to get better understanding.</p> <p>Where this technique is used? In pretty much any relatively complex modern game. It is used mainly to
blend locomotion animations based on two parameters: speed and direction. For example, on the X axis you
can have direction angle and on Y axis - speed. Then you put desired animations on the blend space, and
it will blend everything accordingly to speed and direction: if a character moves fast, then running
animation will prevail, if it needs to run left - direction will be -1 and running left animation will
prevail and so on. It is a very powerful and flexible technique, that helps achieving naturally looking
animations on most conditions.</p> <h3 id="blend-shapes"> Blend Shapes</h3> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/2VtYk2vDoTY" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>Blend shapes allows you to dynamically change 3D meshes; they are widely used in games to create facial
animation, to dynamically add details to character body parts, etc. It is quite simple, yet very powerful
mechanism, that opens a wide range of possible uses: you can create cut-scenes directly on the engine where
your characters will speak using pre-defined set of shapes associated with <a href="https://en.wikipedia.org/wiki/Viseme" target="_blank" rel="noopener noreferrer">visemes<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.
You can also use this to create characters creator for your game - all you need to do is to specify a set
of offsets for desired parts of face and then allow a player to mix these parts with any proportions they
like. In other words, actual use of this functionality is limited by your imagination.</p> <h3 id="ability-to-animate-material-properties"> Ability to Animate Material Properties</h3> <p>It is now possible to animate properties of any material, it adds a lot of control for various visual
effects that use custom shaders. Animation editor is now able to bind to material properties, making
something like this possible:</p> <p><img src="https://fyrox.rs/assets/twif12/material_animation.gif" alt="material animation"></p> <p>This can be applied to pretty much any numeric shader uniform, which adds an ability to create any kinds
of visual effects.</p> <h3 id="compound-rules-for-absm-transitions"> Compound Rules For ABSM Transitions</h3> <p>In previous versions of the engine, transitions in animation blending state machines were driven directly
by a single <code>bool</code> property. In simple cases it was enough, however combining multiple variables was
problematic, because you need to introduce another variable for the result and use it in your ABSM. This
sometimes resulted in exponential growth of the amount of variables. In this release, the issue was solved
by introducing computational graph for logical expressions:</p> <p><img src="https://fyrox.rs/assets/0.30/absm_conditions.png" alt="absm conditions"></p> <p>Now you can combine multiple logical values using standard logical operations such as AND, OR, NOT, XOR.
Previous functionality of fetching single bool parameter, was moved to <code>Parameter</code>.</p> <h3 id="animation-related-actions-for-enter-leave-state-events"> Animation-Related Actions for Enter/Leave State Events</h3> <p>It is now possible to rewind, enable, disable specific animations when entering/leaving ABSM state. It is
very useful if you have a one-shot animation (for example, for a melee attack) and you want it to play again
when some state was activated.</p> <p><img src="https://fyrox.rs/assets/0.30/absm_actions.png" alt="absm actions"></p> <h3 id="other-animation-system-changes"> Other Animation System Changes</h3> <p>Animation blending state machine event <code>ActiveStateChanged</code> is now allows you to fetch previously active
state when a transition to another state was done.</p> <p>Previously, ABSM editor had a bug where activation of a state/transition on one layer was shown on the layer being
edited, causing confusion while debugging ABSMs.</p> <p>Animation blending performance was slightly improved by removing unnecessary calculation steps.</p> <h2 id="reflection-refactoring"> Reflection Refactoring</h2> <p>Main downside of the previous version of reflection system in the engine is that it does not support reflection of types
with interior mutability. You simply cannot "inspect" fields of a of type with interior mutability
(such as <code>Mutex&lt;T&gt;</code>, <code>RwLock&lt;T&gt;</code>, <code>RefCell&lt;T&gt;</code>, <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, etc.), because anything that is located
inside these types require to hold some kind of lock while accessing the internals (<code>MutexGuard&lt;T&gt;</code> in case of
<code>Mutex</code>, <code>Ref&lt;T&gt;/RefMut&lt;T&gt;</code> in case of <code>RefCell</code> and so on).</p> <p>Interior mutability support in reflection system is crucial for animation system of the engine. Its main
usage is to animate numeric parameters of renderer materials. This ability allows you change shader uniforms
via standard animation pipeline.</p> <p>The API of <code>Reflect</code> trait was changed
<a href="https://github.com/FyroxEngine/Fyrox/blob/reflection_refactoring/fyrox-core/src/reflect.rs#L154" target="_blank" rel="noopener noreferrer">completely<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.
Now, instead of returning references immediately, every function that previously returned references now has
additional parameter. This parameter is a reference to a closure that allows you to do something with a reference
to inner value. Such approach allows to hold mutex lock (and analogues) while doing something with the inner data.</p> <p>Another important reflection system improvement is hash map support. This functionality was added to have an
ability to animate properties of materials via engine's animation system. This was a pretty easy change, but it
added more flexibility to the reflection system.</p> <h2 id="android-support"> Android Support</h2> <p><img src="https://fyrox.rs/assets/twif17/android.gif" alt="platformer on android"></p> <p>Android support was requested <a href="https://github.com/FyroxEngine/Fyrox/issues/175" target="_blank" rel="noopener noreferrer">multiple times<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> already
and after ~1.5 years from the first request it is finally added. Current renderer implementation, however, is not
great for mobile devices, because it uses graphics rendering techniques that are PC-oriented, so rendering performance
is quite bad if you use complex 3D graphics. However it is more or less fine on 2D graphics. There's a separate
<a href="https://github.com/FyroxEngine/Fyrox/issues/434" target="_blank" rel="noopener noreferrer">task<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> about writing a separate, lightweight renderer for
mobile devices. Keep in mind, that you need to have a relatively new device (2015+), that supports
OpenGL ES 3.0 to get the engine working on mobile devices.</p> <h2 id="headless-mode"> "Headless" Mode</h2> <p>Game servers usually do not render anything, nor playing any sounds. Even main application window can not exist.
Previously, it was somewhat impossible to fully prevent the engine from creating the window, render graphics and
output sounds. Now it is possible, to initialize the engine in "headless" mode without the window, renderer and
audio system initialized. It can be put back into standard mode at any time.</p> <h2 id="audio-system-refactoring"> Audio System Refactoring</h2> <p>Previously, the sound system supported direct output of sound samples to an audio playback device with some
effects that can take samples from sound sources and put processed samples in the audio playback device.
It worked ok for most cases, but it was quite rigid and effect management was a pain. To add more flexibility in
audio processing pipeline there was added two new entities: audio buses and audio bus graph.</p> <h3 id="audio-bus"> Audio Bus</h3> <p>Audio bus is a sound processing unit that takes samples from various sound sources, applies zero or more effects to
the samples and sends the samples either to an audio playback device or some other audio bus (see the next
section). Effect list includes: lowpass filter, highpass filter, bandpass filter, allpass filter, low and
high shelf filters, reverberation.</p> <h3 id="audio-bus-graph"> Audio Bus Graph</h3> <p>Audio bus graph is a set of audio buses connected with each other: one audio bus could be a source of samples
for another audio bus or for an audio device:</p> <p><img src="https://fyrox.rs/assets/twif13/data_flow_diagram.png" alt="data flow diagram"></p> <p>Such structure provides high flexibility, allowing you to create complex processing steps for the sound in your game.</p> <p>In action the graph looks (sounds) like this:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/6-M3LUv9Jto" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <h3 id="other-audio-improvements"> Other Audio Improvements</h3> <p>Sound panning in HRTF mode was fixed (left was right and vice versa). Fyrox now uses <a href="https://crates.io/crates/tinyaudio" target="_blank" rel="noopener noreferrer">TinyAudio<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>
crate as a sound output backend. This is a new, tiny crate that serves a single purpose - make audio output as simple
as possible. Also, compared to <code>cpal</code>, this crate it does not have weird sound artifacts on WebAssembly and builds fine
on Android platform.</p> <h2 id="scene-graph-improvements"> Scene Graph Improvements</h2> <p>Scene graph has some improvements as well.</p> <h3 id="ability-to-change-graph-root"> Ability to Change Graph Root</h3> <p>Sometimes there's a need to change scene graph root (for instance, to reorder the children nodes in a different
manner) and it was impossible to do in the previous version of the engine. This is now possible to do in the
current release. This could be done either from code by using <code>Graph::change_root/change_root_inplace</code> or
in the editor by right-clicking a node in the World Viewer and pressing <code>Make Root</code>.</p> <h3 id="navigation-mesh-node"> Navigation Mesh Node</h3> <p>Navigational meshes are now scene nodes and part of the scene graph. Previously, navmeshes were stored in a
separate storage which caused a lot of issues with property inheritance, scene integrity checks and many
other small issues.</p> <p>Navigation Mesh panel in the editor was made floating by default and it automatically appears when you
select the node.</p> <h3 id="improved-graph-search"> Improved Graph Search</h3> <p>It is now possible to do up-search in the <code>Graph</code>. It could be useful to find a parent entity of with a
particular component and get some data from it. Every graph search method is now returns a tuple
<code>Option&lt;Handle&lt;Node&gt;, &amp;Node&gt;</code> - as you can see they now also returns a reference to found nodes. This is
useful to prevent re-borrowing after you found a node.</p> <h2 id="message-passing-for-scripts"> Message Passing for Scripts</h2> <p>Message passing is a mechanism that allows you send some data (message) to a node, hierarchy of nodes or
the entire graph. Each script can subscribe for a specific message type. It is efficient way
for decoupling scripts from each other. For instance, you may want to detect and respond to some event in
your game. In this case when the event has happened, you send a message of a type and every "subscriber"
will react to it. This way subscribers will not know anything about sender(s); they'll only use message
data to do some actions.</p> <h2 id="determinism-for-particle-systems"> Determinism for Particle Systems</h2> <p>Previously, particle systems used global pseudo-random numbers generator (PRNG), which resulted in non-deterministic
behavior. Now, each instance of particle system has its own PRNG and saves its seed, which makes behaviour of
particle systems deterministic. It is even possible to rewind particle systems to a particle time and the result
will always be the same (until PRNG implementation is not changed).</p> <h2 id="physics"> Physics</h2> <p>Previously, any user force or torque applied a to rigid body (via respective methods) will remain the same
until you change it again, this behavior is now changed - the engine resets it to zero.</p> <p>Terrain height map colliders now takes node scaling into account.</p> <h2 id="rendering"> Rendering</h2> <p>Renderer was refactored to gather graphical data from scene nodes. Previously, the renderer gathered the data
by itself, but it was very restrictive and now it calls <code>Node::collect_render_data</code> for every node to generate
render batches. Also, frustum culling is now done on scene node side - the renderer only provides enough info
for clipping and you're free to implement it in any way you like. The refactoring is not fully done yet, some
parts of the renderer still manually collects render data from scene nodes of specific, hardcoded types. This
refactoring improves flexibility of the rendering.</p> <h3 id="bone-matrices"> Bone Matrices</h3> <p>Previous versions of the engine had a limit of 64 bones per mesh surface, now it is pretty much unlimited (
standard shaders, however, still has 255 bones limit because it stores bones indices in a single byte).
Previous limit was forced by the limited amount of shader uniforms, the new limit, is only limited by a
data type used to store the numbers and the amount of VRAM.</p> <h3 id="offscreen-ui-rendering"> Offscreen UI Rendering</h3> <p>Offscreen UI rendering (rendering into texture) is now compatible with HDR pipeline, previously the textures
looked pale.</p> <h3 id="lightmapper-fixes"> Lightmapper Fixes</h3> <p><img src="https://fyrox.rs/assets/twif17/lightmap.png" alt="ligthmap"></p> <p>As you might know, Fyrox has built-in lightmapper and it is integrated in the editor. For quite a long time,
there was a bug that corrupted GPU vertex buffers when preparing second UV map for light maps. Which resulted
in weird graphical artifacts. Also, when saving a scene with light map, node handles weren't correctly remapped
thus leading to panic when trying to load such scene. Now these bugs are fixed you can use lightmapper normally.</p> <h3 id="hdr-fixes-on-opengl-es"> HDR Fixes on OpenGL ES</h3> <p>For about a year, graphics looked pale on WebAssembly compared to PC. That's because of differences between
sRGB frame buffers behavior on OpenGL and OpenGL ES. sRGB frame buffers on OpenGL does not change input
values from shader and write values as is (unless you turn sRGB conversion manually) and convert them to
linear when reading from sRGB textures. On OpenGL ES, however, such conversion is on by default in both
ways and it led to pale-colored output image on platforms such as WebAssembly.</p> <h2 id="ui-improvements"> UI Improvements</h2> <p>UI's <code>DrawingContext</code> is now able to draw arcs and rounded rectangles.</p> <h3 id="generic-vector-t-n-editor"> Generic <code>Vector&lt;T,N&gt;</code> editor</h3> <p><code>fyrox-ui</code> now have generic version of <code>SVector&lt;T, N&gt;</code> editor. Also, this new editor supports limits (min, max),
and step that can be supplied to it using reflection (<code>min</code>, <code>max</code>, <code>step</code> attributes respectively). This can
be useful in your scripts: now your vector parameters can use these attributes.</p> <h3 id="numericupdown-widget"> NumericUpDown Widget</h3> <p>Values of NumericUpDown widget can now be changed by mouse dragging:</p> <p><img src="https://fyrox.rs/assets/twif16/spinner.gif" alt="spinner"></p> <h2 id="editor-improvements"> Editor Improvements</h2> <p>FyroxEd is a native scene editor of the engine, it has lots of various improvements and new features
as well.</p> <h3 id="editor-restyling"> Editor Restyling</h3> <p>The editor now has more cleaner and modern user interface:</p> <p><img src="https://fyrox.rs/assets/twif16/editor.png" alt="editor new"></p> <p>The old version for comparison:</p> <p><img src="https://fyrox.rs/assets/twif16/editor_old.png" alt="editor old"></p> <p>The new style does not have radical differences with the previous one - it just improves existing style,
to make it a bit more attractive.</p> <h3 id="ability-to-search-assets"> Ability to Search Assets</h3> <p>Asset browser is now able to search assets by name:</p> <p><img src="https://fyrox.rs/assets/twif16/search.gif" alt="search"></p> <h3 id="audio-improvements-in-the-editor"> Audio Improvements in the Editor</h3> <p>Sound management in the editor now much more predictable and convenient. Previously, any sound in Playing
state would immediately start playing after you load a scene in the editor, making pretty much impossible
to create sound effects. It is now fixed, every sound is now not updating until you start previewing it.
This can be done in a new audio preview panel:</p> <p><img src="https://fyrox.rs/assets/twif12/audio.png" alt="audio preview panel">.</p> <p>To activate it, all you need to do is to select a Sound node. Then you need to click on <code>Preview</code> checkbox
and the sound will start playing. Any changes made in this panel will not be recorded in the scene, you
can play with the sound as you want to.</p> <h3 id="color-gradient-editor"> Color Gradient Editor</h3> <p>For a long time there was no property editor for <code>Color Over Lifetime</code> field of particle systems. The type of this
field is <code>ColorGradient</code> which allows you to define a set of color points and fetch intermediate values at any
position at the gradient. Now, the editor has property editor for <code>ColorGradient</code> and it works like so:</p> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/EkzDiCpvdhM" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <h3 id="animation-editor"> Animation Editor</h3> <p><img src="https://fyrox.rs/assets/twif14/anim_editor.png" alt="anim editor"></p> <p>The animation editor has many major quality-of-life improvements:</p> <ol><li>Ability to create special bindings to position/scaling/rotation properties of a scene nodes. Such bindings
are much faster in terms of performance and widely used in pretty much any animation.</li> <li>Ability to enable root motion and set its settings, like position and rotation filtering.</li> <li>Ability to reimport animation - this is useful when you need to replace an animation, but preserve its handle.
It is very useful if you already have an Animation Blending State Machine that uses an animation that you want
to change.</li></ol> <p>Imported animations are now enabled by default, previously they were imported as disabled which could lead
to confusions.</p> <p>Animation editor now validates all tracks of your animation, showing every track that has any issues, which may
include deleted scene node, changed property type, missing property binding. It it very useful for rapid
development - any issues are instantly highlighted helping you to fix it as fast as possible.</p> <h3 id="help-menu"> Help Menu</h3> <p>It is now possible to open <a href="https://fyrox-book.github.io/" target="_blank" rel="noopener noreferrer">the book<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> and the <a href="https://docs.rs/fyrox/latest" target="_blank" rel="noopener noreferrer">API reference<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>
from the editor via Help menu:</p> <h3 id="asset-browser"> Asset Browser</h3> <p>Asset Browser now shows texture resources as a textured quad, which is much more convenient than small texture
preview in the asset list.</p> <p><img src="https://fyrox.rs/assets/0.30/asset_preview.png" alt="asset preview"></p> <p>Sound resources will now automatically play (once per selection) when selected in the asset browser. This way
you can "preview" the sounds before using them.</p> <h3 id="editor-performance-improvements"> Editor Performance Improvements</h3> <p>There was a nasty performance degradation bug, that caused the editor to work more slowly over time, especially
when switching between multiple entities too frequently. The cause of bug was context menu system of the UI
framework. Context menus are "standalone" entities, they're not attached directly to a widget, instead widgets
just use their handles. Also, the same context menu can be shared across unlimited amount of other widgets.
Usually, when you deleting UI node, <code>fyrox-ui</code> deletes all children nodes, but since context menu is not a child
node, they weren't deleted, thus leading to tons of context menus left "alive". Now this bug is fixed, by using
a special "shared handle", which is essentially just a <code>Rc&lt;Handle&lt;UiNode&gt;&gt;</code>. It has a custom destructor that
sends a <code>WidgetMessage::Remove</code> message to the context menu when there's no more strong references to it.</p> <h3 id="recent-files"> Recent Files</h3> <p>Recent files list in the editor now sorted and non-existing files are auto-removed from it:</p> <p><img src="https://fyrox.rs/assets/twif13/recent.png" alt="recent files"></p> <h3 id="other-editor-changes"> Other Editor Changes</h3> <p>In the editor it is now possible to change the size of light pictograms - their default size could be too
big in specific cases.</p> <p><code>Lifetime</code> field is now visible again in the <code>Inspector</code>, previously it caused crashes and was temporarily
hidden. It is now possible to create temp nodes in the editor, that will be automatically deleted when the
lifetime reach zero.</p> <p>It is now possible to rewind particle systems during preview mode - it removes all generated particles
and starts generation over.</p> <p>Fixed a bug in the sound preview panel, it was possible to infinitely play a sound, even when preview mode is
disabled.</p> <p>It is now possible to show/hide debug shapes (for lights, cameras, etc.) in the editor.</p> <p>Editor's window position and size is now saved in settings file and restored on next load. It saves extra clicks
when opening/closing the editor in rapid development.</p> <h2 id="resource-management"> Resource Management</h2> <p>Resource management was significantly improved in this release. It includes user-defined resource, resource
dependency graph and various bug fixes.</p> <h3 id="user-defined-resources"> User-Defined Resources</h3> <p>For a long time, Fyrox was able to manage only four hard-coded resource types (textures, models, shaders, curves)
and it was quite restrictive. Now you can create custom resource types. It could be useful to access specific data
using engine's resource manager. Custom resources has a few major advantages over manual resource management via
direct files access:</p> <ol><li>Since Fyrox resource system is asynchronous, your resource can be loaded in separate worker thread which speeds up
loading (since it may run on a separate CPU core).</li> <li>You can access your resources from the Asset Browser and assign their handles to scripts directly from the editor.</li> <li>File access for resource management has an abstraction, that unifies the access over all supported platforms. This
means that you don't need to use <code>fetch</code> API directly, if you're targeting WebAssembly platform, or use <code>AssetManager</code>
on Android.</li></ol> <p>For more info see the <a href="https://fyrox-book.github.io/resources/custom.html" target="_blank" rel="noopener noreferrer">respective chapter<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> in the book.</p> <h3 id="resource-dependency-graph"> Resource Dependency Graph</h3> <p>Resource dependency graph allows you to collect all resources used by a resource. It could be useful when you
need to find unused resources, copy all dependent resources, etc. You can use this functionality in the editor
by right-clicking on a resource and then clicking <code>Dependencies</code>:</p> <p><img src="https://fyrox.rs/assets/0.30/dependencies.png" alt="dependencies"></p> <h3 id="automatic-resource-handle-restoration"> Automatic Resource Handle Restoration</h3> <p>When the engine saves a scene that has resource handles, those handles saves only path to resources, not
the actual content. When loading the same scene, the engine re-loads all resources, but all handles scattered
around must be restored manually to point to actual resource data. This is now fixed, the engine will use
reflection to iterate over each field of every scene node and restore the handles.</p> <h3 id="other-resource-management-changes"> Other Resource Management Changes</h3> <p>It is now possible to fetch standard shader names. Sound nodes now have validation, which check if a sound source
has missing sound buffer.</p> <h2 id="property-inheritance"> Property Inheritance</h2> <p>Property inheritance is used to propagate changes of unmodified properties from a prefab to its instances. For example,
you can change scale of a node in a prefab and its instances will have the same scale too, unless the scale is
set explicitly in an instance. Such feature allows you to tweak instances, add some unique details to them, but take
general properties from parent prefabs.</p> <p>In this release its reliability was significantly improved. This allowed to not serialize content of non-modified
properties (since their data is stored in parent prefab) which resulted in significant decrease of disk space usage
for derived prefabs.</p> <h2 id="terrain"> Terrain</h2> <p>Terrain node was changed significantly in this release. These changes will be a strong basis for further
improvements.</p> <h3 id="ability-to-change-height-map-and-mask-size"> Ability to Change Height Map and Mask Size</h3> <p>It is now possible to change height map and mask sizes. It could be useful if you created large terrain and want
to make it smaller and vice versa. Height maps or mask will be resampled to the new size, which could result in
data loss if you decreasing the size.</p> <h3 id="improved-chunking"> Improved Chunking</h3> <p>Previously, it was impossible to add or remove terrain's chunks which was very limiting and it was basically
impossible to add a new editable portion to existing terrain. For example, if you made a terrain and decided
extend it from any side to add more content there - it was impossible, now, however, this issue is solved and
terrain could be extended from any side.</p> <h3 id="level-of-detail"> Level-of-detail</h3> <p>Terrains now has powerful level-of-detail system implemented. It is now possible to create giant terrains (64x64km)
and render them in about a millisecond.</p> <p><img src="https://fyrox.rs/assets/0.30/terrain_lod.png" alt="terrain lod"></p> <h3 id="ability-to-flatten-slopes"> Ability to Flatten Slopes</h3> <p>It is now possible to flatten terrain slopes by using special brush mode. It is very useful to create plateaus,
which can then be used to place some game objects on it.</p> <h3 id="ability-to-use-texture-as-height-map"> Ability to Use Texture as Height Map</h3> <p>This is very simple way to create terrains - all you need is a grayscale image that can be made in any graphics
editor and you need to assign it to <code>heightmap</code> field of a chunk:</p> <p><img src="https://fyrox.rs/assets/0.30/terrain_heightmap.png" alt="height map"></p> <h3 id="other-terrain-improvements"> Other Terrain Improvements</h3> <p>Fixed terrain editing in the editor; its material property is now exposed in the Inspector. Terrains geometry
is now update immediately when doing changes to the height map.</p> <h2 id="side-projects"> Side Projects</h2> <p><a href="https://github.com/mrDIMAS/StationIapetus" target="_blank" rel="noopener noreferrer">Station Iapetus<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> is sci-fi shooter that is built using the engine.
Over the past month it is again in active development, <a href="github.com/mrDIMAS">@mrDIMAS</a> is preparing basic game
mechanics (mostly on a testbed level). Once they're done, he will start making new game levels. Old game
levels can still be loaded, but their interactive entities (such as doors) will not work as expected.</p> <h2 id="full-list-of-changes-in-random-order"> Full List of Changes in Random Order</h2> <ul><li>Ability to change graph root to arbitrary graph node.</li> <li>Ability to change graph root in the editor.</li> <li>Optional checkerboard background for <code>Image</code> widget.</li> <li>Simplified animation blending.</li> <li>Mutable access to curve key's value.</li> <li>Added property validation for the animation editor.</li> <li>Track validation for the animation editor.</li> <li>Ability to set widget's tooltip via message.</li> <li>Correctly sync track names in the animation editor.</li> <li>Ability to change target nodes on animation tracks.</li> <li>Preserve parent when extracting a sub-graph from a graph.</li> <li>Refactored editor scene structure to allow modifying the root node.</li> <li>Play sound buffer resource when inspecting it in the asset browser.</li> <li>Show textured quad in resources previewer when inspecting a texture.</li> <li>Configurable scroll speed for <code>ScrollViewer</code> widget + speed up scrolling 2x.</li> <li>Helper methods to quickly check a resource state.</li> <li>Helper methods to access script components faster.</li> <li>Improved range property editor.</li> <li><code>Enter State</code> for state menu in absm editor. Works the same as double click, removes confusion for ppl that does not
get used to double-click on things.</li> <li>Leave preview mode when closing or changing scenes in the editor.</li> <li>Prevent panic when trying to generate random number from an empty range.</li> <li>Serialize delay line samples as POD array.</li> <li>Optional ability to save current scene in text form for debugging.</li> <li>Do not render disabled sprite nodes.</li> <li>Fixed property inheritance subtle bugs.</li> <li>Do not allow revering a property value in the editor if there's no parent.</li> <li>Do not save content of non-modified inheritable variables.</li> <li>Fixed directional light docs.</li> <li>Fixed <code>Node::is_x,as_x,as_x_mut</code> methods.</li> <li><code>Graph::try_get_script_of + try_get_script_of_mut</code> methods</li> <li><code>Base::root_resource</code> - allows you to find root resource in dependency graph.</li> <li>Prevent deadlock on self-referencing model resources</li> <li>UUID for widgets.</li> <li>Save editor's window position and size into editor's settings.</li> <li>Apply local scaling of terrain to heightfield collider.</li> <li><code>MachineLayer::is_all_animations_of_state_ended</code></li> <li>Ability to fetch all animations of a state in ABSM layer.</li> <li>Added <code>IsAnimationEnded</code> condition for ABSM transitions.</li> <li>ABSM state actions. Allows you to rewind/enable/disable specific animations when entering/leaving a state.</li> <li>Fixed incorrect "state enter" event sent from source instead of dest.</li> <li>Added a collection of built-in resources for resource manager. This collection is used on resource deserialization
step to restore references to built-in resources.</li> <li>Pre-compile built-in shaders on engine startup.</li> <li>Ability to change camera zoom speed in the editor.</li> <li><code>Plugin::before_rendering</code></li> <li>Matrix storage cache to prevent driver synchronization steps.</li> <li>Persistent identifiers for render entities.</li> <li>Improved deserialization performance.</li> <li>Use <code>fast_image_resize</code> crate to generate mip maps (which gave 5x performance boost).</li> <li>Configurable filter for mip-map generation for textures.</li> <li>Fixed tooltip position - it now does not go outside of screen bounds.</li> <li>"Immutable collection" reflection attribute for collection fields that prevent changing collection size.</li> <li>Ability to get typed data of specific mip level of a texture.</li> <li>Ability to fetch specific mip level data of textures.</li> <li>Ability to set height map of terrain chunks directly from an image.</li> <li>Dependency graph visualizer for asset browser.</li> <li>Resource dependency graph.</li> <li>Ability to flatten terrain slopes.</li> <li>Return local height value at intersection point in ray-terrain test.</li> <li>Cleaned editor's command API.</li> <li>Removed visibility cache.</li> <li>Ability to index graph with <code>Handle&lt;T: NodeTrait&gt;</code></li> <li><code>Handle::transmute</code></li> <li>Doc comments support for reflection.</li> <li>Show doc comments for selected entity in a separate window.</li> <li>Moved logger to <code>fyrox_core</code>.</li> <li>Resource system refactoring to support user-defined resources.</li> <li>Blackboard for visitor to pass arbitrary data when serializing/deserializing.</li> <li>Added missing recalculation of terrain bounding box.</li> <li><code>Texture::deep_clone</code></li> <li><code>Log::verify_message</code></li> <li><code>R32F</code> + <code>R16F</code> texture formats.</li> <li><code>data_of_type</code> methods to reinterpret inner texture data storage to a particular type.</li> <li>Debug drawing for scene nodes.</li> <li>Configurable polygon rasterization mode for scenes (gbuffer only).</li> <li>Ability to set polygon rasterization mode to select between solid and wireframe rendering.</li> <li>Force <code>Framebuffer::draw_x</code> methods to accept element range to draw.</li> <li>Proper culling for terrains.</li> <li>Refactored rendering: scene nodes can now supply renderer with data. <code>NodeTrait::collect_render_data</code> is now used to
supply renderer with data.</li> <li>Batch generation is now done on per-camera (which includes light sources for shadows) basis.</li> <li>Added a method to link nodes while keeping child's global position and rotation.</li> <li>LODs for terrains.</li> <li>Limits for collider shape values.</li> <li>Added doc example for <code>Graph::begin_multi_borrow</code>.</li> <li>Fixed samplers type collision when rendering with materials with different sampler types.</li> <li>Unbind texture from other samplers when setting it to a new one.</li> <li>Fixed half-float textures + fixed volume textures mip maps.</li> <li><code>RGB16F</code> texture format.</li> <li>Use texture-based matrix storage for "unlimited" bone matrices. Raises matrix count per surface from 64
to 255 for standard material.</li> <li>Fixed texture alignment issues.</li> <li>Use correct sampler index when changing texture data.</li> <li>Set new mip count for texture when changing its data.</li> <li>Fixed texture binding bug.</li> <li>Warning instead of panic when there's not enough space for bone matrices.</li> <li>Rename <code>visitor::Node</code> to <code>visitor::VisitorNode</code> to prevent confusing import in IDEs.</li> <li><code>InheritableVariable::take</code></li> <li>Ability to change size of terrain height map and layer masks.</li> <li>Ability to add chunks from any side of the terrain.</li> <li>Fixed crash when deleting a navmesh edge.</li> <li>Improved package description.</li> <li>Make navmesh panel floating by default + open it when a navmesh is selected.</li> <li>Navigational mesh refactoring.</li> <li>Navigational mesh scene node.</li> <li>Pass light intensity into lightmapper.</li> <li>"Headless" mode for <code>Executor</code> - suitable for server-side of multiplayer games.</li> <li>Added editor's window icon.</li> <li>Blend shape support.</li> <li>Changed sidebar to be inspector in the view dropdown menu.</li> <li>Tweaked step values for transform properties.</li> <li>Limits for vec editor.</li> <li>Generic <code>Vector&lt;T,N&gt;</code> property editor.</li> <li>Added support for min, max, step property attributes for vecN.</li> <li>Ability to create/destroy audio output device on demand.</li> <li>Migrate to <code>tinyaudio</code> as audio output backend</li> <li>Use <code>RcUiNodeHandle</code> for context menus. This ensures that context menu will be destroyed when it is
not used anymore.</li> <li>Fixed multiple lightmapping issues.</li> <li>Fixed incorrect <code>sRGB</code> conversion for WASM.</li> <li>Android support.</li> <li>Ability to run the engine without graphics/window/sound by making these parts optional.</li> <li>Update to latest <code>winit</code> + <code>glutin</code>.</li> <li>Ability to change value in <code>NumericUpDown</code> widget by dragging</li> <li>Removed "Scene Graph" item from world viewer + made breadcrumbs much more compact.</li> <li>Put interaction mode panel on top of scene previewer.</li> <li>Added ability to search assets in the asset browser.</li> <li><code>SearchBar</code> widget.</li> <li>Ability to hide path text box in file browser widget.</li> <li>Hide path field in the asset browser.</li> <li>Tooltip for asset items in the asset browser that shows full asset path.</li> <li>Improved simple tooltip style.</li> <li>Optional ability to suppress closing menus by clicking on non-empty menu.</li> <li>Added <code>No Scene</code> reminder in the editor and how to create/load a scene.</li> <li>Editor UI style improvements.</li> <li><code>DrawingContext::push_arc+push_rounded_rect</code></li> <li>Ability to enable/disable debug geometry for camera/light sources.</li> <li>Show indices of input sockets of ABSM nodes.</li> <li>Keep animations enabled on import.</li> <li>Blend space support.</li> <li>Added help menu (with <code>Open Book</code> and <code>Open API Reference</code> items)</li> <li>Ability to create special (much faster) bindings to position/scale/rotation of nodes in the animation
editor.</li> <li>Ability to reimport animations in the animation editor.</li> <li>New example: render to texture.</li> <li>Audio bus graph.</li> <li>Root motion support.</li> <li>Audio panel rework to support audio bus graphs.</li> <li>Sound effect API improvements.</li> <li>Keep recent files list sorted and up-to-date.</li> <li>Fixed incorrect sound panning in HRTF mode.</li> <li>Ability to get unique material instances when cloning a surface.</li> <li>Validation for sound node</li> <li>Audio preview panel</li> <li>Do not play sounds in the editor automatically. Sounds can only be played from the audio preview panel
instead. fixes the issue when you have a scene with multiple sounds, but since they're playing, their playback position
changes and these changes sneak in the saved scene preventing from defining strict playback position</li> <li>Ability to partially update global properties of a hierachy of nodes.</li> <li>Do not crash if a root node in the previewer died.</li> <li>Fixed deadlock when selecting object's property in animation editor.</li> <li>Ability to set pre-generated particles in particle systems.</li> <li>Provided access to standard shader names.</li> <li>Print texture resource name when failed to create its GPU version.</li> <li>Rebuild terrain's geometry on deserialization.</li> <li>Automatic, reflection-based resource handle mapping.</li> <li>Ability to ignore some type when doing property inheritance.</li> <li>Support for hash maps in the property selector.</li> <li>Expose material fields via reflection.</li> <li>Keep flags of <code>ScrollBarMessage</code> when responding to value message.</li> <li>Delegating implementation of <code>Debug</code> trait for <code>ImmutableString</code>.</li> <li>Added reflection for hash maps.</li> <li>Reflection system refactoring to support types with interior mutability (<code>Mutex</code>, <code>RefCell</code>, etc.)</li> <li>Ability to rewind particle systems to a particular time.</li> <li>Determinism for particle systems.</li> <li>Fixed preview mode for particle systems.</li> <li>Ability to "rewind" particle systems in particle system control panel.</li> <li>Fixed <code>ParticleSystem::clear_particles</code> for emitters that does not resurrect their particles.</li> <li>Fixed potential panic in formatted text on missing glyphs.</li> <li>Supply <code>PluginContext</code> with performance statistics for the previous frame.</li> <li>Property editor for <code>ColorGradient</code>s.</li> <li>Simplified <code>color_over_lifetime</code> field in particle systems.</li> <li>Improved color gradient API.</li> <li>Fixed incorrect activation of transition/states during the preview mode in the ABSM editor.</li> <li>Compound conditions for ABSM transitions</li> <li>Fixed off-screen UI rendering compatibility with HDR pipeline.</li> <li>Refactored scene node lifetime management - this mainly fixes the bug when a node with <code>Some(lifetime)</code> would crash
the editor. The same is applied to play-once sounds. <code>Node::update</code> now does not manage node's lifetime anymore, instead
there's <code>Node::is_alive</code>.</li> <li>Fixed incorrect handling of user-defined forces of rigid bodies. A body was pushed continuously using
previously set force.</li> <li>Configurable size for light pictograms in the editor</li> <li><code>ActiveStateChanged</code> event now contains both previous and new states.</li> <li>Message passing for scripts with multiple routing strategies</li> <li><code>Graph::find_map/find_up_map/find_up_by_name</code></li> <li>Improved <code>Graph::find_x</code> methods - returns <code>Option&lt;(Handle&lt;Node&gt;, &amp;Node)&gt;</code> now, that removes another
borrow if there's a need to borrow it at a call site.</li></ul> <h2 id="support"> Support</h2> <p>If you want to support the development of the project, click one of the links below. Preferable way is to use
<a href="https://boosty.to/fyrox" target="_blank" rel="noopener noreferrer">Boosty<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> - this way the money will be available for the development immediately.
Alternatively you can can use <a href="https://www.patreon.com/mrdimas" target="_blank" rel="noopener noreferrer">Patreon<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>, but in this case the money will
be on-hold for unknown period of time (<a href="https://github.com/FyroxEngine/Fyrox/issues/363" target="_blank" rel="noopener noreferrer">details are here<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>).</p> <p>Also, you can help by fixing one of the <a href="https://github.com/FyroxEngine/Fyrox/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">"good first issues" <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>,
adding a desired feature to the engine, or making a contribution to the <a href="https://github.com/fyrox-book" target="_blank" rel="noopener noreferrer">book<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/75.e8729727.js" defer=""></script><script src="/assets/js/18.e8cf7feb.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[This Week in Fyrox #18]]></title>
            <description><![CDATA[Progress report for the Fyrox Game Engine]]></description>
            <link>https://fyrox.rs/blog/post/twif18/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/twif18/</guid>
            <pubDate>Sun, 19 Mar 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">This Week in Fyrox #18</h1> <div class="content__default"><p>Fyrox is an <a href="https://github.com/FyroxEngine/Fyrox" target="_blank" rel="noopener noreferrer">open-source<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> Rust game engine with lots of out-of-box
game-ready features and a full-featured editor. Last two weeks were mostly dedicated to audio improvements
and adding blend shapes support.</p> <h2 id="blend-shapes"> Blend Shapes</h2> <div class="row"><div class="col col-12 text-center"><iframe src="https://www.youtube.com/embed/2VtYk2vDoTY" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div></div> <p>Blend shapes allows you to dynamically change 3D meshes; they are widely used in games to create facial
animation, to dynamically add details to character body parts, etc. It is quite simple, yet very powerful
mechanism, that opens a wide range of possible uses: you can create cut-scenes directly on the engine where
your characters will speak using pre-defined set of shapes associated with <a href="https://en.wikipedia.org/wiki/Viseme" target="_blank" rel="noopener noreferrer">visemes<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.
You can also use this to create characters creator for your game - all you need to do is to specify a set
of offsets for desired parts of face and then allow a player to mix these parts with any proportions they
like. In other words, actual use of this functionality is limited by your imagination.</p> <h2 id="audio-improvements"> Audio Improvements</h2> <p>Fyrox now uses <a href="https://crates.io/crates/tinyaudio" target="_blank" rel="noopener noreferrer">TinyAudio<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> crate as a sound output backend. This is a new,
tiny crate that serves a single purpose - make audio output as simple as possible. Also, compared to <code>cpal</code>,
this crate it does not have weird sound artifacts on WebAssembly and builds fine on Android platform.</p> <h2 id="ui-improvements"> UI Improvements</h2> <p><code>fyrox-ui</code> now have generic version of <code>SVector&lt;T, N&gt;</code> editor. Also, this new editor supports limits (min, max),
and step that can be supplied to it using reflection (<code>min</code>, <code>max</code>, <code>step</code> attributes respectively). This can
be useful in your scripts: now your vector parameters can use these attributes.</p> <h2 id="performance-fixes"> Performance Fixes</h2> <p>There was a nasty performance degradation bug, that caused the editor to work more slowly over time, especially
when switching between multiple entities too frequently. The cause of bug was context menu system of the UI
framework. Context menus are "standalone" entities, they're not attached directly to a widget, instead widgets
just use their handles. Also, the same context menu can be shared across unlimited amount of other widgets.
Usually, when you deleting UI node, <code>fyrox-ui</code> deletes all children nodes, but since context menu is not a child
node, they weren't deleted, thus leading to tons of context menus left "alive". Now this bug is fixed, by using
a special "shared handle", which is essentially just a <code>Rc&lt;Handle&lt;UiNode&gt;&gt;</code>. It has a custom destructor that
sends a <code>WidgetMessage::Remove</code> message to the context menu when there's no more strong references to it.</p> <h2 id="full-list-of-changes-in-random-order"> Full List of Changes in Random Order</h2> <ul><li>Added blend shapes support.</li> <li>Ability to collect UI nodes statistics and compare snapshots.</li> <li>Fixed performance degradation in the editor.</li> <li>Migrated to <a href="https://crates.io/crates/tinyaudio" target="_blank" rel="noopener noreferrer">tinyaudio<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> as a sound output backend.</li> <li>Ability to create/destroy audio output device on demand.</li> <li>Generic <code>SVector&lt;T,N&gt;</code> property editor.</li> <li>Ability to set limits (min, max) and step for vector property editors.</li> <li>Fixed import errors of ASCII FBX files with empty texture paths.</li></ul></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/74.8d1d1072.js" defer=""></script><script src="/assets/js/18.e8cf7feb.js" defer=""></script>
  

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[This Week in Fyrox #17]]></title>
            <description><![CDATA[Progress report for the Fyrox Game Engine]]></description>
            <link>https://fyrox.rs/blog/post/twif17/</link>
            <guid isPermaLink="true">https://fyrox.rs/blog/post/twif17/</guid>
            <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
    <div id="app" data-server-rendered="true"><div data-app="true" id="app" class="v-application v-application--is-ltr theme--dark"><div class="v-application--wrap"><!----> <main class="v-main" style="padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;"><div class="v-main__wrap"><div class="container pb-16 blog-post"><h1 class="text-center mt-16 mb-10">This Week in Fyrox #17</h1> <div class="content__default"><p>Fyrox is an <a href="https://github.com/FyroxEngine/Fyrox" target="_blank" rel="noopener noreferrer">open-source<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> Rust game engine with lots of out-of-box
game-ready features and a full-featured editor. This week was mostly dedicated to adding Android support
and fixing annoying bugs.</p> <h2 id="basic-android-support"> Basic Android Support</h2> <p><img src="https://fyrox.rs/assets/twif17/android.gif" alt="platformer on android"></p> <p>Android support was requested <a href="https://github.com/FyroxEngine/Fyrox/issues/175" target="_blank" rel="noopener noreferrer">multiple times<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> already
and after ~1.5 years from the first request it is finally added. It is not fully complete yet, because
a <a href="https://github.com/FyroxEngine/Fyrox/issues/435" target="_blank" rel="noopener noreferrer">separate sound backend<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> should be added to
<code>fyrox-template</code>, but it is already usable. Current renderer implementation is not great for mobile
devices, because it uses graphics rendering techniques that are PC-oriented, so rendering performance is
quite bad if you use complex 3D graphics. However it is more or less fine on 2D graphics. There's a separate
<a href="https://github.com/FyroxEngine/Fyrox/issues/434" target="_blank" rel="noopener noreferrer">task<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> about writing a separate, lightweight renderer for
mobile devices. Keep in mind, that you need to have a relatively new device (2015+), that supports
OpenGL ES 3.0 to get the engine working on mobile devices.</p> <h2 id="lightmapper-fixes"> Lightmapper Fixes</h2> <p><img src="https://fyrox.rs/assets/twif17/lightmap.png" alt="ligthmap"></p> <p>As you might know, Fyrox has built-in lightmapper and it is integrated in the editor. For quite a long time,
there was a bug that corrupted GPU vertex buffers when preparing second UV map for light maps. Which resulted
in weird graphical artifacts. Also, when saving a scene with light map, node handles weren't correctly remapped
thus leading to panic when trying to load such scene. Now these bugs are fixed you can use lightmapper normally.</p> <h2 id="hdr-fixes-on-opengl-es"> HDR Fixes on OpenGL ES</h2> <p>For about a year, graphics looked pale on WebAssembly compared to PC. That's because of differences between
sRGB frame buffers behavior on OpenGL and OpenGL ES. sRGB frame buffers on OpenGL does not change input
values from shader and write values as is (unless you turn sRGB conversion manually) and convert them to
linear when reading from sRGB textures. On OpenGL ES, however, such conversion is on by default in both
ways and it led to pale-colored output image on platforms such as WebAssembly.</p> <h2 id="full-list-of-changes-in-random-order"> Full List of Changes in Random Order</h2> <ul><li>Basic android support</li> <li>Correct window and OpenGL context initialization for all platforms</li> <li><code>fyrox-template</code> improvements to generate Android executors</li> <li>Fixed incorrect sRGB conversion on WebAssembly and Android (OpenGL ES)</li> <li>Fixed multiple lightmapper issues and make it work correctly in the editor.</li></ul></div></div></div></main> <footer class="v-footer v-sheet theme--dark v-footer--padless"><div class="darken-4 white--text text-center v-card v-card--flat v-sheet theme--dark rounded-0" style="width:100%;"><hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text"><div data-v-7ab6dcee=""><a href="https://discord.com/invite/xENF5Uh" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><span class="d-flex mr-1" data-v-7ab6dcee=""><img src="https://fyrox.rs/assets/custom_icons/discord.svg" class="custom-icon" data-v-7ab6dcee=""></span> <!----></span></a><a href="https://github.com/FyroxEngine/Fyrox" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-github theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="https://twitter.com/DmitryNStepanov" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-twitter theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a><a href="/sponsor.html" class="white--text v-btn v-btn--icon v-btn--round theme--dark v-size--default" data-v-7ab6dcee=""><span class="v-btn__content"><i aria-hidden="true" class="v-icon notranslate mr-1 mdi mdi-patreon theme--dark" style="font-size:24px;" data-v-7ab6dcee=""></i> <!----></span></a></div></div> <hr role="separator" aria-orientation="horizontal" class="v-divider theme--dark"> <div class="v-card__text white--text">
            Fyrox Engine 2019 - 2025
        </div></div></footer></div></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.071bf9a3.js" defer=""></script><script src="/assets/js/7.276fa895.js" defer=""></script><script src="/assets/js/73.be664ce7.js" defer=""></script>
  

]]></content:encoded>
        </item>
    </channel>
</rss>